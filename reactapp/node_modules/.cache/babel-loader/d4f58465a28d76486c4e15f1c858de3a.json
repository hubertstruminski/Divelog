{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/divelog/frontend/src/components/twitter/twitter-messages/TwitterConversationContact.js\";\nimport React from 'react';\nimport '../../../css/twitter-messages/TwitterConversationContact.css';\nimport axios from 'axios';\nimport ConvertDMTime from '../../../util/ConvertDMTime';\n\nclass TwitterConversationContact extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.convertTime = new ConvertDMTime();\n  } // formatDate(inputDate) {\n  //     let months = [\"Jan.\", \"Feb.\", \"Mar.\", \"Apr.\", \"May.\", \"June.\", \"July.\", \"Aug.\", \"Sept.\", \"Oct.\", \"Nov.\", \"Dec.\"];\n  //     let date = new Date(inputDate);\n  //     let splittedDate = date.toString().split(\" \");\n  //     let year = date.getFullYear();\n  //     let indexOfMonth = date.getMonth();\n  //     let month = months[indexOfMonth];\n  //     let days = splittedDate[2];\n  //     let hours = date.getHours();\n  //     let minutes = date.getMinutes();\n  //     let currentDate = new Date();\n  //     let splittedCurrentDate = currentDate.toString().split(\" \");\n  //     if(year === currentDate.getFullYear() && indexOfMonth === currentDate.getMonth() && days === splittedCurrentDate[2]) {\n  //         if(hours < 10) {\n  //             hours = \"0\" + hours;\n  //         }\n  //         if(minutes < 10) {\n  //             minutes = \"0\" + minutes;\n  //         }\n  //         return hours + \":\" + minutes;\n  //     }\n  //     if(year === currentDate.getFullYear()) {\n  //         return month + \" \" + days;\n  //     }\n  //     if(days < 10) {\n  //         days = \"0\" + days;\n  //     }\n  //     indexOfMonth = indexOfMonth + 1;\n  //     if(indexOfMonth < 10) {\n  //         indexOfMonth = \"0\" + indexOfMonth;\n  //     }\n  //     return days + \"-\" + indexOfMonth + \"-\" + year;   \n  // }\n\n\n  onSubmit(e) {\n    e.preventDefault();\n    this.props.setIsLoadingConversation(true, this.props.recipientId, this.props.senderId, this.props.name, this.props.screenName, this.props.pictureUrl);\n  }\n\n  render() {\n    let text = \"\";\n\n    if (this.props.text.length > 40) {\n      text = this.props.text.substring(0, 40);\n    } else {\n      text = this.props.text.substring(0);\n    }\n\n    let date = this.convertTime.formatDate(this.props.createdAt, false);\n    return React.createElement(\"li\", {\n      className: \"conversation-contact-wrapper\",\n      onClick: this.onSubmit.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"conversation-contact-avatar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.props.pictureUrl,\n      alt: \"Avatar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"conversation-contact-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"conversation-contact-name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, this.props.name), React.createElement(\"div\", {\n      className: \"conversation-contact-date\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, date), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), \"@\", this.props.screenName, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), text));\n  }\n\n}\n\nexport default TwitterConversationContact;","map":{"version":3,"sources":["/home/huber/Pulpit/divelog/frontend/src/components/twitter/twitter-messages/TwitterConversationContact.js"],"names":["React","axios","ConvertDMTime","TwitterConversationContact","Component","constructor","props","state","convertTime","onSubmit","e","preventDefault","setIsLoadingConversation","recipientId","senderId","name","screenName","pictureUrl","render","text","length","substring","date","formatDate","createdAt","bind"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,8DAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;;AAEA,MAAMC,0BAAN,SAAyCH,KAAK,CAACI,SAA/C,CAAyD;AACrDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa,EAAb;AAGA,SAAKC,WAAL,GAAmB,IAAIN,aAAJ,EAAnB;AACH,GARoD,CASrD;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;AAEAO,EAAAA,QAAQ,CAACC,CAAD,EAAI;AACRA,IAAAA,CAAC,CAACC,cAAF;AACA,SAAKL,KAAL,CAAWM,wBAAX,CACI,IADJ,EAEI,KAAKN,KAAL,CAAWO,WAFf,EAGI,KAAKP,KAAL,CAAWQ,QAHf,EAII,KAAKR,KAAL,CAAWS,IAJf,EAKI,KAAKT,KAAL,CAAWU,UALf,EAMI,KAAKV,KAAL,CAAWW,UANf;AAQH;;AAEDC,EAAAA,MAAM,GAAG;AACL,QAAIC,IAAI,GAAG,EAAX;;AACA,QAAG,KAAKb,KAAL,CAAWa,IAAX,CAAgBC,MAAhB,GAAyB,EAA5B,EAAgC;AAC5BD,MAAAA,IAAI,GAAG,KAAKb,KAAL,CAAWa,IAAX,CAAgBE,SAAhB,CAA0B,CAA1B,EAA6B,EAA7B,CAAP;AACH,KAFD,MAEO;AACHF,MAAAA,IAAI,GAAG,KAAKb,KAAL,CAAWa,IAAX,CAAgBE,SAAhB,CAA0B,CAA1B,CAAP;AACH;;AAED,QAAIC,IAAI,GAAG,KAAKd,WAAL,CAAiBe,UAAjB,CAA4B,KAAKjB,KAAL,CAAWkB,SAAvC,EAAkD,KAAlD,CAAX;AAEA,WACI;AAAI,MAAA,SAAS,EAAC,8BAAd;AAA6C,MAAA,OAAO,EAAE,KAAKf,QAAL,CAAcgB,IAAd,CAAmB,IAAnB,CAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,6BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,GAAG,EAAE,KAAKnB,KAAL,CAAWW,UAArB;AAAiC,MAAA,GAAG,EAAC,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,EAII;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKX,KAAL,CAAWS,IADhB,CADJ,EAII;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4CO,IAA5C,CAJJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,OAMO,KAAKhB,KAAL,CAAWU,UANlB,EAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPJ,EAQMG,IARN,CAJJ,CADJ;AAkBH;;AA3FoD;;AA8FzD,eAAehB,0BAAf","sourcesContent":["import React from 'react';\nimport '../../../css/twitter-messages/TwitterConversationContact.css';\nimport axios from 'axios';\nimport ConvertDMTime from '../../../util/ConvertDMTime';\n\nclass TwitterConversationContact extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n\n        }\n        this.convertTime = new ConvertDMTime();\n    }\n    // formatDate(inputDate) {\n    //     let months = [\"Jan.\", \"Feb.\", \"Mar.\", \"Apr.\", \"May.\", \"June.\", \"July.\", \"Aug.\", \"Sept.\", \"Oct.\", \"Nov.\", \"Dec.\"];\n\n    //     let date = new Date(inputDate);\n    //     let splittedDate = date.toString().split(\" \");\n\n    //     let year = date.getFullYear();\n    //     let indexOfMonth = date.getMonth();\n    //     let month = months[indexOfMonth];\n    //     let days = splittedDate[2];\n    //     let hours = date.getHours();\n    //     let minutes = date.getMinutes();\n\n    //     let currentDate = new Date();\n    //     let splittedCurrentDate = currentDate.toString().split(\" \");\n\n    //     if(year === currentDate.getFullYear() && indexOfMonth === currentDate.getMonth() && days === splittedCurrentDate[2]) {\n    //         if(hours < 10) {\n    //             hours = \"0\" + hours;\n    //         }\n    //         if(minutes < 10) {\n    //             minutes = \"0\" + minutes;\n    //         }\n    //         return hours + \":\" + minutes;\n    //     }\n\n    //     if(year === currentDate.getFullYear()) {\n    //         return month + \" \" + days;\n    //     }\n\n    //     if(days < 10) {\n    //         days = \"0\" + days;\n    //     }\n\n    //     indexOfMonth = indexOfMonth + 1;\n\n    //     if(indexOfMonth < 10) {\n    //         indexOfMonth = \"0\" + indexOfMonth;\n    //     }\n    //     return days + \"-\" + indexOfMonth + \"-\" + year;   \n    // }\n\n    onSubmit(e) {\n        e.preventDefault();\n        this.props.setIsLoadingConversation(\n            true,\n            this.props.recipientId,\n            this.props.senderId,\n            this.props.name,\n            this.props.screenName,\n            this.props.pictureUrl \n        );\n    }\n\n    render() {\n        let text = \"\";\n        if(this.props.text.length > 40) {\n            text = this.props.text.substring(0, 40);\n        } else {\n            text = this.props.text.substring(0);\n        }\n\n        let date = this.convertTime.formatDate(this.props.createdAt, false);\n\n        return (\n            <li className=\"conversation-contact-wrapper\" onClick={this.onSubmit.bind(this)}>\n                <div className=\"conversation-contact-avatar\">\n                    <img src={this.props.pictureUrl} alt=\"Avatar\" />\n                </div>\n                <div className=\"conversation-contact-info\">\n                    <div className=\"conversation-contact-name\">\n                        {this.props.name}\n                    </div>\n                    <div className=\"conversation-contact-date\">{date}</div>\n                    <br />\n                    @{ this.props.screenName }\n                    <br />\n                    { text }\n                </div>\n                    \n            </li>\n        );\n    }\n}\n\nexport default TwitterConversationContact;"]},"metadata":{},"sourceType":"module"}