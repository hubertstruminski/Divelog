{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/divelog/react-divelog/src/components/twitter/twitter-messages/Conversation.js\";\nimport React from 'react';\nimport '../../../css/twitter-messages/Conversation.css';\nimport axios from 'axios';\nimport AuthService from '../../../util/AuthService';\n\nclass Conversation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoadingConversation: this.props.isLoadingConversation,\n      directMessages: []\n    };\n    this.Auth = new AuthService();\n  }\n\n  componentDidMount() {\n    const DM = {\n      recipientId: this.props.recipientId,\n      senderId: this.props.senderId\n    };\n    let jwtToken = this.Auth.getRightSocialToken();\n    axios({\n      url: \"/twitter/direct/messages/specified/person/\".concat(jwtToken),\n      method: 'POST',\n      data: DM,\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      console.log(response.data);\n      response.data.map((message, index) => {\n        let urlEntities = [];\n        let mediaEntities = [];\n        message.urlEntities.map(urlEntity => {\n          let element = urlEntity.expandedURL;\n          urlEntities.push(element);\n        });\n        message.mediaEntities.map(mediaEntity => {\n          let element = {\n            mediaUrl: mediaEntity.mediaURL,\n            type: mediaEntity.type\n          };\n          mediaEntities.push(element);\n        });\n        const singleMessage = {\n          id: message.id,\n          createdAt: message.createdAt,\n          recipientId: message.recipientId,\n          senderId: message.senderId,\n          text: message.text,\n          mediaEntities: mediaEntities,\n          urlEntities: urlEntities\n        };\n        this.setState({\n          directMessages: this.state.directMessages.concat(singleMessage)\n        });\n      });\n      this.setState({\n        isLoadingConversation: false\n      });\n    });\n  }\n\n  render() {\n    // let isLoadingConversation = this.props.isLoadingConversation;\n    let isLoadingConversation = this.state.isLoadingConversation;\n    return React.createElement(React.Fragment, null, isLoadingConversation && React.createElement(\"div\", {\n      className: \"spinner-border text-primary\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      class: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Loading...\")), !isLoadingConversation && React.createElement(\"div\", {\n      className: \"twitter-messages-direct-message-person-conversation-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-messages-direct-message-person-title-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"twitter-messages-direct-message-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"twitter-messages-direct-message-send-input-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Conversation;","map":{"version":3,"sources":["/home/huber/Pulpit/divelog/react-divelog/src/components/twitter/twitter-messages/Conversation.js"],"names":["React","axios","AuthService","Conversation","Component","constructor","props","state","isLoadingConversation","directMessages","Auth","componentDidMount","DM","recipientId","senderId","jwtToken","getRightSocialToken","url","method","data","headers","then","response","console","log","map","message","index","urlEntities","mediaEntities","urlEntity","element","expandedURL","push","mediaEntity","mediaUrl","mediaURL","type","singleMessage","id","createdAt","text","setState","concat","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../../css/twitter-messages/Conversation.css';\nimport axios from 'axios';\nimport AuthService from '../../../util/AuthService';\n\nclass Conversation extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isLoadingConversation: this.props.isLoadingConversation,\n            directMessages: []\n        }\n        this.Auth = new AuthService();\n    }\n\n    componentDidMount() {\n        const DM = {\n            recipientId: this.props.recipientId,\n            senderId: this.props.senderId\n        }\n\n        let jwtToken = this.Auth.getRightSocialToken();\n\n        axios({\n            url: `/twitter/direct/messages/specified/person/${jwtToken}`,\n            method: 'POST',\n            data: DM,\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }\n        }).then(response => {\n            console.log(response.data);\n            response.data.map((message, index) => {\n                let urlEntities = [];\n                let mediaEntities = [];\n\n                message.urlEntities.map((urlEntity) => {\n                    let element = urlEntity.expandedURL;\n                    urlEntities.push(element);\n                });\n\n                message.mediaEntities.map((mediaEntity) => {\n                    let element = {\n                        mediaUrl: mediaEntity.mediaURL,\n                        type: mediaEntity.type\n                    }\n                    mediaEntities.push(element);\n                });\n                const singleMessage = {\n                    id: message.id,\n                    createdAt: message.createdAt,\n                    recipientId: message.recipientId,\n                    senderId: message.senderId,\n                    text: message.text,\n                    mediaEntities: mediaEntities,\n                    urlEntities: urlEntities\n                }\n                this.setState({ directMessages: this.state.directMessages.concat(singleMessage) });\n            });\n            this.setState({ isLoadingConversation: false })\n        });\n    }\n\n    render() {\n        // let isLoadingConversation = this.props.isLoadingConversation;\n        let isLoadingConversation = this.state.isLoadingConversation;\n        return (\n            <>\n                { isLoadingConversation &&\n                    <div \n                        className='spinner-border text-primary' \n                        role='status'\n                    >\n                        <span class='sr-only'>\n                            Loading...\n                        </span>\n                    </div>\n                }\n                {\n                    !isLoadingConversation &&\n                    <div className=\"twitter-messages-direct-message-person-conversation-wrapper\">\n                        <div className=\"twitter-messages-direct-message-person-title-info\"></div>\n                        <div className=\"twitter-messages-direct-message-container\"></div>\n                        <div className=\"twitter-messages-direct-message-send-input-container\"></div>\n                    </div>\n                }\n            </>\n        );\n    }\n}\n\nexport default Conversation;"]},"metadata":{},"sourceType":"module"}