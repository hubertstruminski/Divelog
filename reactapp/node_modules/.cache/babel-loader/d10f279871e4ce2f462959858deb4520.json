{"ast":null,"code":"var _jsxFileName = \"/home/msi/Pulpit/Divelog/reactapp/src/components/twitter/twitter-messages/Conversation.js\";\nimport React from 'react';\nimport '../../../css/twitter-messages/Conversation.css';\nimport axios from 'axios';\nimport AuthService from '../../../util/AuthService';\nimport SingleMessage from './SingleMessage';\nimport { BACKEND_API_URL } from '../../../actions/types';\nimport $ from 'jquery';\nimport SockJS from \"sockjs-client\";\nimport Stomp from 'stompjs';\nimport { Socket } from 'dgram';\n\nclass Conversation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoadingConversation: this.props.isLoadingConversation,\n      directMessages: [],\n      isSingleMessageRetrieved: false,\n      isFirstTimeRendered: true,\n      isRateLimitExceeded: false\n    }; // this.socket = null;\n    // this.stompClient = null;\n\n    this.isError = false;\n    this.Auth = new AuthService();\n    this.renderSingleMessages = this.renderSingleMessages.bind(this);\n  }\n\n  componentDidMount() {\n    let jwtToken = this.Auth.getRightSocialToken();\n\n    if (this.state.isFirstTimeRendered) {\n      axios({\n        url: `${BACKEND_API_URL}/twitter/direct/messages/specified/person/${jwtToken}`,\n        method: 'POST',\n        data: JSON.stringify(this.props.userId),\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      }).then(response => {\n        if (response.status === 429) {\n          this.setState({\n            isRateLimitExceeded: true\n          });\n          this.isError = true;\n          return;\n        }\n\n        if (!this.isError) {\n          response.data.map((message, index) => {\n            let urlEntities = [];\n            let mediaEntities = [];\n            message.urlEntities.map(urlEntity => {\n              let element = urlEntity.expandedURL;\n              urlEntities.push(element);\n            });\n            message.mediaEntities.map(mediaEntity => {\n              let element = {\n                mediaUrl: mediaEntity.mediaURL,\n                type: mediaEntity.type\n              };\n              mediaEntities.push(element);\n            });\n            const singleMessage = {\n              id: message.id,\n              createdAt: message.createdAt,\n              recipientId: message.recipientId,\n              senderId: message.senderId,\n              text: message.text,\n              mediaEntities: mediaEntities,\n              urlEntities: urlEntities,\n              twitterOwnerId: message.twitterOwnerId\n            };\n            this.setState({\n              directMessages: this.state.directMessages.concat(singleMessage)\n            });\n          });\n        }\n\n        this.setState({\n          isLoadingConversation: false,\n          isSingleMessageRetrieved: true,\n          isFirstTimeRendered: false\n        }, () => {\n          var socket = new SockJS(\"http://localhost:5000/greeting\");\n          var stompClient = Stomp.over(socket); // , {transports: ['websocket']}\n\n          stompClient.connect({}, () => {\n            stompClient.subscribe('/topic/public', payload => {\n              var message = JSON.parse(payload.body);\n              console.log(message);\n            }); // Tell your username to the server\n\n            stompClient.send(\"/app/chat.addUser\", {}, JSON.stringify({\n              sender: \"Hubert StrumiÅ„ski\",\n              type: 'JOIN'\n            }));\n          }, error => {\n            console.log(\"onWebScketError()\");\n            console.log(error);\n          }); // this.stompClient.subscribe('/user/queue/greeting', function (greeting) {\n          //   console.log(greeting);\n          // });\n          // this.stompClient.subscribe('/user/queue/errors', function (greeting) {\n          //     console.log(greeting);\n          //   });\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  }\n\n  onWebSocketConnected() {// Subscribe to the Public Topic\n  }\n\n  onWebSocketError(error) {\n    ;\n  }\n\n  onMessageReceived(payload) {} // componentWillUnmount() {\n  //     this.stompClient.close();\n  // }\n\n\n  retrieveSingleMessages() {\n    if (!this.state.isFirstTimeRendered) {\n      this.setState({\n        isSingleMessageRetrieved: false,\n        directMessages: []\n      }, () => {\n        let jwtToken = this.Auth.getRightSocialToken();\n        axios({\n          url: `${BACKEND_API_URL}/twitter/direct/messages/specified/person/${jwtToken}`,\n          method: 'POST',\n          data: JSON.stringify(this.props.userId),\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          }\n        }).then(response => {\n          if (response.status === 429) {\n            this.setState({\n              isRateLimitExceeded: true\n            });\n            this.isError = true;\n            return;\n          }\n\n          if (!this.isError) {\n            response.data.map((message, index) => {\n              let urlEntities = [];\n              let mediaEntities = [];\n              message.urlEntities.map(urlEntity => {\n                let element = urlEntity.expandedURL;\n                urlEntities.push(element);\n              });\n              message.mediaEntities.map(mediaEntity => {\n                let element = {\n                  mediaUrl: mediaEntity.mediaURL,\n                  type: mediaEntity.type\n                };\n                mediaEntities.push(element);\n              });\n              const singleMessage = {\n                id: message.id,\n                createdAt: message.createdAt,\n                recipientId: message.recipientId,\n                senderId: message.senderId,\n                text: message.text,\n                mediaEntities: mediaEntities,\n                urlEntities: urlEntities,\n                twitterOwnerId: message.twitterOwnerId\n              };\n              this.setState({\n                directMessages: this.state.directMessages.concat(singleMessage)\n              });\n            });\n          }\n\n          this.setState({\n            isSingleMessageRetrieved: true\n          });\n        }).catch(err => {\n          console.log(err);\n        });\n      });\n    }\n  }\n\n  renderSingleMessages() {\n    return this.state.directMessages.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt)).map((singleMessage, index) => {\n      return React.createElement(SingleMessage, {\n        index: index,\n        id: singleMessage.id,\n        createdAt: singleMessage.createdAt,\n        recipientId: singleMessage.recipientId,\n        senderId: singleMessage.senderId,\n        text: singleMessage.text,\n        mediaEntities: singleMessage.mediaEntities,\n        urlEntities: singleMessage.urlEntities,\n        twitterOwnerId: singleMessage.twitterOwnerId,\n        pictureUrl: this.props.pictureUrl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      });\n    });\n  }\n\n  render() {\n    let isLoadingConversation = this.state.isLoadingConversation;\n    let isSingleMessageRetrieved = this.state.isSingleMessageRetrieved;\n    let isRateLimitExceeded = this.state.isRateLimitExceeded;\n    return React.createElement(React.Fragment, null, isLoadingConversation && React.createElement(\"div\", {\n      className: \"spinner-border text-primary\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      class: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, \"Loading...\")), !isLoadingConversation && React.createElement(\"div\", {\n      className: \"twitter-messages-direct-message-person-conversation-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-messages-direct-message-person-title-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-direct-message-screen-name-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        fontWeight: 700,\n        fontSize: '1vw'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, this.props.name), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }), \"@\", this.props.screenName), React.createElement(\"div\", {\n      className: \"twitter-direct-message-info-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      class: \"fas fa-info-circle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"twitter-messages-direct-message-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, isSingleMessageRetrieved && this.renderSingleMessages(), isRateLimitExceeded && React.createElement(\"span\", {\n      style: {\n        color: \"red\",\n        fontSize: \"0.65vw\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, \"Twitter rate limit exceeded.\")), React.createElement(\"div\", {\n      className: \"twitter-messages-direct-message-send-input-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      class: \"fas fa-image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }), React.createElement(\"textarea\", {\n      placeholder: \"Start a new message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      class: \"fas fa-check\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Conversation;","map":{"version":3,"sources":["/home/msi/Pulpit/Divelog/reactapp/src/components/twitter/twitter-messages/Conversation.js"],"names":["React","axios","AuthService","SingleMessage","BACKEND_API_URL","$","SockJS","Stomp","Socket","Conversation","Component","constructor","props","state","isLoadingConversation","directMessages","isSingleMessageRetrieved","isFirstTimeRendered","isRateLimitExceeded","isError","Auth","renderSingleMessages","bind","componentDidMount","jwtToken","getRightSocialToken","url","method","data","JSON","stringify","userId","headers","then","response","status","setState","map","message","index","urlEntities","mediaEntities","urlEntity","element","expandedURL","push","mediaEntity","mediaUrl","mediaURL","type","singleMessage","id","createdAt","recipientId","senderId","text","twitterOwnerId","concat","socket","stompClient","over","connect","subscribe","payload","parse","body","console","log","send","sender","error","catch","err","onWebSocketConnected","onWebSocketError","onMessageReceived","retrieveSingleMessages","sort","a","b","Date","pictureUrl","render","fontWeight","fontSize","name","screenName","color"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../../css/twitter-messages/Conversation.css';\nimport axios from 'axios';\nimport AuthService from '../../../util/AuthService';\nimport SingleMessage from './SingleMessage';\nimport { BACKEND_API_URL } from '../../../actions/types';\nimport $ from 'jquery';\nimport SockJS from \"sockjs-client\";\nimport Stomp from 'stompjs';\nimport { Socket } from 'dgram';\n\nclass Conversation extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isLoadingConversation: this.props.isLoadingConversation,\n            directMessages: [],\n            isSingleMessageRetrieved: false,\n            isFirstTimeRendered: true,\n            isRateLimitExceeded: false\n        }\n        // this.socket = null;\n        // this.stompClient = null;\n\n        this.isError = false;\n        this.Auth = new AuthService();\n        this.renderSingleMessages = this.renderSingleMessages.bind(this);\n    }\n\n    componentDidMount() {\n        let jwtToken = this.Auth.getRightSocialToken();\n\n        if(this.state.isFirstTimeRendered) {\n            axios({\n                url: `${BACKEND_API_URL}/twitter/direct/messages/specified/person/${jwtToken}`,\n                method: 'POST',\n                data: JSON.stringify(this.props.userId),\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                }\n            }).then(response => {\n                if(response.status === 429) {\n                    this.setState({ isRateLimitExceeded: true });\n                    this.isError = true;\n                    return;\n                }\n                if(!this.isError) {\n                    response.data.map((message, index) => {\n                        let urlEntities = [];\n                        let mediaEntities = [];\n\n                        message.urlEntities.map((urlEntity) => {\n                            let element = urlEntity.expandedURL;\n                            urlEntities.push(element);\n                        });\n        \n                        message.mediaEntities.map((mediaEntity) => {\n                            let element = {\n                                mediaUrl: mediaEntity.mediaURL,\n                                type: mediaEntity.type\n                            }\n                            mediaEntities.push(element);\n                        });\n                        const singleMessage = {\n                            id: message.id,\n                            createdAt: message.createdAt,\n                            recipientId: message.recipientId,\n                            senderId: message.senderId,\n                            text: message.text,\n                            mediaEntities: mediaEntities,\n                            urlEntities: urlEntities,\n                            twitterOwnerId: message.twitterOwnerId\n                        }\n                        this.setState({ directMessages: this.state.directMessages.concat(singleMessage) });\n                    });\n                }\n                this.setState({ \n                    isLoadingConversation: false,\n                    isSingleMessageRetrieved: true,\n                    isFirstTimeRendered: false\n                }, () => {\n                    var socket = new SockJS(\"http://localhost:5000/greeting\");\n                    var stompClient = Stomp.over(socket);\n                    // , {transports: ['websocket']}\n                    stompClient.connect({}, () => {\n                        stompClient.subscribe('/topic/public', (payload) => {\n                            var message = JSON.parse(payload.body);\n                            console.log(message);\n                        });\n                        // Tell your username to the server\n                        stompClient.send(\"/app/chat.addUser\",\n                            {},\n                            JSON.stringify({sender: \"Hubert StrumiÅ„ski\", type: 'JOIN'})\n                        )\n                    }, (error) => {\n                        console.log(\"onWebScketError()\");\n                        console.log(error)\n                    });\n                        // this.stompClient.subscribe('/user/queue/greeting', function (greeting) {\n                        //   console.log(greeting);\n                        // });\n                        // this.stompClient.subscribe('/user/queue/errors', function (greeting) {\n                        //     console.log(greeting);\n                        //   });\n                });\n            }).catch(err => {\n                console.log(err);\n            });\n        }\n        \n    }\n\n    onWebSocketConnected() {\n        // Subscribe to the Public Topic\n        \n        \n    }\n\n    onWebSocketError(error) {\n        ;\n    }\n\n    onMessageReceived(payload) {\n        \n    }\n\n    // componentWillUnmount() {\n    //     this.stompClient.close();\n    // }\n\n    retrieveSingleMessages() {\n        if(!this.state.isFirstTimeRendered) {\n            this.setState({ \n                isSingleMessageRetrieved: false,\n                directMessages: []\n            }, () => {\n                let jwtToken = this.Auth.getRightSocialToken();\n                axios({\n                    url: `${BACKEND_API_URL}/twitter/direct/messages/specified/person/${jwtToken}`,\n                    method: 'POST',\n                    data: JSON.stringify(this.props.userId),\n                    headers: {\n                        'Accept': 'application/json',\n                        'Content-Type': 'application/json'\n                    }\n                }).then(response => {\n                    if(response.status === 429) {\n                        this.setState({ isRateLimitExceeded: true });\n                        this.isError = true;\n                        return;\n                    }\n                    if(!this.isError) {\n                        response.data.map((message, index) => {\n                            let urlEntities = [];\n                            let mediaEntities = [];\n            \n                            message.urlEntities.map((urlEntity) => {\n                                let element = urlEntity.expandedURL;\n                                urlEntities.push(element);\n                            });\n            \n                            message.mediaEntities.map((mediaEntity) => {\n                                let element = {\n                                    mediaUrl: mediaEntity.mediaURL,\n                                    type: mediaEntity.type\n                                }\n                                mediaEntities.push(element);\n                            });\n                            const singleMessage = {\n                                id: message.id,\n                                createdAt: message.createdAt,\n                                recipientId: message.recipientId,\n                                senderId: message.senderId,\n                                text: message.text,\n                                mediaEntities: mediaEntities,\n                                urlEntities: urlEntities,\n                                twitterOwnerId: message.twitterOwnerId\n                            }\n                            this.setState({ directMessages: this.state.directMessages.concat(singleMessage) });\n                        });\n                    }\n                    this.setState({ isSingleMessageRetrieved: true })\n                }).catch(err => {\n                    console.log(err);\n                });\n            });\n        }\n    }\n\n    renderSingleMessages() {\n        return this.state.directMessages\n        .sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt))\n        .map((singleMessage, index) => {\n            return (\n                <SingleMessage \n                    index={index}\n                    id={singleMessage.id}\n                    createdAt={singleMessage.createdAt}\n                    recipientId={singleMessage.recipientId}\n                    senderId={singleMessage.senderId}\n                    text={singleMessage.text}\n                    mediaEntities={singleMessage.mediaEntities}\n                    urlEntities={singleMessage.urlEntities}\n                    twitterOwnerId={singleMessage.twitterOwnerId}\n                    pictureUrl={this.props.pictureUrl}\n                />\n            );\n        });\n    }\n\n    render() {\n        let isLoadingConversation = this.state.isLoadingConversation;\n        let isSingleMessageRetrieved = this.state.isSingleMessageRetrieved;\n        let isRateLimitExceeded = this.state.isRateLimitExceeded;\n        return (\n            <>\n                { isLoadingConversation &&\n                    <div \n                        className='spinner-border text-primary' \n                        role='status'\n                    >\n                        <span class='sr-only'>\n                            Loading...\n                        </span>\n                    </div>\n                }\n                {\n                    !isLoadingConversation &&\n                    <div className=\"twitter-messages-direct-message-person-conversation-wrapper\">\n                        <div className=\"twitter-messages-direct-message-person-title-info\">\n                            <div className=\"twitter-direct-message-screen-name-container\">\n                                <span style={{fontWeight: 700, fontSize: '1vw'}}>{ this.props.name }</span>\n                                <br />\n                                @{ this.props.screenName }\n                            </div>\n                            <div className=\"twitter-direct-message-info-icon\">\n                                <i class=\"fas fa-info-circle\"></i>\n                            </div>\n                        </div>\n                        <div className=\"twitter-messages-direct-message-container\">\n                            {\n                                isSingleMessageRetrieved && this.renderSingleMessages()\n                            }\n                            {\n                                isRateLimitExceeded &&\n                                <span style={{ color: \"red\", fontSize: \"0.65vw\" }}>Twitter rate limit exceeded.</span>\n                            }\n                        </div>\n                        <div className=\"twitter-messages-direct-message-send-input-container\">\n                            <i class=\"fas fa-image\"></i>\n                                <textarea\n                                    placeholder=\"Start a new message\"\n                                ></textarea>\n                            <i class=\"fas fa-check\"></i>\n                        </div>\n                    </div>\n                }\n            </>\n        );\n    }\n}\n\nexport default Conversation;"]},"metadata":{},"sourceType":"module"}