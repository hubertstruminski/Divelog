{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/divelog/react-divelog/src/components/logbook/GoogleLogbookMap.js\";\nimport React from 'react';\nimport { Map, Marker, GoogleApiWrapper, InfoWindow } from 'google-maps-react';\nimport GoogleLogbookModal from '../logbook/GoogleLogbookModal';\nimport $ from 'jquery';\nimport { withTranslation } from 'react-i18next';\nimport { compose } from 'redux';\nimport DeleteLogbookButton from '../logbook/DeleteLogbookButton';\nimport swal from 'sweetalert';\nimport GoogleLogbookMarkerModal from './GoogleLogbookMarkerModal';\n\nclass GoogleLogbookMap extends React.Component {\n  constructor() {\n    super();\n\n    this.onMarkerClick = (props, marker, e) => {\n      if (this.state.isAccessible) {\n        this.setState({\n          selectedPlace: props,\n          activeMarker: marker,\n          showingInfoWindow: true,\n          isAccessible: false,\n          existingMarkerName: props.name,\n          existingMarkerLatitude: props.position.lat,\n          existingMarkerLongitude: props.position.lng\n        });\n        $(document).on('show.bs.modal', \"#modalLogbookMarker\", function (event) {});\n        $(\"#modalLogbookMarker\").modal('show');\n      }\n    };\n\n    this.onClose = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n\n        if (this.tbodyRef.innerHTML !== \"\") {\n          this.tbodyRef.innerHTML = \"\";\n        }\n      }\n    };\n\n    this.onClose = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    };\n\n    this.showTableRow = () => {\n      return React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        scope: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, \"1\")), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, this.state.marker.name), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, this.state.marker.latitude), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, this.state.marker.longitude), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, React.createElement(DeleteLogbookButton, {\n        id: this.state.marker.id,\n        updateMarker: this.updateMarker,\n        setFinishMarker: this.setFinishMarker,\n        setRef: this.setRef,\n        setIsAccessible: this.setIsAccessible,\n        setMarker: this.props.setMarker,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      })));\n    };\n\n    this.state = {\n      latitude: '',\n      longitude: '',\n      marker: {},\n      activeMarker: {},\n      markers: [],\n      showingInfoWIndow: false,\n      selectedPlace: {},\n      isFinishMarker: false,\n      isAccessible: true,\n      existingMarkerName: '',\n      existingMarkerLatitude: '',\n      existingMarkerLongitude: '',\n      isUpdateLogbookRow: false\n    };\n    this.onMapClick = this.onMapClick.bind(this);\n    this.updateMarker = this.updateMarker.bind(this);\n    this.setFinishMarker = this.setFinishMarker.bind(this);\n    this.setIsAccessible = this.setIsAccessible.bind(this);\n    this.showAllMarkers = this.showAllMarkers.bind(this);\n    this.onMarkerClick = this.onMarkerClick.bind(this);\n  }\n\n  componentDidMount() {\n    $(\".add-dive-google-container div:first\").css({\n      \"height\": \"350px\",\n      \"position\": \"static\"\n    });\n    let jwtToken = localStorage.getItem(\"JwtToken\");\n    fetch(\"/get/markers/\".concat(jwtToken), {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'content-type': 'application/json'\n      }\n    }).then(response => response.json()).then(jsonData => {\n      jsonData.map((marker, index) => {\n        let element = {\n          id: marker.id,\n          name: marker.name,\n          latitude: marker.latitude,\n          longitude: marker.longitude\n        };\n        this.setState({\n          markers: this.state.markers.concat(element)\n        });\n      });\n    });\n    console.log(this.props.updateMarker);\n\n    if (this.props.updateMarker != null) {\n      const element = {\n        id: this.props.updateMarker.id,\n        name: this.props.updateMarker.name,\n        latitude: this.props.updateMarker.latitude,\n        longitude: this.props.updateMarker.longitude\n      };\n      this.setState({\n        markers: this.state.markers.concat(element)\n      });\n      this.setState({\n        marker: element\n      }, () => {\n        this.setState({\n          isUpdateLogbookRow: true\n        });\n      });\n    }\n  }\n\n  onMapClick(t, map, coord) {\n    if (this.state.isAccessible) {\n      const latLng = coord.latLng;\n      const lat = latLng.lat();\n      const lng = latLng.lng();\n      this.setState({\n        latitude: lat,\n        longitude: lng,\n        isAccessible: false\n      });\n      $(document).on('show.bs.modal', \"#modalLogbookCenter\", function (event) {\n        $('#name').trigger('focus');\n      });\n      $(\"#modalLogbookCenter\").modal('show');\n    } else {\n      swal(this.props.t(\"googleMap.modal.swalLocation.title\"), this.props.t(\"googleMap.modal.swalLocation.text\"), \"error\");\n    }\n  }\n\n  showMarker() {\n    return React.createElement(Marker, {\n      name: this.state.marker.name,\n      position: {\n        lat: this.state.marker.latitude,\n        lng: this.state.marker.longitude\n      },\n      onClick: this.onMarkerClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    });\n  }\n\n  showAllMarkers() {\n    return this.state.markers.map((marker, index) => {\n      return React.createElement(Marker, {\n        key: index,\n        name: marker.name,\n        position: {\n          lat: marker.latitude,\n          lng: marker.longitude\n        },\n        onClick: this.onMarkerClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      });\n    });\n  }\n\n  showMarkerRowFromUpdateLogbook(object) {\n    return React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      scope: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"1\")), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, object.name), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, object.latitude), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, object.longitude), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(DeleteLogbookButton, {\n      id: object.id,\n      updateMarker: this.updateMarker,\n      setFinishMarker: this.setFinishMarker,\n      setIsAccessible: this.setIsAccessible,\n      setMarker: this.props.setMarker,\n      setUpdateLogbookRow: this.setUpdateLogbookRow,\n      isUpdating: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    })));\n  }\n\n  updateMarker(markerObject) {\n    this.setState({\n      marker: markerObject\n    });\n  }\n\n  setFinishMarker(value) {\n    this.setState({\n      isFinishMarker: value\n    });\n  }\n\n  setIsAccessible() {\n    this.setState({\n      isAccessible: true\n    });\n  }\n\n  setUpdateLogbookRow() {\n    this.setState({\n      isUpdateLogbookRow: false\n    });\n  }\n\n  render() {\n    let isFinishMarker = this.state.isFinishMarker;\n    let isUpdateLogbookRow = this.state.isUpdateLogbookRow;\n    let marker = this.state.marker;\n    let tableRow;\n\n    if (isFinishMarker) {\n      tableRow = this.showTableRow();\n    } else {\n      tableRow = \"\";\n    }\n\n    let updateTableRow;\n\n    if (isUpdateLogbookRow) {\n      updateTableRow = this.showMarkerRowFromUpdateLogbook(marker);\n    } else {\n      updateTableRow = \"\";\n    }\n\n    const mapStyle = {\n      position: 'static',\n      width: '100%',\n      height: '350px'\n    };\n    let loadingScreen = React.createElement(\"div\", {\n      class: \"d-flex justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"spinner-grow\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      class: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, this.props.t(\"loading\"))));\n    let map = React.createElement(\"div\", {\n      className: \"add-dive-google-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, React.createElement(Map, {\n      google: this.props.google,\n      zoom: 5,\n      style: mapStyle,\n      initialCenter: {\n        lat: 48.023,\n        lng: 14.426\n      },\n      onClick: this.onMapClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, isFinishMarker && this.showMarker(), this.showAllMarkers(), React.createElement(InfoWindow, {\n      marker: this.state.activeMarker,\n      visible: this.state.showingInfoWindow,\n      onClose: this.onClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"alert alert-success\",\n      role: \"alert\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, this.state.selectedPlace.name)))), React.createElement(GoogleLogbookModal, {\n      latitude: this.state.latitude,\n      longitude: this.state.longitude,\n      updateMarker: this.updateMarker,\n      setFinishMarker: this.setFinishMarker,\n      setMarker: this.props.setMarker,\n      setIsAccessible: this.setIsAccessible,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }), React.createElement(GoogleLogbookMarkerModal, {\n      name: this.state.existingMarkerName,\n      latitude: this.state.existingMarkerLatitude,\n      longitude: this.state.existingMarkerLongitude,\n      updateMarker: this.updateMarker,\n      setFinishMarker: this.setFinishMarker,\n      setMarker: this.props.setMarker,\n      setIsAccessible: this.setIsAccessible,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"add-dive-table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      className: \"table table-striped table-hover\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      scope: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, \"#\")), React.createElement(\"th\", {\n      scope: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, this.props.t(\"googleMap.table.name\")), React.createElement(\"th\", {\n      scope: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, this.props.t(\"googleMap.table.latitude\")), React.createElement(\"th\", {\n      scope: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, this.props.t(\"googleMap.table.longitude\")), React.createElement(\"th\", {\n      scope: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, this.props.t(\"googleMap.table.delete\")))), React.createElement(\"tbody\", {\n      ref: el => this.tbodyRef = el,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, isFinishMarker && tableRow, isUpdateLogbookRow && updateTableRow))));\n    let content = this.state.isLoading ? loadingScreen : map;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }, content);\n  }\n\n}\n\nexport default compose(GoogleApiWrapper(props => ({\n  apiKey: 'AIzaSyBgb4kpatKEjsOGsxplxFyRfw1K_wGhLTo',\n  language: props.language\n})), withTranslation(\"common\"))(GoogleLogbookMap);","map":{"version":3,"sources":["/home/huber/Pulpit/divelog/react-divelog/src/components/logbook/GoogleLogbookMap.js"],"names":["React","Map","Marker","GoogleApiWrapper","InfoWindow","GoogleLogbookModal","$","withTranslation","compose","DeleteLogbookButton","swal","GoogleLogbookMarkerModal","GoogleLogbookMap","Component","constructor","onMarkerClick","props","marker","e","state","isAccessible","setState","selectedPlace","activeMarker","showingInfoWindow","existingMarkerName","name","existingMarkerLatitude","position","lat","existingMarkerLongitude","lng","document","on","event","modal","onClose","tbodyRef","innerHTML","showTableRow","latitude","longitude","id","updateMarker","setFinishMarker","setRef","setIsAccessible","setMarker","markers","showingInfoWIndow","isFinishMarker","isUpdateLogbookRow","onMapClick","bind","showAllMarkers","componentDidMount","css","jwtToken","localStorage","getItem","fetch","method","headers","then","response","json","jsonData","map","index","element","concat","console","log","t","coord","latLng","trigger","showMarker","showMarkerRowFromUpdateLogbook","object","setUpdateLogbookRow","markerObject","value","render","tableRow","updateTableRow","mapStyle","width","height","loadingScreen","google","el","content","isLoading","apiKey","language"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,gBAAtB,EAAwCC,UAAxC,QAA0D,mBAA1D;AACA,OAAOC,kBAAP,MAA+B,+BAA/B;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,OAAOC,mBAAP,MAAgC,gCAAhC;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,wBAAP,MAAqC,4BAArC;;AAEA,MAAMC,gBAAN,SAA+BZ,KAAK,CAACa,SAArC,CAA+C;AAC3CC,EAAAA,WAAW,GAAG;AACV;;AADU,SA4FdC,aA5Fc,GA4FE,CAACC,KAAD,EAAQC,MAAR,EAAgBC,CAAhB,KAAsB;AAClC,UAAG,KAAKC,KAAL,CAAWC,YAAd,EAA4B;AACxB,aAAKC,QAAL,CAAc;AACVC,UAAAA,aAAa,EAAEN,KADL;AAEVO,UAAAA,YAAY,EAAEN,MAFJ;AAGVO,UAAAA,iBAAiB,EAAE,IAHT;AAIVJ,UAAAA,YAAY,EAAE,KAJJ;AAKVK,UAAAA,kBAAkB,EAAET,KAAK,CAACU,IALhB;AAMVC,UAAAA,sBAAsB,EAAEX,KAAK,CAACY,QAAN,CAAeC,GAN7B;AAOVC,UAAAA,uBAAuB,EAAEd,KAAK,CAACY,QAAN,CAAeG;AAP9B,SAAd;AASAzB,QAAAA,CAAC,CAAC0B,QAAD,CAAD,CAAYC,EAAZ,CAAe,eAAf,EAAgC,qBAAhC,EAAuD,UAAUC,KAAV,EAAiB,CAAE,CAA1E;AACA5B,QAAAA,CAAC,CAAC,qBAAD,CAAD,CAAyB6B,KAAzB,CAA+B,MAA/B;AACH;AACJ,KA1Ga;;AAAA,SA4GdC,OA5Gc,GA4GJpB,KAAK,IAAI;AACf,UAAG,KAAKG,KAAL,CAAWK,iBAAd,EAAiC;AAC7B,aAAKH,QAAL,CAAc;AACVG,UAAAA,iBAAiB,EAAE,KADT;AAEVD,UAAAA,YAAY,EAAE;AAFJ,SAAd;;AAGG,YAAG,KAAKc,QAAL,CAAcC,SAAd,KAA4B,EAA/B,EAAmC;AAClC,eAAKD,QAAL,CAAcC,SAAd,GAA0B,EAA1B;AACH;AACJ;AACJ,KArHa;;AAAA,SA8IdF,OA9Ic,GA8IJpB,KAAK,IAAI;AACf,UAAG,KAAKG,KAAL,CAAWK,iBAAd,EAAiC;AAC7B,aAAKH,QAAL,CAAc;AACVG,UAAAA,iBAAiB,EAAE,KADT;AAEVD,UAAAA,YAAY,EAAE;AAFJ,SAAd;AAIH;AACJ,KArJa;;AAAA,SAuJdgB,YAvJc,GAuJC,MAAM;AACjB,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,CADJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,KAAKpB,KAAL,CAAWF,MAAX,CAAkBS,IAAvB,CAJJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,KAAKP,KAAL,CAAWF,MAAX,CAAkBuB,QAAvB,CALJ,EAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,KAAKrB,KAAL,CAAWF,MAAX,CAAkBwB,SAAvB,CANJ,EAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,mBAAD;AACI,QAAA,EAAE,EAAE,KAAKtB,KAAL,CAAWF,MAAX,CAAkByB,EAD1B;AAEI,QAAA,YAAY,EAAE,KAAKC,YAFvB;AAGI,QAAA,eAAe,EAAE,KAAKC,eAH1B;AAII,QAAA,MAAM,EAAE,KAAKC,MAJjB;AAKI,QAAA,eAAe,EAAE,KAAKC,eAL1B;AAMI,QAAA,SAAS,EAAE,KAAK9B,KAAL,CAAW+B,SAN1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAPJ,CADJ;AAoBH,KA5Ka;;AAGV,SAAK5B,KAAL,GAAa;AACTqB,MAAAA,QAAQ,EAAE,EADD;AAETC,MAAAA,SAAS,EAAE,EAFF;AAGTxB,MAAAA,MAAM,EAAE,EAHC;AAITM,MAAAA,YAAY,EAAE,EAJL;AAKTyB,MAAAA,OAAO,EAAE,EALA;AAMTC,MAAAA,iBAAiB,EAAE,KANV;AAOT3B,MAAAA,aAAa,EAAE,EAPN;AAQT4B,MAAAA,cAAc,EAAE,KARP;AAST9B,MAAAA,YAAY,EAAE,IATL;AAUTK,MAAAA,kBAAkB,EAAE,EAVX;AAWTE,MAAAA,sBAAsB,EAAE,EAXf;AAYTG,MAAAA,uBAAuB,EAAE,EAZhB;AAaTqB,MAAAA,kBAAkB,EAAE;AAbX,KAAb;AAeA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKV,YAAL,GAAoB,KAAKA,YAAL,CAAkBU,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKT,eAAL,GAAuB,KAAKA,eAAL,CAAqBS,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAKP,eAAL,GAAuB,KAAKA,eAAL,CAAqBO,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBD,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKtC,aAAL,GAAqB,KAAKA,aAAL,CAAmBsC,IAAnB,CAAwB,IAAxB,CAArB;AACH;;AAEDE,EAAAA,iBAAiB,GAAG;AAChBjD,IAAAA,CAAC,CAAC,sCAAD,CAAD,CAA0CkD,GAA1C,CAA8C;AAC1C,gBAAU,OADgC;AAE1C,kBAAY;AAF8B,KAA9C;AAKA,QAAIC,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAf;AAEAC,IAAAA,KAAK,wBAAiBH,QAAjB,GAA6B;AAC9BI,MAAAA,MAAM,EAAE,KADsB;AAE9BC,MAAAA,OAAO,EAAE;AACL,kBAAU,mCADL;AAEL,wBAAgB;AAFX;AAFqB,KAA7B,CAAL,CAOCC,IAPD,CAOMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAPlB,EAQCF,IARD,CAQMG,QAAQ,IAAI;AACdA,MAAAA,QAAQ,CAACC,GAAT,CAAa,CAAClD,MAAD,EAASmD,KAAT,KAAmB;AAC5B,YAAIC,OAAO,GAAG;AACV3B,UAAAA,EAAE,EAAEzB,MAAM,CAACyB,EADD;AAEVhB,UAAAA,IAAI,EAAET,MAAM,CAACS,IAFH;AAGVc,UAAAA,QAAQ,EAAEvB,MAAM,CAACuB,QAHP;AAIVC,UAAAA,SAAS,EAAExB,MAAM,CAACwB;AAJR,SAAd;AAMA,aAAKpB,QAAL,CAAc;AACV2B,UAAAA,OAAO,EAAE,KAAK7B,KAAL,CAAW6B,OAAX,CAAmBsB,MAAnB,CAA0BD,OAA1B;AADC,SAAd;AAGH,OAVD;AAWH,KApBD;AAqBAE,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKxD,KAAL,CAAW2B,YAAvB;;AAEA,QAAG,KAAK3B,KAAL,CAAW2B,YAAX,IAA2B,IAA9B,EAAoC;AAChC,YAAM0B,OAAO,GAAG;AACZ3B,QAAAA,EAAE,EAAE,KAAK1B,KAAL,CAAW2B,YAAX,CAAwBD,EADhB;AAEZhB,QAAAA,IAAI,EAAE,KAAKV,KAAL,CAAW2B,YAAX,CAAwBjB,IAFlB;AAGZc,QAAAA,QAAQ,EAAE,KAAKxB,KAAL,CAAW2B,YAAX,CAAwBH,QAHtB;AAIZC,QAAAA,SAAS,EAAE,KAAKzB,KAAL,CAAW2B,YAAX,CAAwBF;AAJvB,OAAhB;AAMA,WAAKpB,QAAL,CAAc;AAAE2B,QAAAA,OAAO,EAAE,KAAK7B,KAAL,CAAW6B,OAAX,CAAmBsB,MAAnB,CAA0BD,OAA1B;AAAX,OAAd;AACA,WAAKhD,QAAL,CAAc;AAAEJ,QAAAA,MAAM,EAAEoD;AAAV,OAAd,EAAkC,MAAM;AACpC,aAAKhD,QAAL,CAAc;AAAE8B,UAAAA,kBAAkB,EAAE;AAAtB,SAAd;AACH,OAFD;AAGH;AACJ;;AAEDC,EAAAA,UAAU,CAACqB,CAAD,EAAIN,GAAJ,EAASO,KAAT,EAAgB;AACtB,QAAG,KAAKvD,KAAL,CAAWC,YAAd,EAA4B;AAAA,YAChBuD,MADgB,GACLD,KADK,CAChBC,MADgB;AAExB,YAAM9C,GAAG,GAAG8C,MAAM,CAAC9C,GAAP,EAAZ;AACA,YAAME,GAAG,GAAG4C,MAAM,CAAC5C,GAAP,EAAZ;AAEA,WAAKV,QAAL,CAAc;AACVmB,QAAAA,QAAQ,EAAEX,GADA;AAEVY,QAAAA,SAAS,EAAEV,GAFD;AAGVX,QAAAA,YAAY,EAAE;AAHJ,OAAd;AAMAd,MAAAA,CAAC,CAAC0B,QAAD,CAAD,CAAYC,EAAZ,CAAe,eAAf,EAAgC,qBAAhC,EAAuD,UAAUC,KAAV,EAAiB;AACpE5B,QAAAA,CAAC,CAAC,OAAD,CAAD,CAAWsE,OAAX,CAAmB,OAAnB;AACH,OAFD;AAGAtE,MAAAA,CAAC,CAAC,qBAAD,CAAD,CAAyB6B,KAAzB,CAA+B,MAA/B;AACH,KAfD,MAeO;AACHzB,MAAAA,IAAI,CAAC,KAAKM,KAAL,CAAWyD,CAAX,CAAa,oCAAb,CAAD,EAAqD,KAAKzD,KAAL,CAAWyD,CAAX,CAAa,mCAAb,CAArD,EAAwG,OAAxG,CAAJ;AACH;AACJ;;AA6BDI,EAAAA,UAAU,GAAG;AACT,WACI,oBAAC,MAAD;AACI,MAAA,IAAI,EAAE,KAAK1D,KAAL,CAAWF,MAAX,CAAkBS,IAD5B;AAEI,MAAA,QAAQ,EAAE;AAAEG,QAAAA,GAAG,EAAE,KAAKV,KAAL,CAAWF,MAAX,CAAkBuB,QAAzB;AAAmCT,QAAAA,GAAG,EAAE,KAAKZ,KAAL,CAAWF,MAAX,CAAkBwB;AAA1D,OAFd;AAGI,MAAA,OAAO,EAAE,KAAK1B,aAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAOH;;AAEDuC,EAAAA,cAAc,GAAG;AACb,WAAO,KAAKnC,KAAL,CAAW6B,OAAX,CAAmBmB,GAAnB,CAAuB,CAAClD,MAAD,EAASmD,KAAT,KAAmB;AAC7C,aACI,oBAAC,MAAD;AACI,QAAA,GAAG,EAAEA,KADT;AAEI,QAAA,IAAI,EAAEnD,MAAM,CAACS,IAFjB;AAGI,QAAA,QAAQ,EAAE;AAAEG,UAAAA,GAAG,EAAEZ,MAAM,CAACuB,QAAd;AAAwBT,UAAAA,GAAG,EAAEd,MAAM,CAACwB;AAApC,SAHd;AAII,QAAA,OAAO,EAAE,KAAK1B,aAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAQH,KATM,CAAP;AAUH;;AAkCD+D,EAAAA,8BAA8B,CAACC,MAAD,EAAS;AACnC,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAI,MAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ,CADJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,MAAM,CAACrD,IAAZ,CAJJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKqD,MAAM,CAACvC,QAAZ,CALJ,EAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKuC,MAAM,CAACtC,SAAZ,CANJ,EAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,mBAAD;AACI,MAAA,EAAE,EAAEsC,MAAM,CAACrC,EADf;AAEI,MAAA,YAAY,EAAE,KAAKC,YAFvB;AAGI,MAAA,eAAe,EAAE,KAAKC,eAH1B;AAII,MAAA,eAAe,EAAE,KAAKE,eAJ1B;AAKI,MAAA,SAAS,EAAE,KAAK9B,KAAL,CAAW+B,SAL1B;AAMI,MAAA,mBAAmB,EAAE,KAAKiC,mBAN9B;AAOI,MAAA,UAAU,EAAE,IAPhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAPJ,CADJ;AAqBH;;AAEDrC,EAAAA,YAAY,CAACsC,YAAD,EAAe;AACvB,SAAK5D,QAAL,CAAc;AAAEJ,MAAAA,MAAM,EAAEgE;AAAV,KAAd;AACH;;AAEDrC,EAAAA,eAAe,CAACsC,KAAD,EAAQ;AACnB,SAAK7D,QAAL,CAAc;AAAE6B,MAAAA,cAAc,EAAEgC;AAAlB,KAAd;AACH;;AAEDpC,EAAAA,eAAe,GAAG;AACd,SAAKzB,QAAL,CAAc;AAAED,MAAAA,YAAY,EAAE;AAAhB,KAAd;AACH;;AAED4D,EAAAA,mBAAmB,GAAG;AAClB,SAAK3D,QAAL,CAAc;AAAE8B,MAAAA,kBAAkB,EAAE;AAAtB,KAAd;AACH;;AAEDgC,EAAAA,MAAM,GAAG;AACL,QAAIjC,cAAc,GAAG,KAAK/B,KAAL,CAAW+B,cAAhC;AACA,QAAIC,kBAAkB,GAAG,KAAKhC,KAAL,CAAWgC,kBAApC;AACA,QAAIlC,MAAM,GAAG,KAAKE,KAAL,CAAWF,MAAxB;AAEA,QAAImE,QAAJ;;AACA,QAAGlC,cAAH,EAAmB;AACfkC,MAAAA,QAAQ,GAAG,KAAK7C,YAAL,EAAX;AACH,KAFD,MAEO;AACH6C,MAAAA,QAAQ,GAAG,EAAX;AACH;;AAED,QAAIC,cAAJ;;AACA,QAAGlC,kBAAH,EAAuB;AACnBkC,MAAAA,cAAc,GAAG,KAAKP,8BAAL,CAAoC7D,MAApC,CAAjB;AACH,KAFD,MAEO;AACHoE,MAAAA,cAAc,GAAG,EAAjB;AACH;;AAED,UAAMC,QAAQ,GAAG;AACb1D,MAAAA,QAAQ,EAAE,QADG;AAEb2D,MAAAA,KAAK,EAAE,MAFM;AAGbC,MAAAA,MAAM,EAAE;AAHK,KAAjB;AAMA,QAAIC,aAAa,GACb;AAAK,MAAA,KAAK,EAAC,+BAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,KAAK,EAAC,cAAX;AAA0B,MAAA,IAAI,EAAC,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAM,MAAA,KAAK,EAAC,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKzE,KAAL,CAAWyD,CAAX,CAAa,SAAb,CADL,CADJ,CADJ,CADJ;AAUA,QAAIN,GAAG,GACH;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,GAAD;AACI,MAAA,MAAM,EAAE,KAAKnD,KAAL,CAAW0E,MADvB;AAEI,MAAA,IAAI,EAAE,CAFV;AAGI,MAAA,KAAK,EAAEJ,QAHX;AAII,MAAA,aAAa,EAAE;AAAEzD,QAAAA,GAAG,EAAE,MAAP;AAAeE,QAAAA,GAAG,EAAE;AAApB,OAJnB;AAKI,MAAA,OAAO,EAAE,KAAKqB,UALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOMF,cAAc,IAAI,KAAK2B,UAAL,EAPxB,EAQM,KAAKvB,cAAL,EARN,EASI,oBAAC,UAAD;AACI,MAAA,MAAM,EAAE,KAAKnC,KAAL,CAAWI,YADvB;AAEI,MAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWK,iBAFxB;AAGI,MAAA,OAAO,EAAE,KAAKY,OAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKI;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAqC,MAAA,IAAI,EAAC,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKjB,KAAL,CAAWG,aAAX,CAAyBI,IAA9B,CADJ,CALJ,CATJ,CADJ,EAoBI,oBAAC,kBAAD;AACI,MAAA,QAAQ,EAAE,KAAKP,KAAL,CAAWqB,QADzB;AAEI,MAAA,SAAS,EAAE,KAAKrB,KAAL,CAAWsB,SAF1B;AAGI,MAAA,YAAY,EAAE,KAAKE,YAHvB;AAII,MAAA,eAAe,EAAE,KAAKC,eAJ1B;AAKI,MAAA,SAAS,EAAE,KAAK5B,KAAL,CAAW+B,SAL1B;AAMI,MAAA,eAAe,EAAE,KAAKD,eAN1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApBJ,EA4BI,oBAAC,wBAAD;AACI,MAAA,IAAI,EAAE,KAAK3B,KAAL,CAAWM,kBADrB;AAEI,MAAA,QAAQ,EAAE,KAAKN,KAAL,CAAWQ,sBAFzB;AAGI,MAAA,SAAS,EAAE,KAAKR,KAAL,CAAWW,uBAH1B;AAII,MAAA,YAAY,EAAE,KAAKa,YAJvB;AAKI,MAAA,eAAe,EAAE,KAAKC,eAL1B;AAMI,MAAA,SAAS,EAAE,KAAK5B,KAAL,CAAW+B,SAN1B;AAOI,MAAA,eAAe,EAAE,KAAKD,eAP1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5BJ,EAqCI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,SAAS,EAAC,iCAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAI,MAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ,CADJ,EAII;AAAI,MAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAK9B,KAAL,CAAWyD,CAAX,CAAa,sBAAb,CADL,CAJJ,EAOI;AAAI,MAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKzD,KAAL,CAAWyD,CAAX,CAAa,0BAAb,CADL,CAPJ,EAUI;AAAI,MAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKzD,KAAL,CAAWyD,CAAX,CAAa,2BAAb,CADL,CAVJ,EAaI;AAAI,MAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKzD,KAAL,CAAWyD,CAAX,CAAa,wBAAb,CADL,CAbJ,CADJ,CADJ,EAoBI;AAAO,MAAA,GAAG,EAAGkB,EAAD,IAAQ,KAAKtD,QAAL,GAAgBsD,EAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACMzC,cAAc,IAAIkC,QADxB,EAEMjC,kBAAkB,IAAIkC,cAF5B,CApBJ,CADJ,CArCJ,CADJ;AAmEA,QAAIO,OAAO,GAAG,KAAKzE,KAAL,CAAW0E,SAAX,GAAuBJ,aAAvB,GAAuCtB,GAArD;AAEA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACMyB,OADN,CADJ;AAKH;;AApU0C;;AAuU/C,eAAepF,OAAO,CAClBL,gBAAgB,CACfa,KAAD,KAAY;AACV8E,EAAAA,MAAM,EAAE,yCADE;AAEVC,EAAAA,QAAQ,EAAE/E,KAAK,CAAC+E;AAFN,CAAZ,CADgB,CADE,EAOlBxF,eAAe,CAAC,QAAD,CAPG,CAAP,CAQXK,gBARW,CAAf","sourcesContent":["import React from 'react';\nimport { Map, Marker, GoogleApiWrapper, InfoWindow } from 'google-maps-react';\nimport GoogleLogbookModal from '../logbook/GoogleLogbookModal';\nimport $ from 'jquery';\nimport { withTranslation } from 'react-i18next';\nimport { compose } from 'redux';\nimport DeleteLogbookButton from '../logbook/DeleteLogbookButton';\nimport swal from 'sweetalert';\nimport GoogleLogbookMarkerModal from './GoogleLogbookMarkerModal';\n\nclass GoogleLogbookMap extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            latitude: '',\n            longitude: '',\n            marker: {},\n            activeMarker: {},\n            markers: [],\n            showingInfoWIndow: false,\n            selectedPlace: {},\n            isFinishMarker: false,\n            isAccessible: true,\n            existingMarkerName: '',\n            existingMarkerLatitude: '',\n            existingMarkerLongitude: '',\n            isUpdateLogbookRow: false\n        }\n        this.onMapClick = this.onMapClick.bind(this);\n        this.updateMarker = this.updateMarker.bind(this);\n        this.setFinishMarker = this.setFinishMarker.bind(this);\n        this.setIsAccessible = this.setIsAccessible.bind(this);\n        this.showAllMarkers = this.showAllMarkers.bind(this);\n        this.onMarkerClick = this.onMarkerClick.bind(this);\n    }\n\n    componentDidMount() {\n        $(\".add-dive-google-container div:first\").css({\n            \"height\": \"350px\",\n            \"position\": \"static\"\n        });\n\n        let jwtToken = localStorage.getItem(\"JwtToken\");\n\n        fetch(`/get/markers/${jwtToken}`, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'content-type': 'application/json'\n            }\n        })\n        .then(response => response.json())\n        .then(jsonData => {\n            jsonData.map((marker, index) => {\n                let element = {\n                    id: marker.id,\n                    name: marker.name,\n                    latitude: marker.latitude,\n                    longitude: marker.longitude\n                }\n                this.setState({\n                    markers: this.state.markers.concat(element)\n                })\n            })\n        }); \n        console.log(this.props.updateMarker);\n\n        if(this.props.updateMarker != null) {\n            const element = {\n                id: this.props.updateMarker.id,\n                name: this.props.updateMarker.name,\n                latitude: this.props.updateMarker.latitude,\n                longitude: this.props.updateMarker.longitude\n            }\n            this.setState({ markers: this.state.markers.concat(element) });\n            this.setState({ marker: element}, () => {\n                this.setState({ isUpdateLogbookRow: true });\n            });\n        }\n    }\n\n    onMapClick(t, map, coord) {\n        if(this.state.isAccessible) {\n            const { latLng } = coord;\n            const lat = latLng.lat();\n            const lng = latLng.lng();\n\n            this.setState({ \n                latitude: lat,\n                longitude: lng,\n                isAccessible: false\n            });\n\n            $(document).on('show.bs.modal', \"#modalLogbookCenter\", function (event) {\n                $('#name').trigger('focus');\n            });\n            $(\"#modalLogbookCenter\").modal('show');\n        } else {\n            swal(this.props.t(\"googleMap.modal.swalLocation.title\"), this.props.t(\"googleMap.modal.swalLocation.text\"), \"error\");\n        }\n    }\n\n    onMarkerClick = (props, marker, e) => {\n        if(this.state.isAccessible) {\n            this.setState({\n                selectedPlace: props,\n                activeMarker: marker,\n                showingInfoWindow: true,\n                isAccessible: false,\n                existingMarkerName: props.name,\n                existingMarkerLatitude: props.position.lat,\n                existingMarkerLongitude: props.position.lng\n            });\n            $(document).on('show.bs.modal', \"#modalLogbookMarker\", function (event) {});\n            $(\"#modalLogbookMarker\").modal('show');\n        }\n    }\n\n    onClose = props => {\n        if(this.state.showingInfoWindow) {\n            this.setState({\n                showingInfoWindow: false,\n                activeMarker: null\n            });if(this.tbodyRef.innerHTML !== \"\") {\n                this.tbodyRef.innerHTML = \"\";\n            }\n        }\n    };\n\n    showMarker() {\n        return (\n            <Marker \n                name={this.state.marker.name}\n                position={{ lat: this.state.marker.latitude, lng: this.state.marker.longitude }}\n                onClick={this.onMarkerClick}\n            />\n        );\n    }\n\n    showAllMarkers() {\n        return this.state.markers.map((marker, index) => {\n            return (\n                <Marker \n                    key={index} \n                    name={marker.name}\n                    position={{ lat: marker.latitude, lng: marker.longitude }}\n                    onClick={this.onMarkerClick}\n                />\n            );\n        });\n    }\n\n    onClose = props => {\n        if(this.state.showingInfoWindow) {\n            this.setState({\n                showingInfoWindow: false,\n                activeMarker: null\n            });\n        }\n    };\n\n    showTableRow = () => {\n        return (\n            <tr>\n                <th scope=\"row\">\n                    <b>1</b>\n                </th>\n                <td>{this.state.marker.name}</td>\n                <td>{this.state.marker.latitude}</td>\n                <td>{this.state.marker.longitude}</td>\n                <td>\n                    <DeleteLogbookButton \n                        id={this.state.marker.id}\n                        updateMarker={this.updateMarker}\n                        setFinishMarker={this.setFinishMarker}\n                        setRef={this.setRef}\n                        setIsAccessible={this.setIsAccessible}\n                        setMarker={this.props.setMarker}\n                    />\n                </td>\n            </tr>\n        );\n    }\n\n    showMarkerRowFromUpdateLogbook(object) {\n        return (\n            <tr>\n                <th scope=\"row\">\n                    <b>1</b>\n                </th>\n                <td>{object.name}</td>\n                <td>{object.latitude}</td>\n                <td>{object.longitude}</td>\n                <td>\n                    <DeleteLogbookButton \n                        id={object.id}\n                        updateMarker={this.updateMarker}\n                        setFinishMarker={this.setFinishMarker}\n                        setIsAccessible={this.setIsAccessible}\n                        setMarker={this.props.setMarker}\n                        setUpdateLogbookRow={this.setUpdateLogbookRow}\n                        isUpdating={true}\n                    />\n                </td>\n            </tr>\n        );\n    }\n\n    updateMarker(markerObject) {\n        this.setState({ marker: markerObject });\n    }\n\n    setFinishMarker(value) {\n        this.setState({ isFinishMarker: value });\n    }\n\n    setIsAccessible() {\n        this.setState({ isAccessible: true });\n    }\n\n    setUpdateLogbookRow() {\n        this.setState({ isUpdateLogbookRow: false });\n    }\n\n    render() {\n        let isFinishMarker = this.state.isFinishMarker;\n        let isUpdateLogbookRow = this.state.isUpdateLogbookRow;\n        let marker = this.state.marker;\n\n        let tableRow;\n        if(isFinishMarker) {\n            tableRow = this.showTableRow();\n        } else {\n            tableRow = \"\";\n        }\n\n        let updateTableRow;\n        if(isUpdateLogbookRow) {\n            updateTableRow = this.showMarkerRowFromUpdateLogbook(marker);\n        } else {\n            updateTableRow = \"\";\n        }\n         \n        const mapStyle = {\n            position: 'static',\n            width: '100%',\n            height: '350px',\n        }\n\n        let loadingScreen = (\n            <div class=\"d-flex justify-content-center\">\n                <div class=\"spinner-grow\" role=\"status\">\n                    <span class=\"sr-only\">\n                        {this.props.t(\"loading\")}\n                    </span>\n                </div>\n            </div>\n        )\n\n        let map = (\n            <div className=\"add-dive-google-container\">\n                <Map\n                    google={this.props.google}\n                    zoom={5}\n                    style={mapStyle}\n                    initialCenter={{ lat: 48.023, lng: 14.426}}\n                    onClick={this.onMapClick}\n                >\n                    { isFinishMarker && this.showMarker() }\n                    { this.showAllMarkers() }\n                    <InfoWindow\n                        marker={this.state.activeMarker}\n                        visible={this.state.showingInfoWindow}\n                        onClose={this.onClose}\n                    >\n                        <div className=\"alert alert-success\" role=\"alert\">\n                            <h4>{this.state.selectedPlace.name}</h4>\n                        </div>\n                    </InfoWindow>\n                </Map>\n                <GoogleLogbookModal \n                    latitude={this.state.latitude}\n                    longitude={this.state.longitude}\n                    updateMarker={this.updateMarker}\n                    setFinishMarker={this.setFinishMarker}\n                    setMarker={this.props.setMarker}\n                    setIsAccessible={this.setIsAccessible}\n                />\n                <GoogleLogbookMarkerModal \n                    name={this.state.existingMarkerName}\n                    latitude={this.state.existingMarkerLatitude}\n                    longitude={this.state.existingMarkerLongitude}\n                    updateMarker={this.updateMarker}\n                    setFinishMarker={this.setFinishMarker}\n                    setMarker={this.props.setMarker}\n                    setIsAccessible={this.setIsAccessible}\n                />\n                <div className=\"add-dive-table\">\n                    <table className=\"table table-striped table-hover\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">\n                                    <b>#</b>\n                                </th>\n                                <th scope=\"col\">\n                                    {this.props.t(\"googleMap.table.name\")}\n                                </th>\n                                <th scope=\"col\">\n                                    {this.props.t(\"googleMap.table.latitude\")}\n                                </th>\n                                <th scope=\"col\">\n                                    {this.props.t(\"googleMap.table.longitude\")}\n                                </th>\n                                <th scope=\"col\">\n                                    {this.props.t(\"googleMap.table.delete\")}\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody ref={(el) => this.tbodyRef = el}>\n                            { isFinishMarker && tableRow }\n                            { isUpdateLogbookRow && updateTableRow }\n                        </tbody>\n                    </table>\n                </div>\n            </div>     \n        )\n        let content = this.state.isLoading ? loadingScreen : map;\n\n        return (\n            <div>\n                { content }\n            </div>\n        );\n    }\n}\n\nexport default compose(\n    GoogleApiWrapper(\n    (props) => ({\n      apiKey: 'AIzaSyBgb4kpatKEjsOGsxplxFyRfw1K_wGhLTo',\n      language: props.language,\n    }\n  )),\n    withTranslation(\"common\")\n  )(GoogleLogbookMap);"]},"metadata":{},"sourceType":"module"}