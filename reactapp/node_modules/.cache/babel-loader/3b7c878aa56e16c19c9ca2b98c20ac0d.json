{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/divelog/react-divelog/src/components/googleMaps/GoogleMap.js\";\nimport React from 'react';\nimport '../../css/GoogleMap.css';\nimport { Map, Marker, GoogleApiWrapper, InfoWindow } from 'google-maps-react';\nimport GoogleModal from './GoogleModal';\nimport $ from 'jquery';\nimport DeleteButton from './DeleteButton';\nimport { withTranslation } from 'react-i18next';\nimport { compose } from 'redux';\n\nclass GoogleMap extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.showMarkers = () => {\n      return this.state.markers.map((marker, index) => {\n        return React.createElement(Marker, {\n          key: index,\n          name: marker.name,\n          position: {\n            lat: marker.latitude,\n            lng: marker.longitude\n          },\n          onClick: this.onMarkerClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        });\n      });\n    };\n\n    this.showTableRows = () => {\n      let i = 0;\n      return this.state.markers.map((marker, index) => {\n        return React.createElement(\"tr\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, React.createElement(\"th\", {\n          scope: \"row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }, React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, ++i)), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, marker.name), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, marker.latitude), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, marker.longitude), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, React.createElement(DeleteButton, {\n          id: marker.id,\n          setIsDeletedMarker: this.setIsDeletedMarker,\n          setDeletedMarkerId: this.setDeletedMarkerId,\n          fetchMarkers: this.fetchMarkers,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        })));\n      });\n    };\n\n    this.onMarkerClick = (props, marker, e) => {\n      this.setState({\n        selectedPlace: props,\n        activeMarker: marker,\n        showingInfoWindow: true\n      });\n    };\n\n    this.onClose = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    };\n\n    this.state = {\n      isLoading: true,\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n      markers: [],\n      isFinishMarker: false,\n      latitude: '',\n      longitude: '',\n      isDeletedMarker: false,\n      deletedMarkerId: 0\n    };\n    this.onMapClick = this.onMapClick.bind(this);\n    this.setFinishMarker = this.setFinishMarker.bind(this);\n    this.setIsDeletedMarker = this.setIsDeletedMarker.bind(this);\n    this.fetchMarkers = this.fetchMarkers.bind(this);\n    this.setDeletedMarkerId = this.setDeletedMarkerId.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      isLoading: false\n    });\n    let jwtToken = localStorage.getItem(\"JwtToken\");\n    fetch(\"/get/markers/\".concat(jwtToken), {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'content-type': 'application/json'\n      }\n    }).then(response => response.json()).then(jsonData => {\n      jsonData.map((marker, index) => {\n        let element = {\n          id: marker.id,\n          name: marker.name,\n          latitude: marker.latitude,\n          longitude: marker.longitude\n        };\n        this.setState({\n          markers: this.state.markers.concat(element)\n        });\n      });\n    });\n  }\n\n  fetchMarkers() {\n    let jwtToken = localStorage.getItem(\"JwtToken\");\n    this.setState({\n      markers: []\n    }, () => {\n      fetch(\"/get/markers/\".concat(jwtToken), {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json, text/plain, */*',\n          'content-type': 'application/json'\n        }\n      }).then(response => response.json()).then(jsonData => {\n        jsonData.map((marker, index) => {\n          let element = {\n            id: marker.id,\n            name: marker.name,\n            latitude: marker.latitude,\n            longitude: marker.longitude\n          };\n          this.setState({\n            markers: this.state.markers.concat(element)\n          });\n        });\n      });\n    });\n  }\n\n  onMapClick(t, map, coord) {\n    const latLng = coord.latLng;\n    const lat = latLng.lat();\n    const lng = latLng.lng();\n    this.setState({\n      latitude: lat,\n      longitude: lng\n    });\n    $(document).on('show.bs.modal', \"#modalCenter\", function (event) {\n      $('#name').trigger('focus');\n    });\n    $(\"#modalCenter\").modal('show');\n  }\n\n  setFinishMarker() {\n    this.setState({\n      isFinishMarker: true\n    });\n  }\n\n  setIsDeletedMarker() {\n    this.setState({\n      isDeletedMarker: true\n    });\n  }\n\n  setDeletedMarkerId(value) {\n    this.setState({\n      deletedMarkerId: value\n    }, () => {\n      let id = this.state.deletedMarkerId;\n      let index = 0;\n      this.state.markers.map((marker, index) => {\n        if (marker.id === id) {\n          this.setState({\n            markers: this.state.markers.splice(index, 1)\n          }, () => {\n            this.forceUpdate();\n          });\n        }\n\n        index++;\n      });\n    });\n  }\n\n  render() {\n    const mapStyle = {\n      width: '100%',\n      height: '100%'\n    };\n    let loadingScreen = React.createElement(\"div\", {\n      className: \"d-flex justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"spinner-grow\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, this.props.t(\"loading\"))));\n    let map = React.createElement(\"div\", {\n      className: \"google-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"story-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, this.props.t(\"googleMap.story\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"google-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"marker-table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"table-responsive\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      className: \"table table-striped table-hover\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      scope: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, \"#\")), React.createElement(\"th\", {\n      scope: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, this.props.t(\"googleMap.table.name\")), React.createElement(\"th\", {\n      scope: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, this.props.t(\"googleMap.table.latitude\")), React.createElement(\"th\", {\n      scope: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, this.props.t(\"googleMap.table.longitude\")), React.createElement(\"th\", {\n      scope: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, this.props.t(\"googleMap.table.delete\")))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, this.showTableRows()))))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, React.createElement(Map, {\n      google: this.props.google,\n      zoom: 5,\n      style: mapStyle,\n      initialCenter: {\n        lat: 48.023,\n        lng: 14.426\n      },\n      onClick: this.onMapClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, this.showMarkers(), React.createElement(InfoWindow, {\n      marker: this.state.activeMarker,\n      visible: this.state.showingInfoWindow,\n      onClose: this.onClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"alert alert-success\",\n      role: \"alert\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, this.state.selectedPlace.name)))), React.createElement(GoogleModal, {\n      latitude: this.state.latitude,\n      longitude: this.state.longitude,\n      setFinishMarker: this.setFinishMarker,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    })));\n    let content = this.state.isLoading ? loadingScreen : map;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, content);\n  }\n\n}\n\nexport default compose(GoogleApiWrapper(props => ({\n  apiKey: 'AIzaSyBgb4kpatKEjsOGsxplxFyRfw1K_wGhLTo',\n  language: props.language\n})), withTranslation(\"common\"))(GoogleMap);","map":{"version":3,"sources":["/home/huber/Pulpit/divelog/react-divelog/src/components/googleMaps/GoogleMap.js"],"names":["React","Map","Marker","GoogleApiWrapper","InfoWindow","GoogleModal","$","DeleteButton","withTranslation","compose","GoogleMap","Component","constructor","props","showMarkers","state","markers","map","marker","index","name","lat","latitude","lng","longitude","onMarkerClick","showTableRows","i","id","setIsDeletedMarker","setDeletedMarkerId","fetchMarkers","e","setState","selectedPlace","activeMarker","showingInfoWindow","onClose","isLoading","isFinishMarker","isDeletedMarker","deletedMarkerId","onMapClick","bind","setFinishMarker","componentDidMount","jwtToken","localStorage","getItem","fetch","method","headers","then","response","json","jsonData","element","concat","t","coord","latLng","document","on","event","trigger","modal","value","splice","forceUpdate","render","mapStyle","width","height","loadingScreen","google","content","apiKey","language"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../css/GoogleMap.css';\nimport { Map, Marker, GoogleApiWrapper, InfoWindow } from 'google-maps-react';\nimport GoogleModal from './GoogleModal';\nimport $ from 'jquery';\nimport DeleteButton from './DeleteButton';\nimport { withTranslation } from 'react-i18next';\nimport { compose } from 'redux';\n\nclass GoogleMap extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isLoading: true,\n            showingInfoWindow: false,\n            activeMarker: {},\n            selectedPlace: {},\n            markers: [],\n            isFinishMarker: false,\n            latitude: '',\n            longitude: '',\n            isDeletedMarker: false,\n            deletedMarkerId: 0\n        }\n        this.onMapClick = this.onMapClick.bind(this);\n        this.setFinishMarker = this.setFinishMarker.bind(this);\n        this.setIsDeletedMarker = this.setIsDeletedMarker.bind(this);\n        this.fetchMarkers = this.fetchMarkers.bind(this);\n        this.setDeletedMarkerId = this.setDeletedMarkerId.bind(this);\n    }\n\n    componentDidMount() {\n        this.setState({ isLoading: false });\n        let jwtToken = localStorage.getItem(\"JwtToken\");\n\n        fetch(`/get/markers/${jwtToken}`, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'content-type': 'application/json'\n            }\n        })\n        .then(response => response.json())\n        .then(jsonData => {\n            jsonData.map((marker, index) => {\n                let element = {\n                    id: marker.id,\n                    name: marker.name,\n                    latitude: marker.latitude,\n                    longitude: marker.longitude\n                }\n                this.setState({\n                    markers: this.state.markers.concat(element)\n                })\n            })\n        }); \n    }\n\n    fetchMarkers() {\n        let jwtToken = localStorage.getItem(\"JwtToken\");\n\n        this.setState({ markers: [] }, () => {\n            fetch(`/get/markers/${jwtToken}`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json, text/plain, */*',\n                    'content-type': 'application/json'\n                }\n            })\n            .then(response => response.json())\n            .then(jsonData => {\n                jsonData.map((marker, index) => {\n                    let element = {\n                        id: marker.id,\n                        name: marker.name,\n                        latitude: marker.latitude,\n                        longitude: marker.longitude\n                    }\n                    this.setState({\n                        markers: this.state.markers.concat(element)\n                    })\n                })\n            }); \n        });\n    }\n\n    showMarkers = () => {\n        return this.state.markers.map((marker, index) => {\n            return (\n                <Marker \n                    key={index} \n                    name={marker.name}\n                    position={{ lat: marker.latitude, lng: marker.longitude }}\n                    onClick={this.onMarkerClick}\n                />\n            );\n        });\n    }\n\n    showTableRows = () => {\n        let i = 0;\n        return this.state.markers.map((marker, index) => {\n            return (\n                <tr key={index}>\n                    <th scope=\"row\">\n                        <b>{++i}</b>\n                    </th>\n                    <td>{marker.name}</td>\n                    <td>{marker.latitude}</td>\n                    <td>{marker.longitude}</td>\n                    <td>\n                        <DeleteButton \n                            id={marker.id}\n                            setIsDeletedMarker={this.setIsDeletedMarker}\n                            setDeletedMarkerId={this.setDeletedMarkerId}\n                            fetchMarkers={this.fetchMarkers}\n                        />\n                    </td>\n                </tr>\n            );\n        })\n    }\n\n    onMarkerClick = (props, marker, e) => {\n        this.setState({\n            selectedPlace: props,\n            activeMarker: marker,\n            showingInfoWindow: true\n        });\n    }\n\n    onClose = props => {\n        if(this.state.showingInfoWindow) {\n            this.setState({\n                showingInfoWindow: false,\n                activeMarker: null\n            });\n        }\n    };\n\n    onMapClick(t, map, coord) {\n        const { latLng } = coord;\n        const lat = latLng.lat();\n        const lng = latLng.lng();\n\n        this.setState({ \n            latitude: lat,\n            longitude: lng\n        });\n\n        $(document).on('show.bs.modal', \"#modalCenter\", function (event) {\n            $('#name').trigger('focus');\n        });\n        $(\"#modalCenter\").modal('show');\n    }\n\n    setFinishMarker() {\n        this.setState({ isFinishMarker: true });\n    }\n\n    setIsDeletedMarker() {\n        this.setState({ isDeletedMarker: true });\n    }\n\n    setDeletedMarkerId(value) {\n        this.setState({ deletedMarkerId: value }, () => {\n            let id = this.state.deletedMarkerId;\n            let index = 0;\n            this.state.markers.map((marker, index) => {\n                if(marker.id === id) {\n                    this.setState({ markers: this.state.markers.splice(index, 1) }, () => {\n                        this.forceUpdate();\n                    });\n                }\n                index++;\n            });\n        });\n    }\n\n    render() {\n        const mapStyle = {\n            width: '100%',\n            height: '100%',\n        }\n\n        let loadingScreen = (\n            <div className=\"d-flex justify-content-center\">\n                <div className=\"spinner-grow\" role=\"status\">\n                    <span className=\"sr-only\">\n                        {this.props.t(\"loading\")}\n                    </span>\n                </div>\n            </div>\n        )\n\n        let map = (\n            <div className=\"google-container\">\n                <div className=\"story-header\"> \n                    {this.props.t(\"googleMap.story\")}\n                </div>\n                <br />\n                <div className=\"google-center\">\n                    <div className=\"marker-table\">\n                        <div className=\"table-responsive\">\n                            <table className=\"table table-striped table-hover\">\n                                <thead>\n                                    <tr>\n                                        <th scope=\"col\">\n                                            <b>#</b>\n                                        </th>\n                                        <th scope=\"col\">\n                                            {this.props.t(\"googleMap.table.name\")}\n                                        </th>\n                                        <th scope=\"col\">\n                                            {this.props.t(\"googleMap.table.latitude\")}\n                                        </th>\n                                        <th scope=\"col\">\n                                            {this.props.t(\"googleMap.table.longitude\")}\n                                        </th>\n                                        <th scope=\"col\">\n                                            {this.props.t(\"googleMap.table.delete\")}\n                                        </th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    { this.showTableRows() }\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n                <div>\n                    <Map\n                        google={this.props.google}\n                        zoom={5}\n                        style={mapStyle}\n                        initialCenter={{ lat: 48.023, lng: 14.426}}\n                        onClick={this.onMapClick}\n                    >\n                        { this.showMarkers() }\n                        <InfoWindow\n                            marker={this.state.activeMarker}\n                            visible={this.state.showingInfoWindow}\n                            onClose={this.onClose}\n                        >\n                        <div className=\"alert alert-success\" role=\"alert\">\n                            <h4>{this.state.selectedPlace.name}</h4>\n                        </div>\n                        </InfoWindow>\n                    </Map>\n                    <GoogleModal \n                        latitude={this.state.latitude}\n                        longitude={this.state.longitude}\n                        setFinishMarker={this.setFinishMarker}\n                    />\n                </div>\n            </div>     \n        )\n        let content = this.state.isLoading ? loadingScreen : map;\n\n        return (\n            <div>\n                { content }\n            </div>\n        );\n    }\n}\n\nexport default compose(\n    GoogleApiWrapper(\n    (props) => ({\n      apiKey: 'AIzaSyBgb4kpatKEjsOGsxplxFyRfw1K_wGhLTo',\n      language: props.language,\n    }\n  )),\n    withTranslation(\"common\")\n  )(GoogleMap);"]},"metadata":{},"sourceType":"module"}