{"ast":null,"code":"var _jsxFileName = \"/home/msi/Pulpit/Divelog/reactapp/src/util/withTwitterAuth.js\";\nimport React from 'react';\nimport AuthService from './AuthService';\nimport { BACKEND_API_URL } from '../actions/types';\nexport default function withTwitterAuth(AuthComponent, props) {\n  const Auth = new AuthService();\n  let customAuthComponent = false;\n\n  class AuthWrapped extends React.Component {\n    constructor() {\n      super();\n      this.state = {\n        isTwitterComponent: true\n      };\n    }\n\n    setRedirectForTwitterExplore(props, url) {\n      if (props.hasOwnProperty(\"twitterExploreForCategories\")) {\n        if (props.twitterExploreForCategories) {\n          this.props.history.replace(url);\n        }\n      }\n\n      if (props.hasOwnProperty(\"twitterExplore\")) {\n        if (props.twitterExplore) {\n          this.props.history.replace(url);\n        }\n      }\n    }\n\n    componentWillMount() {\n      customAuthComponent = true;\n\n      if (this.props.match.path === \"/twitter/likes/:jwtToken\") {\n        if (props !== undefined) {\n          if (this.props.location.pathname === \"/twitter/explore\") {\n            customAuthComponent && this.setRedirectForTwitterExplore(props, \"/twitter/explore\");\n            return;\n          }\n\n          if (this.props.location.pathname === \"/twitter/home\") {\n            customAuthComponent && this.props.history.replace(\"/twitter/home\");\n            return;\n          }\n        }\n\n        fetch(`${BACKEND_API_URL}/twitter/login/validate/token/${this.props.match.params.jwtToken}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }).then(response => {\n          if (response.status === 200) {\n            localStorage.setItem(\"twitterJwtToken\", this.props.match.params.jwtToken);\n\n            try {\n              customAuthComponent && this.props.history.replace(`/twitter/likes/${this.props.match.params.jwtToken}`);\n            } catch (err) {\n              if (this.props.match.params.jwtToken) {\n                Auth.logoutTwitter();\n                this.props.history.replace(\"/login\");\n              }\n            }\n          } else {\n            this.props.history.replace(\"/login\");\n            return;\n          }\n        });\n      } else {\n        this.setState({\n          isTwitterComponent: false\n        });\n      } // let facebookJwtToken = Auth.getToken();\n      // if(facebookJwtToken !== null && facebookJwtToken !== undefined) {\n      //     try {\n      //         customAuthComponent && this.props.history.replace(\"/dashboard\");\n      //     } catch(err) {\n      //         Auth.logout();\n      //         this.props.history.replace(\"/login\");\n      //     }\n      // }\n\n    }\n\n    componentWillUnmount() {\n      customAuthComponent = false;\n    }\n\n    render() {\n      let isTwitterComponent = this.state.isTwitterComponent;\n\n      if (!isTwitterComponent) {\n        return null;\n      }\n\n      if (Auth.loggedIn()) {\n        return customAuthComponent && React.createElement(AuthComponent, {\n          history: this.props.history,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        });\n      } else {\n        return null;\n      }\n    }\n\n  }\n\n  return AuthWrapped;\n}","map":{"version":3,"sources":["/home/msi/Pulpit/Divelog/reactapp/src/util/withTwitterAuth.js"],"names":["React","AuthService","BACKEND_API_URL","withTwitterAuth","AuthComponent","props","Auth","customAuthComponent","AuthWrapped","Component","constructor","state","isTwitterComponent","setRedirectForTwitterExplore","url","hasOwnProperty","twitterExploreForCategories","history","replace","twitterExplore","componentWillMount","match","path","undefined","location","pathname","fetch","params","jwtToken","method","headers","then","response","status","localStorage","setItem","err","logoutTwitter","setState","componentWillUnmount","render","loggedIn"],"mappings":"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","sourcesContent":["import React from 'react';\nimport AuthService from './AuthService';\nimport { BACKEND_API_URL } from '../actions/types';\n\nexport default function withTwitterAuth(AuthComponent, props) {\n    const Auth =  new AuthService();\n    let customAuthComponent = false;\n\n    class AuthWrapped extends React.Component {\n        constructor() {\n            super();\n\n            this.state = {\n                isTwitterComponent: true\n            }\n        }\n\n        setRedirectForTwitterExplore(props, url) {\n            if(props.hasOwnProperty(\"twitterExploreForCategories\")) {\n                if(props.twitterExploreForCategories) {\n                    this.props.history.replace(url);\n                }\n            }\n\n            if(props.hasOwnProperty(\"twitterExplore\")) {\n                if(props.twitterExplore) {\n                    this.props.history.replace(url);\n                }\n            }\n        }\n\n        componentWillMount() {\n            customAuthComponent = true;\n            \n            if(this.props.match.path === \"/twitter/likes/:jwtToken\") {\n                if(props !== undefined) {\n                    if(this.props.location.pathname === \"/twitter/explore\") {\n                        customAuthComponent && this.setRedirectForTwitterExplore(props, \"/twitter/explore\");\n                        return;\n                    }\n                    if(this.props.location.pathname === \"/twitter/home\") {\n                        customAuthComponent && this.props.history.replace(\"/twitter/home\");\n                        return;\n                    }\n                } \n                fetch(`${BACKEND_API_URL}/twitter/login/validate/token/${this.props.match.params.jwtToken}`, {\n                    method: 'GET',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                }).then(response => {\n                    if(response.status === 200) {\n                        localStorage.setItem(\"twitterJwtToken\", this.props.match.params.jwtToken);\n                        try {\n                            customAuthComponent && this.props.history.replace(`/twitter/likes/${this.props.match.params.jwtToken}`);\n                        } catch(err) {\n                            if(this.props.match.params.jwtToken) {\n                                Auth.logoutTwitter();\n                                this.props.history.replace(\"/login\");\n                            }\n                        } \n                    } else {\n                        this.props.history.replace(\"/login\");\n                        return;\n                    }\n                });\n            } else {\n                this.setState({ isTwitterComponent: false });\n            }\n\n            // let facebookJwtToken = Auth.getToken();\n\n            // if(facebookJwtToken !== null && facebookJwtToken !== undefined) {\n            //     try {\n            //         customAuthComponent && this.props.history.replace(\"/dashboard\");\n            //     } catch(err) {\n            //         Auth.logout();\n            //         this.props.history.replace(\"/login\");\n            //     }\n            // }\n        }\n\n        componentWillUnmount() {\n            customAuthComponent = false;\n        }\n\n        render() {\n            let isTwitterComponent = this.state.isTwitterComponent;\n            if(!isTwitterComponent) {\n                return null;\n            }\n            if(Auth.loggedIn()) {\n                return (\n                    customAuthComponent && <AuthComponent history={this.props.history} />\n                );\n            } else {\n                return null;\n            }\n        }\n    }\n    return AuthWrapped;\n}"]},"metadata":{},"sourceType":"module"}