{"ast":null,"code":"var _jsxFileName = \"/home/msi/Pulpit/Divelog/reactapp/src/components/forum/TopicWithPosts.js\";\nimport React from 'react';\nimport '../../css/TopicWithPosts.css';\nimport ConvertTime from '../../util/ConvertTime';\nimport AddPosts from '../forum/AddPosts';\nimport ReactPlayer from 'react-player';\nimport Post from './Post';\nimport Pagination from 'react-js-pagination';\nimport UpdateTopicButton from './UpdateTopicButton';\nimport AuthService from '../../util/AuthService';\nimport { BACKEND_API_URL } from '../../actions/types';\n\nclass TopicWithPosts extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mainPost: {},\n      isRetrieved: false,\n      posts: [],\n      isOwner: false,\n      email: '',\n      isUpdatingPost: false,\n      activePage: 1,\n      itemPerPage: 10,\n      wasUpdatedPost: false\n    };\n    this.Auth = new AuthService();\n    this.files = [];\n    this.ConvertTime = new ConvertTime();\n    this.addImages = this.addImages.bind(this);\n    this.addVideos = this.addVideos.bind(this);\n    this.addPosts = this.addPosts.bind(this);\n    this.fetchTopicAndPosts = this.fetchTopicAndPosts.bind(this);\n    this.handlePageChange = this.handlePageChange.bind(this);\n    this.setDeletedFileForPost = this.setDeletedFileForPost.bind(this);\n  }\n\n  componentDidMount() {\n    let id = this.props.match.params.id;\n    fetch(`${BACKEND_API_URL}/get/topic/posts/${id}`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(jsonData => {\n      this.files = [];\n      jsonData.files.map((file, index) => {\n        const element = {\n          id: file.id,\n          objectId: file.objectId,\n          url: file.url,\n          size: file.size,\n          name: file.name,\n          type: file.type\n        };\n        this.files.push(element);\n      });\n      jsonData.posts.map((post, index) => {\n        let files = [];\n        post.files.map((file, index) => {\n          const element = {\n            id: file.id,\n            objectId: file.objectId,\n            url: file.url,\n            size: file.size,\n            name: file.name,\n            type: file.type\n          };\n          files.push(element);\n        });\n        let updatedAt = '';\n\n        if (post.updatedAt !== null) {\n          this.setState({\n            wasUpdatedPost: true\n          });\n          updatedAt = this.ConvertTime.convertTime(post.updatedAt, null, false);\n        }\n\n        const element = {\n          id: post.id,\n          message: post.message,\n          createdAt: this.ConvertTime.convertTime(post.createdAt, null, false),\n          updatedAt: updatedAt,\n          files: files,\n          user: post.user\n        };\n        this.setState({\n          posts: this.state.posts.concat(element)\n        });\n      });\n      const element = {\n        title: jsonData.title,\n        message: jsonData.message,\n        createdAt: this.ConvertTime.convertTime(jsonData.createdAt, null, false)[0],\n        owner: jsonData.user.name,\n        pictureUrl: jsonData.user.pictureUrl,\n        files: this.files\n      };\n      this.setState({\n        mainPost: element,\n        isRetrieved: true\n      }, () => {\n        let jwtToken = this.Auth.getRightSocialToken();\n        fetch(`/getuserdata/${jwtToken}`, {\n          method: 'GET',\n          headers: {\n            'content-type': 'application/json'\n          }\n        }).then(response => {\n          return response.json();\n        }).then(jsonData => {\n          this.setState({\n            email: jsonData.email\n          }, () => {\n            this.state.posts.map((post, index) => {\n              if (post.user.email === this.state.email) {\n                this.setState({\n                  isOwner: true\n                });\n              }\n            });\n          });\n        });\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  fetchTopicAndPosts() {\n    let id = this.props.match.params.id;\n    this.setState({\n      mainPost: {},\n      posts: [],\n      isRetrieved: false,\n      isOwner: false,\n      email: ''\n    }, () => {\n      fetch(`/get/topic/posts/${id}`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      }).then(response => response.json()).then(jsonData => {\n        this.files = [];\n        jsonData.files.map((file, index) => {\n          const element = {\n            id: file.id,\n            objectId: file.objectId,\n            url: file.url,\n            size: file.size,\n            name: file.name,\n            type: file.type\n          };\n          this.files.push(element);\n        });\n        jsonData.posts.map((post, index) => {\n          let files = [];\n          post.files.map((file, index) => {\n            const element = {\n              id: file.id,\n              objectId: file.objectId,\n              url: file.url,\n              size: file.size,\n              name: file.name,\n              type: file.type\n            };\n            files.push(element);\n          });\n          let updatedAt = '';\n\n          if (post.updatedAt !== null) {\n            this.setState({\n              wasUpdatedPost: true\n            });\n            updatedAt = this.ConvertTime.convertTime(post.updatedAt, null, false);\n          }\n\n          const element = {\n            id: post.id,\n            message: post.message,\n            createdAt: this.ConvertTime.convertTime(post.createdAt, null, false),\n            updatedAt: updatedAt,\n            files: files,\n            user: post.user\n          };\n          this.setState({\n            posts: this.state.posts.concat(element)\n          });\n        });\n        const element = {\n          title: jsonData.title,\n          message: jsonData.message,\n          createdAt: this.ConvertTime.convertTime(jsonData.createdAt, null, false)[0],\n          owner: jsonData.user.name,\n          pictureUrl: jsonData.user.pictureUrl,\n          files: this.files\n        };\n        this.setState({\n          mainPost: element,\n          isRetrieved: true\n        }, () => {\n          let jwtToken = this.Auth.getRightSocialToken();\n          fetch(`${BACKEND_API_URL}/getuserdata/${jwtToken}`, {\n            method: 'GET',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json'\n            }\n          }).then(response => {\n            return response.json();\n          }).then(jsonData => {\n            this.setState({\n              email: jsonData.email\n            }, () => {\n              this.state.posts.map((post, index) => {\n                if (post.user.email === this.state.email) {\n                  this.setState({\n                    isOwner: true\n                  });\n                }\n              });\n            });\n          });\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    });\n  }\n\n  addImages() {\n    return this.state.mainPost.files.map((file, index) => {\n      if (file.type.includes('image')) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 238\n          },\n          __self: this\n        }, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 239\n          },\n          __self: this\n        }), React.createElement(\"img\", {\n          src: file.url,\n          alt: file.name,\n          className: \"attachment-images\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 240\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 245\n          },\n          __self: this\n        }), file.name, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 247\n          },\n          __self: this\n        }));\n      }\n    });\n  }\n\n  addVideos() {\n    return this.state.mainPost.files.map((file, index) => {\n      if (file.type.includes('video')) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 258\n          },\n          __self: this\n        }, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 259\n          },\n          __self: this\n        }), React.createElement(ReactPlayer, {\n          url: file.url,\n          playing: true,\n          controls: \"true\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 260\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 265\n          },\n          __self: this\n        }), file.name, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 267\n          },\n          __self: this\n        }));\n      }\n    });\n  }\n\n  addPosts() {\n    var lastIndex = this.state.activePage * this.state.itemPerPage;\n    var firstIndex = lastIndex - this.state.itemPerPage;\n    let count = 0;\n    return this.state.posts.slice(firstIndex, lastIndex).map((post, index) => {\n      return React.createElement(Post, {\n        key: index,\n        id: post.id,\n        counter: count++,\n        message: post.message,\n        createdAt: post.createdAt,\n        updatedAt: post.updatedAt,\n        files: post.files,\n        user: post.user,\n        fetchTopicAndPosts: this.fetchTopicAndPosts,\n        setDeletedFileForPost: this.setDeletedFileForPost,\n        wasUpdatedPost: this.state.wasUpdatedPost,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      });\n    });\n  }\n\n  setDeletedFileForPost(postId, fileId) {\n    this.state.posts.map((post, index) => {\n      if (post.id === postId) {\n        post.files.map((file, index) => {\n          if (file.id === fileId) {\n            this.setState({\n              files: this.state.posts.files.splice(index, 1)\n            });\n          }\n        });\n      }\n    });\n  }\n\n  handlePageChange(pageNumber) {\n    this.setState({\n      activePage: pageNumber\n    });\n  }\n\n  render() {\n    let isRetrieved = this.state.isRetrieved;\n    let isOwner = this.state.isOwner;\n    return React.createElement(\"div\", {\n      className: \"topic-posts-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"main-post-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"main-post-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"main-post-grid-one\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"main-post-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, this.state.mainPost.createdAt), React.createElement(\"div\", {\n      className: \"main-post-avatar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.state.mainPost.pictureUrl,\n      alt: \"Avatar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"main-post-footer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, this.state.mainPost.owner)), React.createElement(\"div\", {\n      className: \"main-post-grid-two\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"main-post-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }, this.state.mainPost.title), React.createElement(\"div\", {\n      className: \"main-post-message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, this.state.mainPost.message), React.createElement(\"div\", {\n      className: \"main-post-attachments\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, isRetrieved && this.addImages(), isRetrieved && this.addVideos()), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }, isOwner && React.createElement(React.Fragment, null, React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }), React.createElement(UpdateTopicButton, {\n      topicId: this.props.match.params.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    })))))), React.createElement(\"div\", {\n      className: \"line-break-posts\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, isRetrieved && this.addPosts(), React.createElement(\"div\", {\n      className: \"pagination-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }, React.createElement(Pagination, {\n      hideNavigation: true,\n      activePage: this.state.activePage,\n      itemsCountPerPage: this.state.itemPerPage,\n      totalItemsCount: this.state.posts.length,\n      pageRangeDisplayed: 5,\n      onChange: this.handlePageChange,\n      itemClass: \"page-item\",\n      linkClass: \"page-link\",\n      activeClass: \"page-active\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, React.createElement(AddPosts, {\n      topicId: this.props.match.params.id,\n      fetchTopicAndPosts: this.fetchTopicAndPosts,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default TopicWithPosts;","map":{"version":3,"sources":["/home/msi/Pulpit/Divelog/reactapp/src/components/forum/TopicWithPosts.js"],"names":["React","ConvertTime","AddPosts","ReactPlayer","Post","Pagination","UpdateTopicButton","AuthService","BACKEND_API_URL","TopicWithPosts","Component","constructor","props","state","mainPost","isRetrieved","posts","isOwner","email","isUpdatingPost","activePage","itemPerPage","wasUpdatedPost","Auth","files","addImages","bind","addVideos","addPosts","fetchTopicAndPosts","handlePageChange","setDeletedFileForPost","componentDidMount","id","match","params","fetch","method","headers","then","response","json","jsonData","map","file","index","element","objectId","url","size","name","type","push","post","updatedAt","setState","convertTime","message","createdAt","user","concat","title","owner","pictureUrl","jwtToken","getRightSocialToken","catch","err","console","log","includes","lastIndex","firstIndex","count","slice","postId","fileId","splice","pageNumber","render","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../css/TopicWithPosts.css';\nimport ConvertTime from '../../util/ConvertTime';\nimport AddPosts from '../forum/AddPosts';\nimport ReactPlayer from 'react-player';\nimport Post from './Post';\nimport Pagination from 'react-js-pagination';\nimport UpdateTopicButton from './UpdateTopicButton';\nimport AuthService from '../../util/AuthService';\nimport { BACKEND_API_URL } from '../../actions/types';\n\nclass TopicWithPosts extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            mainPost: {},\n            isRetrieved: false,\n            posts: [],\n            isOwner: false,\n            email: '',\n            isUpdatingPost: false,\n            activePage: 1,\n            itemPerPage: 10,\n            wasUpdatedPost: false\n        }\n        this.Auth = new AuthService();\n        this.files = []\n        this.ConvertTime = new ConvertTime();\n\n        this.addImages = this.addImages.bind(this);\n        this.addVideos = this.addVideos.bind(this);\n        this.addPosts = this.addPosts.bind(this);\n        this.fetchTopicAndPosts = this.fetchTopicAndPosts.bind(this);\n        this.handlePageChange = this.handlePageChange.bind(this);\n        this.setDeletedFileForPost = this.setDeletedFileForPost.bind(this);\n    }\n\n    componentDidMount() {\n        let id = this.props.match.params.id;\n\n        fetch(`${BACKEND_API_URL}/get/topic/posts/${id}`, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }\n        }).then(response => response.json())\n        .then(jsonData => {\n            this.files = [];\n\n            jsonData.files.map((file, index) => {\n                const element = {\n                    id: file.id,\n                    objectId: file.objectId,\n                    url: file.url,\n                    size: file.size,\n                    name: file.name,\n                    type: file.type\n                }\n                this.files.push(element);\n            });\n\n            jsonData.posts.map((post, index) => {\n                let files = [];\n                post.files.map((file, index) => {\n                    const element = {\n                        id: file.id,\n                        objectId: file.objectId,\n                        url: file.url,\n                        size: file.size,\n                        name: file.name,\n                        type: file.type\n                    }\n                    files.push(element);\n                });\n\n                let updatedAt = '';\n\n                if(post.updatedAt !== null) {\n                    this.setState({ wasUpdatedPost: true });\n                    updatedAt = this.ConvertTime.convertTime(post.updatedAt, null, false);\n                }\n\n                const element = {\n                    id: post.id,\n                    message: post.message,\n                    createdAt: this.ConvertTime.convertTime(post.createdAt, null, false),\n                    updatedAt: updatedAt,\n                    files: files,\n                    user: post.user\n                }\n                this.setState({ posts: this.state.posts.concat(element) });\n            });\n\n            const element = {\n                title: jsonData.title,\n                message: jsonData.message,\n                createdAt: this.ConvertTime.convertTime(jsonData.createdAt, null, false)[0],\n                owner: jsonData.user.name,\n                pictureUrl: jsonData.user.pictureUrl,\n                files: this.files\n            }\n            this.setState({ \n                mainPost: element, \n                isRetrieved: true\n            }, () => {\n                let jwtToken = this.Auth.getRightSocialToken();\n\n                fetch(`/getuserdata/${jwtToken}`, {\n                    method: 'GET',\n                    headers: {\n                    'content-type': 'application/json'\n                    }\n                })\n                .then(response => { return response.json() })\n                .then(jsonData => {\n                    this.setState({ email: jsonData.email }, () => {\n                        this.state.posts.map((post, index) => {\n                            if(post.user.email === this.state.email) {\n                                this.setState({ isOwner: true });\n                            }\n                        });     \n                    });\n                }); \n            });\n        }).catch(err => {\n            console.log(err);\n        });\n    }\n\n    fetchTopicAndPosts() {\n        let id = this.props.match.params.id;\n\n        this.setState({\n            mainPost: {},\n            posts: [],\n            isRetrieved: false,\n            isOwner: false,\n            email: ''\n        }, () => {\n            fetch(`/get/topic/posts/${id}`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                }\n            }).then(response => response.json())\n            .then(jsonData => {\n                this.files = [];\n    \n                jsonData.files.map((file, index) => {\n                    const element = {\n                        id: file.id,\n                        objectId: file.objectId,\n                        url: file.url,\n                        size: file.size,\n                        name: file.name,\n                        type: file.type\n                    }\n                    this.files.push(element);\n                });\n    \n                jsonData.posts.map((post, index) => {\n                    let files = [];\n                    post.files.map((file, index) => {\n                        const element = {\n                            id: file.id,\n                            objectId: file.objectId,\n                            url: file.url,\n                            size: file.size,\n                            name: file.name,\n                            type: file.type\n                        }\n                        files.push(element);\n                    });\n\n                    let updatedAt = '';\n\n                    if(post.updatedAt !== null) {\n                        this.setState({ wasUpdatedPost: true });\n                        updatedAt = this.ConvertTime.convertTime(post.updatedAt, null, false);\n                    }\n    \n                    const element = {\n                        id: post.id,\n                        message: post.message,\n                        createdAt: this.ConvertTime.convertTime(post.createdAt, null, false),\n                        updatedAt: updatedAt,\n                        files: files,\n                        user: post.user\n                    }\n                    this.setState({ posts: this.state.posts.concat(element) });\n                });\n    \n                const element = {\n                    title: jsonData.title,\n                    message: jsonData.message,\n                    createdAt: this.ConvertTime.convertTime(jsonData.createdAt, null, false)[0],\n                    owner: jsonData.user.name,\n                    pictureUrl: jsonData.user.pictureUrl,\n                    files: this.files\n                }\n                this.setState({ \n                    mainPost: element, \n                    isRetrieved: true\n                }, () => {\n                    let jwtToken = this.Auth.getRightSocialToken();\n    \n                    fetch(`${BACKEND_API_URL}/getuserdata/${jwtToken}`, {\n                        method: 'GET',\n                        headers: {\n                            'Accept': 'application/json',\n                            'Content-Type': 'application/json'\n                        }\n                    })\n                    .then(response => { return response.json() })\n                    .then(jsonData => {\n                        this.setState({ email: jsonData.email }, () => {\n                            this.state.posts.map((post, index) => {\n                                if(post.user.email === this.state.email) {\n                                    this.setState({ isOwner: true });\n                                }\n                            });      \n                        });\n                    }); \n                });\n            }).catch(err => {\n                console.log(err);\n            });\n        });\n    }\n\n    addImages() {\n        return this.state.mainPost.files.map((file, index) => {\n            if(file.type.includes('image')) {\n                return (\n                    <div>\n                        <br />\n                        <img \n                            src={file.url} \n                            alt={file.name} \n                            className=\"attachment-images\"\n                        />\n                        <br />\n                        { file.name }\n                        <br />\n                    </div>\n                );\n            }\n        });\n    }\n\n    addVideos() {\n        return this.state.mainPost.files.map((file, index) => {\n            if(file.type.includes('video')) {\n                return (\n                    <div>\n                        <br />\n                        <ReactPlayer \n                            url={file.url} \n                            playing\n                            controls=\"true\"\n                        />\n                        <br />\n                        { file.name }\n                        <br />\n                    </div>\n                );\n            }\n        })\n    }\n\n    addPosts() {\n        var lastIndex = this.state.activePage * this.state.itemPerPage;\n        var firstIndex = lastIndex - this.state.itemPerPage;\n\n        let count = 0;\n        return this.state.posts.slice(firstIndex, lastIndex).map((post, index) => {\n            return (\n                <Post \n                    key={index}\n                    id={post.id}\n                    counter={count++}\n                    message={post.message}\n                    createdAt={post.createdAt}\n                    updatedAt={post.updatedAt}\n                    files={post.files}\n                    user={post.user}\n                    fetchTopicAndPosts={this.fetchTopicAndPosts}\n                    setDeletedFileForPost={this.setDeletedFileForPost}\n                    wasUpdatedPost={this.state.wasUpdatedPost}\n                />\n            );\n        });\n    }\n\n    setDeletedFileForPost(postId, fileId) {\n        this.state.posts.map((post, index) => {\n            if(post.id === postId) {\n                post.files.map((file, index) => {\n                    if(file.id === fileId) {\n                        this.setState({ files: this.state.posts.files.splice(index, 1) });\n                    }\n                });\n            }\n        });\n    }\n\n    handlePageChange(pageNumber) {\n        this.setState({ activePage: pageNumber });\n    }\n\n    render() {\n        let isRetrieved = this.state.isRetrieved;\n        let isOwner = this.state.isOwner;\n\n        return (\n            <div className=\"topic-posts-container\">\n                <div className=\"main-post-center\">\n                    <div className=\"main-post-container\">\n                        <div className=\"main-post-grid-one\">\n                            <div className=\"main-post-header\">\n                                { this.state.mainPost.createdAt }\n                            </div>\n                            <div className=\"main-post-avatar\">\n                                <img src={this.state.mainPost.pictureUrl} alt=\"Avatar\" />\n                            </div>\n                            <div className=\"main-post-footer\">\n                                { this.state.mainPost.owner }\n                            </div>\n                        </div>\n                        <div className=\"main-post-grid-two\">\n                            <div className=\"main-post-title\">\n                                { this.state.mainPost.title }\n                            </div>\n                            <div className=\"main-post-message\">\n                                { this.state.mainPost.message }\n                            </div>\n                            <div className=\"main-post-attachments\">\n                                { isRetrieved && this.addImages() }\n                                { isRetrieved && this.addVideos() }\n                            </div>\n\n                            <div>\n                                { isOwner &&\n                                    <>\n                                        <hr />\n                                        <UpdateTopicButton \n                                            topicId={this.props.match.params.id}\n                                        />\n                                    </>\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                \n                <div className=\"line-break-posts\"></div>\n\n                <div>\n                    { isRetrieved && this.addPosts() }\n                    <div className=\"pagination-center\">\n                        <Pagination\n                            hideNavigation\n                            activePage={this.state.activePage}\n                            itemsCountPerPage={this.state.itemPerPage}\n                            totalItemsCount={this.state.posts.length}\n                            pageRangeDisplayed={5}\n                            onChange={this.handlePageChange}\n                            itemClass=\"page-item\"\n                            linkClass=\"page-link\"\n                            activeClass=\"page-active\"\n                        />\n                    </div>\n                </div>\n\n                <div className=\"\">\n                    <AddPosts \n                        topicId={this.props.match.params.id}\n                        fetchTopicAndPosts={this.fetchTopicAndPosts}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TopicWithPosts;"]},"metadata":{},"sourceType":"module"}