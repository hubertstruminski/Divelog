{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/Divelog/reactapp/src/components/Twitter.js\";\nimport React from 'react';\nimport '../css/TimelineLikes.css';\nimport withTwitterAuth from '../util/withTwitterAuth';\nimport AuthService from '../util/AuthService';\nimport TwitterCategoriesCard from './twitter/TwitterCategoriesCard';\nimport SearchTwitterPeople from './twitter/SearchTwitterPeople';\nimport AvailableTrends from './twitter/AvailableTrends';\nimport TwitterFriendsList from './twitter/TwitterFriendsList';\nimport $ from 'jquery';\n\nclass Twitter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.isMountedTwitter = false;\n    this.state = {\n      accessToken: '',\n      email: '',\n      name: '',\n      userID: '',\n      pictureUrl: '',\n      providerId: '',\n      screenName: '',\n      tokenSecret: ''\n    };\n    this.Auth = new AuthService();\n    this.receiveMessage = this.receiveMessage.bind(this);\n  }\n\n  receiveMessage(e) {\n    if (e.origin !== \"http://localhost:3000\") {\n      return;\n    } else {\n      if (e.data === null || e.data === undefined) {\n        this.setState({\n          isFalseJwtToken: true\n        });\n      } else {\n        localStorage.setItem(\"twitterJwtToken\", e.data);\n        this.setState({\n          twitterJwtToken: e.data\n        });\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.isMountedTwitter = true;\n    let jwtToken = this.Auth.getRightSocialToken(); // window.addEventListener(\"message\", this.receiveMessage());\n\n    this.isMountedTwitter && window.twttr.widgets.load(document.getElementsByClassName(\"feed-container\")[0]);\n    fetch(\"/getuserdata/\".concat(jwtToken), {\n      method: 'GET',\n      headers: {\n        'content-type': 'application/json'\n      }\n    }).then(response => response.json()).then(jsonData => {\n      if (this.isMountedTwitter) {\n        $(\".tweets-likes-container\").html(\"\");\n        this.setState({\n          accessToken: jsonData.accessToken,\n          email: jsonData.email,\n          name: jsonData.name,\n          twitterUserID: jsonData.twitterUserID,\n          pictureUrl: jsonData.pictureUrl,\n          providerId: jsonData.providerId,\n          screenName: jsonData.screenName,\n          tokenSecret: jsonData.tokenSecret\n        }, () => {\n          window.twttr.widgets.createTimeline({\n            sourceType: 'likes',\n            screenName: this.state.screenName\n          }, document.getElementsByClassName(\"tweets-likes-container\")[0], {\n            width: '100%',\n            height: '100%',\n            related: 'twitterdev,twitterapi'\n          });\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.isMountedTwitter = false;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"twitter-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"iframe\", {\n      id: \"receiver\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"twitter-grid-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-grid-item-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-left-categories-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-profil-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, this.state.name), React.createElement(TwitterCategoriesCard, {\n      pictureUrl: this.state.pictureUrl,\n      screenName: this.state.screenName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"feed-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"tweets-likes-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"twitter-grid-item-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-rl-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-groups-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(SearchTwitterPeople, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), React.createElement(AvailableTrends, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"twitter-rr-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-friends-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default withTwitterAuth(Twitter);","map":{"version":3,"sources":["/home/huber/Pulpit/Divelog/reactapp/src/components/Twitter.js"],"names":["React","withTwitterAuth","AuthService","TwitterCategoriesCard","SearchTwitterPeople","AvailableTrends","TwitterFriendsList","$","Twitter","Component","constructor","props","isMountedTwitter","state","accessToken","email","name","userID","pictureUrl","providerId","screenName","tokenSecret","Auth","receiveMessage","bind","e","origin","data","undefined","setState","isFalseJwtToken","localStorage","setItem","twitterJwtToken","componentDidMount","jwtToken","getRightSocialToken","window","twttr","widgets","load","document","getElementsByClassName","fetch","method","headers","then","response","json","jsonData","html","twitterUserID","createTimeline","sourceType","width","height","related","componentWillUnmount","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../css/TimelineLikes.css';\nimport withTwitterAuth from '../util/withTwitterAuth';\nimport AuthService from '../util/AuthService';\nimport TwitterCategoriesCard from './twitter/TwitterCategoriesCard';\nimport SearchTwitterPeople from './twitter/SearchTwitterPeople';\nimport AvailableTrends from './twitter/AvailableTrends';\nimport TwitterFriendsList from './twitter/TwitterFriendsList';\nimport $ from 'jquery';\n\nclass Twitter extends React.Component {\n    isMountedTwitter = false;\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            accessToken: '',\n            email: '',\n            name: '',\n            userID: '',\n            pictureUrl: '',\n            providerId: '',\n            screenName: '',\n            tokenSecret: ''\n        }\n        this.Auth = new AuthService();\n        this.receiveMessage = this.receiveMessage.bind(this);\n    }\n\n    receiveMessage(e) {\n        if(e.origin !== \"http://localhost:3000\") {\n            return;\n        } else {\n            if(e.data === null || e.data === undefined) {\n                this.setState({ isFalseJwtToken: true });\n            } else {\n                localStorage.setItem(\"twitterJwtToken\", e.data);\n                this.setState({ twitterJwtToken: e.data });\n            }\n        }\n    }\n\n    componentDidMount() {\n        this.isMountedTwitter = true;\n        let jwtToken = this.Auth.getRightSocialToken();\n        // window.addEventListener(\"message\", this.receiveMessage());\n        this.isMountedTwitter && window.twttr.widgets.load(document.getElementsByClassName(\"feed-container\")[0]);\n\n        fetch(`/getuserdata/${jwtToken}`, {\n            method: 'GET',\n            headers: {\n            'content-type': 'application/json'\n            }\n        })\n        .then(response => response.json())\n        .then(jsonData => {\n            if(this.isMountedTwitter) {\n                $(\".tweets-likes-container\").html(\"\");\n                this.setState({\n                    accessToken: jsonData.accessToken,\n                    email: jsonData.email,\n                    name: jsonData.name,\n                    twitterUserID: jsonData.twitterUserID,\n                    pictureUrl: jsonData.pictureUrl,\n                    providerId: jsonData.providerId,\n                    screenName: jsonData.screenName,\n                    tokenSecret: jsonData.tokenSecret\n                }, () => {\n                    window.twttr.widgets.createTimeline(\n                    {\n                        sourceType: 'likes',\n                        screenName: this.state.screenName\n                    },\n                    document.getElementsByClassName(\"tweets-likes-container\")[0],\n                    {\n                        width: '100%',\n                        height: '100%',\n                        related: 'twitterdev,twitterapi'\n                    });\n                });\n            }\n        }); \n    }\n\n    componentWillUnmount() {\n        this.isMountedTwitter = false;\n    }\n\n    render() {\n        return (\n            <div className=\"twitter-container\">\n                <iframe id=\"receiver\"></iframe>\n                <div className=\"twitter-grid-container\">\n                    <div className=\"twitter-grid-item-1\">\n                        <div className=\"twitter-left-categories-container\">\n                            <div className=\"twitter-profil-container\">\n                                { this.state.name }\n                            </div>\n                            <TwitterCategoriesCard\n                                pictureUrl={this.state.pictureUrl}\n                                screenName={this.state.screenName}\n                            />    \n                        </div>\n                    </div>\n                    <div className=\"feed-container\">\n                        <div className=\"tweets-likes-container\">\n\n                        </div>\n                    </div>\n                    <div className=\"twitter-grid-item-3\">\n                        <div className=\"twitter-rl-container\">\n                            <div className=\"twitter-groups-container\">\n                                <SearchTwitterPeople />\n                                <AvailableTrends />\n                            </div>\n                        </div>\n                        <div className=\"twitter-rr-container\">\n                            <div className=\"twitter-friends-container\">\n                                {/* <TwitterFriendsList /> */}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withTwitterAuth(Twitter);"]},"metadata":{},"sourceType":"module"}