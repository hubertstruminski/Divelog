{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/divelog/react-divelog/src/util/withAuth.js\";\nimport React from 'react';\nimport AuthService from './AuthService';\nexport default function withAuth(AuthComponent) {\n  const Auth = new AuthService();\n  let customAuthComponent = false;\n\n  class AuthWrapped extends React.Component {\n    componentWillMount() {\n      customAuthComponent = true;\n\n      if (!Auth.loggedIn()) {\n        this.props.history.replace(\"/login\");\n      } else {\n        let twitterJwtToken = Auth.getTwitterToken();\n        let facebookJwtToken = Auth.getToken();\n\n        try {\n          if (twitterJwtToken) {\n            customAuthComponent && this.props.history.replace(\"/twitter\");\n          }\n\n          if (facebookJwtToken) {\n            customAuthComponent && this.props.history.replace(\"/dashboard\");\n          }\n        } catch (err) {\n          if (twitterJwtToken) {\n            Auth.logoutTwitter();\n          }\n\n          if (facebookJwtToken) {\n            Auth.logout();\n          }\n\n          this.props.history.replace(\"/login\");\n        }\n      }\n    }\n\n    render() {\n      if (Auth.loggedIn()) {\n        return customAuthComponent && React.createElement(AuthComponent, {\n          history: this.props.history,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        });\n      } else {\n        return null;\n      }\n    }\n\n  }\n\n  return AuthWrapped;\n}","map":{"version":3,"sources":["/home/huber/Pulpit/divelog/react-divelog/src/util/withAuth.js"],"names":["React","AuthService","withAuth","AuthComponent","Auth","customAuthComponent","AuthWrapped","Component","componentWillMount","loggedIn","props","history","replace","twitterJwtToken","getTwitterToken","facebookJwtToken","getToken","err","logoutTwitter","logout","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,eAAe,SAASC,QAAT,CAAkBC,aAAlB,EAAiC;AAC5C,QAAMC,IAAI,GAAI,IAAIH,WAAJ,EAAd;AACA,MAAII,mBAAmB,GAAG,KAA1B;;AAEA,QAAMC,WAAN,SAA0BN,KAAK,CAACO,SAAhC,CAA0C;AACtCC,IAAAA,kBAAkB,GAAG;AACjBH,MAAAA,mBAAmB,GAAG,IAAtB;;AAEA,UAAG,CAACD,IAAI,CAACK,QAAL,EAAJ,EAAqB;AACjB,aAAKC,KAAL,CAAWC,OAAX,CAAmBC,OAAnB,CAA2B,QAA3B;AACH,OAFD,MAEO;AACH,YAAIC,eAAe,GAAGT,IAAI,CAACU,eAAL,EAAtB;AACA,YAAIC,gBAAgB,GAAGX,IAAI,CAACY,QAAL,EAAvB;;AACA,YAAI;AACA,cAAGH,eAAH,EAAoB;AAChBR,YAAAA,mBAAmB,IAAI,KAAKK,KAAL,CAAWC,OAAX,CAAmBC,OAAnB,CAA2B,UAA3B,CAAvB;AACH;;AACD,cAAGG,gBAAH,EAAqB;AACjBV,YAAAA,mBAAmB,IAAI,KAAKK,KAAL,CAAWC,OAAX,CAAmBC,OAAnB,CAA2B,YAA3B,CAAvB;AACH;AACJ,SAPD,CAOE,OAAMK,GAAN,EAAW;AACT,cAAGJ,eAAH,EAAoB;AAChBT,YAAAA,IAAI,CAACc,aAAL;AACH;;AACD,cAAGH,gBAAH,EAAqB;AACjBX,YAAAA,IAAI,CAACe,MAAL;AACH;;AACD,eAAKT,KAAL,CAAWC,OAAX,CAAmBC,OAAnB,CAA2B,QAA3B;AACH;AACJ;AACJ;;AAEDQ,IAAAA,MAAM,GAAG;AACL,UAAGhB,IAAI,CAACK,QAAL,EAAH,EAAoB;AAChB,eACIJ,mBAAmB,IAAI,oBAAC,aAAD;AAAe,UAAA,OAAO,EAAE,KAAKK,KAAL,CAAWC,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAD3B;AAGH,OAJD,MAIO;AACH,eAAO,IAAP;AACH;AACJ;;AApCqC;;AAsC1C,SAAOL,WAAP;AACH","sourcesContent":["import React from 'react';\nimport AuthService from './AuthService';\n\nexport default function withAuth(AuthComponent) {\n    const Auth =  new AuthService();\n    let customAuthComponent = false;\n\n    class AuthWrapped extends React.Component {\n        componentWillMount() {\n            customAuthComponent = true;\n\n            if(!Auth.loggedIn()) {\n                this.props.history.replace(\"/login\");\n            } else {\n                let twitterJwtToken = Auth.getTwitterToken();\n                let facebookJwtToken = Auth.getToken();\n                try {\n                    if(twitterJwtToken) {\n                        customAuthComponent && this.props.history.replace(\"/twitter\");\n                    }\n                    if(facebookJwtToken) {\n                        customAuthComponent && this.props.history.replace(\"/dashboard\");\n                    }\n                } catch(err) {\n                    if(twitterJwtToken) {\n                        Auth.logoutTwitter();\n                    }\n                    if(facebookJwtToken) {\n                        Auth.logout();\n                    }\n                    this.props.history.replace(\"/login\");\n                }\n            }\n        }\n\n        render() {\n            if(Auth.loggedIn()) {\n                return (\n                    customAuthComponent && <AuthComponent history={this.props.history} />\n                );\n            } else {\n                return null;\n            }\n        }\n    }\n    return AuthWrapped;\n}"]},"metadata":{},"sourceType":"module"}