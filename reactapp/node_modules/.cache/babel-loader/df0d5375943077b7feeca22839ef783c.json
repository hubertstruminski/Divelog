{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/divelog/react-divelog/src/components/logbook/PDFTableButton.js\";\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport jsPDF from 'jspdf';\nimport divelogLogo from '../../img/logo.png';\n\nclass PDFTableButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      partnerName: '',\n      partnerSurname: '',\n      marker: {},\n      entryTime: '',\n      exitTime: '',\n      averageDepth: 0.0,\n      maxDepth: 0.0,\n      visibility: 0.0,\n      waterTemperature: 0.0,\n      airTemperature: 0.0,\n      cylinderCapacity: '',\n      divingSuit: 'NONE',\n      waterType: 'NONE',\n      waterEntryType: 'NONE',\n      ballast: 0.0,\n      glovesType: 'NONE',\n      divingType: 'NONE',\n      comment: ''\n    };\n    this.onClick = this.onClick.bind(this);\n  }\n\n  componentDidMount() {\n    const id = this.props.id;\n    let jwtToken = localStorage.getItem(\"JwtToken\");\n    fetch(\"/pdf/logbook/\".concat(id, \"/\").concat(jwtToken), {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'content-type': 'application/json'\n      }\n    }).then(response => response.json()).then(jsonData => {\n      let time = this.ConvertTime.convertTime(jsonData.entryTime, jsonData.exitTime, true);\n      const markerElement = {\n        id: jsonData.marker.id,\n        name: jsonData.marker.name,\n        latitude: jsonData.marker.latitude,\n        longitude: jsonData.marker.longitude\n      };\n      this.setState({\n        partnerName: jsonData.partnerName,\n        partnerSurname: jsonData.partnerSurname,\n        marker: markerElement,\n        entryTime: time[0],\n        exitTime: time[1],\n        averageDepth: jsonData.averageDepth,\n        maxDepth: jsonData.maxDepth,\n        visibility: jsonData.visibility,\n        waterTemperature: jsonData.waterTemperature,\n        airTemperature: jsonData.airTemperature,\n        cylinderCapacity: jsonData.cylinderCapacity,\n        divingSuit: jsonData.divingSuit,\n        waterType: jsonData.waterType,\n        waterEntryType: jsonData.waterEntryType,\n        ballast: jsonData.ballast,\n        glovesType: jsonData.glovesType,\n        divingType: jsonData.divingType,\n        comment: jsonData.comment\n      });\n    });\n  }\n\n  renderDataForHTML() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: divelogLogo,\n      alt: \"Divelog logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }));\n  }\n\n  onClick(e) {\n    e.preventDefault();\n    let doc = new jsPDF({\n      orientation: \"p\",\n      unit: \"mm\"\n    });\n    doc.text(\"Imi\\u0119 partnera:  \".concat(this.state.partnerName), 10, 10);\n    doc.text(\"Nazwisko partnera: \".concat(this.state.partnerSurname), 10, 10);\n    doc.addImage(divelogLogo, 'PNG', 15, 40, 100, 100);\n    doc.save(\"pdf\");\n  }\n\n  render() {\n    return React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: this.onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"PDF\");\n  }\n\n}\n\nexport default withTranslation(\"common\")(PDFTableButton);","map":{"version":3,"sources":["/home/huber/Pulpit/divelog/react-divelog/src/components/logbook/PDFTableButton.js"],"names":["React","withTranslation","jsPDF","divelogLogo","PDFTableButton","Component","constructor","props","state","partnerName","partnerSurname","marker","entryTime","exitTime","averageDepth","maxDepth","visibility","waterTemperature","airTemperature","cylinderCapacity","divingSuit","waterType","waterEntryType","ballast","glovesType","divingType","comment","onClick","bind","componentDidMount","id","jwtToken","localStorage","getItem","fetch","method","headers","then","response","json","jsonData","time","ConvertTime","convertTime","markerElement","name","latitude","longitude","setState","renderDataForHTML","e","preventDefault","doc","orientation","unit","text","addImage","save","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport jsPDF from 'jspdf';\nimport divelogLogo from '../../img/logo.png';\n\nclass PDFTableButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            partnerName: '',\n            partnerSurname: '',\n            marker: {},\n            entryTime: '',\n            exitTime: '',\n            averageDepth: 0.0,\n            maxDepth: 0.0,\n            visibility: 0.0,\n            waterTemperature: 0.0,\n            airTemperature: 0.0,\n            cylinderCapacity: '',\n            divingSuit: 'NONE',\n            waterType: 'NONE',\n            waterEntryType: 'NONE',\n            ballast: 0.0,\n            glovesType: 'NONE',\n            divingType: 'NONE',\n            comment: ''\n        }\n        this.onClick = this.onClick.bind(this);\n    }\n\n    componentDidMount() {\n        const id = this.props.id;\n        let jwtToken = localStorage.getItem(\"JwtToken\");\n\n        fetch(`/pdf/logbook/${id}/${jwtToken}`, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'content-type': 'application/json'\n            }\n        })\n        .then(response => response.json())\n        .then(jsonData => {\n            let time = this.ConvertTime.convertTime(jsonData.entryTime, jsonData.exitTime, true);\n\n            const markerElement = {\n                id: jsonData.marker.id,\n                name: jsonData.marker.name,\n                latitude: jsonData.marker.latitude,\n                longitude: jsonData.marker.longitude\n            }\n\n            this.setState({\n                partnerName: jsonData.partnerName,\n                partnerSurname: jsonData.partnerSurname,\n                marker: markerElement,\n                entryTime: time[0],\n                exitTime: time[1],\n                averageDepth: jsonData.averageDepth,\n                maxDepth: jsonData.maxDepth,\n                visibility: jsonData.visibility,\n                waterTemperature: jsonData.waterTemperature,\n                airTemperature: jsonData.airTemperature,\n                cylinderCapacity: jsonData.cylinderCapacity,\n                divingSuit: jsonData.divingSuit,\n                waterType: jsonData.waterType,\n                waterEntryType: jsonData.waterEntryType,\n                ballast: jsonData.ballast,\n                glovesType: jsonData.glovesType,\n                divingType: jsonData.divingType,\n                comment: jsonData.comment\n            });\n        }); \n    }\n\n    renderDataForHTML() {\n        return (\n            <div>\n                <img src={divelogLogo} alt=\"Divelog logo\" />\n            </div>\n        );\n    }\n\n    onClick(e) {\n        e.preventDefault();\n\n        let doc = new jsPDF({\n            orientation: \"p\",\n            unit: \"mm\",\n        });\n\n        doc.text(`Imię partnera:  ${this.state.partnerName}`, 10, 10);\n        doc.text(`Nazwisko partnera: ${this.state.partnerSurname}`, 10, 10);\n        doc.addImage(divelogLogo, 'PNG', 15, 40, 100, 100);\n\n        doc.save(\"pdf\");\n    }\n\n    render() {\n        return (\n            <button className=\"btn btn-primary\"\n                onClick={this.onClick}\n            >\n                PDF\n            </button>\n        );\n    }\n}\n\nexport default withTranslation(\"common\")(PDFTableButton);"]},"metadata":{},"sourceType":"module"}