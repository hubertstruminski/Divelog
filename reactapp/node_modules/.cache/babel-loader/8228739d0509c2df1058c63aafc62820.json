{"ast":null,"code":"var _jsxFileName = \"/home/msi/Pulpit/Divelog/react-divelog/src/components/googleMaps/GoogleMap.js\";\nimport React from 'react';\nimport '../../css/GoogleMap.css';\nimport { Map, Marker, GoogleApiWrapper } from 'google-maps-react';\n\nclass GoogleMap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      isLoading: false\n    });\n  }\n\n  render() {\n    const mapStyle = {\n      width: '70%',\n      height: '60%',\n      position: 'absolute',\n      left: '50%',\n      top: '50%',\n      '-webkit-transform': 'translate(-50%, -50%)',\n      transform: 'translate(-50%, -50%)'\n    };\n    let loadingScreen = React.createElement(\"div\", {\n      class: \"d-flex justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"spinner-grow\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      class: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, \"Loading...\")));\n    let map = React.createElement(\"div\", {\n      className: \"google-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(Map, {\n      google: this.props.google,\n      zoom: 2,\n      style: mapStyle,\n      initialCenter: {\n        lat: 47.444,\n        lng: -122.176\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(Marker, {\n      position: {\n        lat: 48.00,\n        lng: -122.00\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    })));\n    let content = this.state.isLoading ? loadingScreen : map;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, content);\n  }\n\n}\n\nexport default GoogleApiWrapper(props => ({\n  apiKey: 'AIzaSyBgb4kpatKEjsOGsxplxFyRfw1K_wGhLTo',\n  language: props.language\n}))(GoogleMap);","map":{"version":3,"sources":["/home/msi/Pulpit/Divelog/react-divelog/src/components/googleMaps/GoogleMap.js"],"names":["React","Map","Marker","GoogleApiWrapper","GoogleMap","Component","constructor","props","state","isLoading","componentDidMount","setState","render","mapStyle","width","height","position","left","top","transform","loadingScreen","map","google","lat","lng","content","apiKey","language"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,yBAAP;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,gBAAtB,QAA6C,mBAA7C;;AAEA,MAAMC,SAAN,SAAwBJ,KAAK,CAACK,SAA9B,CAAwC;AACpCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAE;AADF,KAAb;AAGH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,QAAL,CAAc;AAAEF,MAAAA,SAAS,EAAE;AAAb,KAAd;AACH;;AAEDG,EAAAA,MAAM,GAAG;AACL,UAAMC,QAAQ,GAAG;AACbC,MAAAA,KAAK,EAAE,KADM;AAEbC,MAAAA,MAAM,EAAE,KAFK;AAGbC,MAAAA,QAAQ,EAAE,UAHG;AAIbC,MAAAA,IAAI,EAAE,KAJO;AAKbC,MAAAA,GAAG,EAAE,KALQ;AAMb,2BAAqB,uBANR;AAObC,MAAAA,SAAS,EAAE;AAPE,KAAjB;AAUA,QAAIC,aAAa,GACb;AAAK,MAAA,KAAK,EAAC,+BAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,KAAK,EAAC,cAAX;AAA0B,MAAA,IAAI,EAAC,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAM,MAAA,KAAK,EAAC,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,CADJ,CADJ;AAQA,QAAIC,GAAG,GACH;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,GAAD;AACI,MAAA,MAAM,EAAE,KAAKd,KAAL,CAAWe,MADvB;AAEI,MAAA,IAAI,EAAE,CAFV;AAGI,MAAA,KAAK,EAAET,QAHX;AAII,MAAA,aAAa,EAAE;AAAEU,QAAAA,GAAG,EAAE,MAAP;AAAeC,QAAAA,GAAG,EAAE,CAAC;AAArB,OAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMI,oBAAC,MAAD;AAAQ,MAAA,QAAQ,EAAE;AAAED,QAAAA,GAAG,EAAE,KAAP;AAAcC,QAAAA,GAAG,EAAE,CAAC;AAApB,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,CADJ,CADJ;AAYA,QAAIC,OAAO,GAAG,KAAKjB,KAAL,CAAWC,SAAX,GAAuBW,aAAvB,GAAuCC,GAArD;AAEA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACMI,OADN,CADJ;AAKH;;AAnDmC;;AAsDxC,eAAetB,gBAAgB,CAC1BI,KAAD,KAAY;AACVmB,EAAAA,MAAM,EAAE,yCADE;AAEVC,EAAAA,QAAQ,EAAEpB,KAAK,CAACoB;AAFN,CAAZ,CAD2B,CAAhB,CAKVvB,SALU,CAAf","sourcesContent":["import React from 'react';\nimport '../../css/GoogleMap.css';\nimport { Map, Marker, GoogleApiWrapper} from 'google-maps-react';\n\nclass GoogleMap extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isLoading: true\n        }\n    }\n\n    componentDidMount() {\n        this.setState({ isLoading: false });\n    }\n\n    render() {\n        const mapStyle = {\n            width: '70%',\n            height: '60%',\n            position: 'absolute',\n            left: '50%',\n            top: '50%',\n            '-webkit-transform': 'translate(-50%, -50%)',\n            transform: 'translate(-50%, -50%)'\n        }\n\n        let loadingScreen = (\n            <div class=\"d-flex justify-content-center\">\n                <div class=\"spinner-grow\" role=\"status\">\n                    <span class=\"sr-only\">Loading...</span>\n                </div>\n            </div>\n        )\n\n        let map = (\n            <div className=\"google-container\">\n                <Map\n                    google={this.props.google}\n                    zoom={2}\n                    style={mapStyle}\n                    initialCenter={{ lat: 47.444, lng: -122.176}}\n                >\n                    <Marker position={{ lat: 48.00, lng: -122.00}} />\n                </Map>\n            </div>\n        )\n        let content = this.state.isLoading ? loadingScreen : map;\n\n        return (\n            <div>\n                { content }\n            </div>\n        );\n    }\n}\n\nexport default GoogleApiWrapper(\n    (props) => ({\n      apiKey: 'AIzaSyBgb4kpatKEjsOGsxplxFyRfw1K_wGhLTo',\n      language: props.language,\n    }\n  ))(GoogleMap);"]},"metadata":{},"sourceType":"module"}