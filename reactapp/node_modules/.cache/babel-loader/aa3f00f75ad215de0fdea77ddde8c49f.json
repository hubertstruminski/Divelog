{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/divelog/react-divelog/src/components/twitter/twitter-messages/TwitterMessagesInbox.js\";\nimport React from 'react';\nimport AuthService from '../../../util/AuthService';\nimport TwitterConversationContact from './TwitterConversationContact';\n\nclass TwitterMessagesInbox extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      conversations: [],\n      isConversationsRetrieved: false\n    };\n    this.Auth = new AuthService();\n    this.renderConversations = this.renderConversations.bind(this);\n  }\n\n  componentDidMount() {\n    let jwtToken = this.Auth.getRightSocialToken();\n    fetch(\"/twitter/direct/messages/\".concat(jwtToken), {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(json => {\n      json.map((item, index) => {\n        const element = {\n          recipientId: item.recipientId,\n          senderId: item.senderId,\n          name: item.name,\n          screenName: item.screenName,\n          createdAt: item.createdAt,\n          text: item.text,\n          pictureUrl: item.pictureUrl\n        };\n        this.setState({\n          conversations: this.state.conversations.concat(element)\n        });\n      });\n      this.setState({\n        isConversationsRetrieved: true\n      }, () => {});\n    });\n  }\n\n  renderConversations() {\n    return this.state.conversations // .sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt))\n    .sort((a, b) => b.createdAt - a.createdAt).map((conversation, index) => {\n      return React.createElement(TwitterConversationContact, {\n        recipientId: conversation.recipientId,\n        senderId: conversation.senderId,\n        name: conversation.name,\n        screenName: conversation.screenName,\n        createdAt: conversation.createdAt,\n        text: conversation.text,\n        pictureUrl: conversation.pictureUrl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      });\n    });\n  }\n\n  render() {\n    let isConversationsRetrieved = this.state.isConversationsRetrieved;\n    return React.createElement(\"ul\", {\n      className: \"list-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, isConversationsRetrieved && this.renderConversations());\n  }\n\n}\n\nexport default TwitterMessagesInbox;","map":{"version":3,"sources":["/home/huber/Pulpit/divelog/react-divelog/src/components/twitter/twitter-messages/TwitterMessagesInbox.js"],"names":["React","AuthService","TwitterConversationContact","TwitterMessagesInbox","Component","constructor","state","conversations","isConversationsRetrieved","Auth","renderConversations","bind","componentDidMount","jwtToken","getRightSocialToken","fetch","method","headers","then","response","json","map","item","index","element","recipientId","senderId","name","screenName","createdAt","text","pictureUrl","setState","concat","sort","a","b","conversation","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,0BAAP,MAAuC,8BAAvC;;AAEA,MAAMC,oBAAN,SAAmCH,KAAK,CAACI,SAAzC,CAAmD;AAC/CC,EAAAA,WAAW,GAAG;AACV;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,aAAa,EAAE,EADN;AAETC,MAAAA,wBAAwB,EAAE;AAFjB,KAAb;AAIA,SAAKC,IAAL,GAAY,IAAIR,WAAJ,EAAZ;AACA,SAAKS,mBAAL,GAA2B,KAAKA,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,CAA3B;AACH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,QAAIC,QAAQ,GAAG,KAAKJ,IAAL,CAAUK,mBAAV,EAAf;AAEAC,IAAAA,KAAK,oCAA6BF,QAA7B,GAAyC;AAC1CG,MAAAA,MAAM,EAAE,KADkC;AAE1CC,MAAAA,OAAO,EAAE;AACL,kBAAU,kBADL;AAEL,wBAAgB;AAFX;AAFiC,KAAzC,CAAL,CAMGC,IANH,CAMQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANpB,EAOCF,IAPD,CAOME,IAAI,IAAI;AACVA,MAAAA,IAAI,CAACC,GAAL,CAAS,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACtB,cAAMC,OAAO,GAAG;AACZC,UAAAA,WAAW,EAAEH,IAAI,CAACG,WADN;AAEZC,UAAAA,QAAQ,EAAEJ,IAAI,CAACI,QAFH;AAGZC,UAAAA,IAAI,EAAEL,IAAI,CAACK,IAHC;AAIZC,UAAAA,UAAU,EAAEN,IAAI,CAACM,UAJL;AAKZC,UAAAA,SAAS,EAAEP,IAAI,CAACO,SALJ;AAMZC,UAAAA,IAAI,EAAER,IAAI,CAACQ,IANC;AAOZC,UAAAA,UAAU,EAAET,IAAI,CAACS;AAPL,SAAhB;AASA,aAAKC,QAAL,CAAc;AAAEzB,UAAAA,aAAa,EAAE,KAAKD,KAAL,CAAWC,aAAX,CAAyB0B,MAAzB,CAAgCT,OAAhC;AAAjB,SAAd;AACH,OAXD;AAYA,WAAKQ,QAAL,CAAc;AAAExB,QAAAA,wBAAwB,EAAE;AAA5B,OAAd,EAAkD,MAAM,CACvD,CADD;AAEH,KAtBD;AAuBH;;AAEDE,EAAAA,mBAAmB,GAAG;AAClB,WAAO,KAAKJ,KAAL,CAAWC,aAAX,CACH;AADG,KAEF2B,IAFE,CAEG,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACP,SAAF,GAAcM,CAAC,CAACN,SAF7B,EAGFR,GAHE,CAGE,CAACgB,YAAD,EAAed,KAAf,KAAyB;AAC9B,aACI,oBAAC,0BAAD;AACI,QAAA,WAAW,EAAEc,YAAY,CAACZ,WAD9B;AAEI,QAAA,QAAQ,EAAEY,YAAY,CAACX,QAF3B;AAGI,QAAA,IAAI,EAAEW,YAAY,CAACV,IAHvB;AAII,QAAA,UAAU,EAAEU,YAAY,CAACT,UAJ7B;AAKI,QAAA,SAAS,EAAES,YAAY,CAACR,SAL5B;AAMI,QAAA,IAAI,EAAEQ,YAAY,CAACP,IANvB;AAOI,QAAA,UAAU,EAAEO,YAAY,CAACN,UAP7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAWH,KAfM,CAAP;AAgBH;;AAEDO,EAAAA,MAAM,GAAG;AACL,QAAI9B,wBAAwB,GAAG,KAAKF,KAAL,CAAWE,wBAA1C;AACA,WACI;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACMA,wBAAwB,IAAI,KAAKE,mBAAL,EADlC,CADJ;AAKH;;AAlE8C;;AAqEnD,eAAeP,oBAAf","sourcesContent":["import React from 'react';\nimport AuthService from '../../../util/AuthService';\nimport TwitterConversationContact from './TwitterConversationContact';\n\nclass TwitterMessagesInbox extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            conversations: [],\n            isConversationsRetrieved: false\n        }\n        this.Auth = new AuthService();\n        this.renderConversations = this.renderConversations.bind(this);\n    }\n\n    componentDidMount() {\n        let jwtToken = this.Auth.getRightSocialToken();\n\n        fetch(`/twitter/direct/messages/${jwtToken}`, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }\n        }).then(response => response.json())\n        .then(json => {\n            json.map((item, index) => {\n                const element = {\n                    recipientId: item.recipientId,\n                    senderId: item.senderId,\n                    name: item.name,\n                    screenName: item.screenName,\n                    createdAt: item.createdAt,\n                    text: item.text,\n                    pictureUrl: item.pictureUrl\n                }\n                this.setState({ conversations: this.state.conversations.concat(element) });\n            });\n            this.setState({ isConversationsRetrieved: true }, () => {\n            });\n        })\n    }\n\n    renderConversations() {\n        return this.state.conversations\n            // .sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt))\n            .sort((a, b) => b.createdAt - a.createdAt)\n            .map((conversation, index) => {\n            return (\n                <TwitterConversationContact \n                    recipientId={conversation.recipientId}\n                    senderId={conversation.senderId}\n                    name={conversation.name}\n                    screenName={conversation.screenName}\n                    createdAt={conversation.createdAt}\n                    text={conversation.text}\n                    pictureUrl={conversation.pictureUrl}\n                />\n            );\n        });\n    }\n\n    render() {\n        let isConversationsRetrieved = this.state.isConversationsRetrieved;\n        return (\n            <ul className=\"list-group\">\n                { isConversationsRetrieved && this.renderConversations() }\n            </ul>\n        );\n    }\n}\n\nexport default TwitterMessagesInbox;"]},"metadata":{},"sourceType":"module"}