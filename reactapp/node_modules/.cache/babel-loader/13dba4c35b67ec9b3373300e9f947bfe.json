{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/Divelog/reactapp/src/util/withTwitterAuth.js\";\nimport React from 'react';\nimport AuthService from './AuthService';\nimport jwt from 'jsonwebtoken';\nexport default function withTwitterAuth(AuthComponent, props) {\n  const Auth = new AuthService();\n\n  class AuthWrapped extends React.Component {\n    constructor() {\n      super();\n      this.state = {\n        isRedirectToLoginPage: true\n      };\n    }\n\n    componentWillMount() {\n      console.log(this.props.match.params.jwtToken);\n      fetch(\"/twitter/login/validate/token/\".concat(jwtToken), {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => {\n        console.log(response);\n\n        if (response.status === 200) {\n          this.setState({\n            isRedirectToLoginPage: false\n          });\n        }\n      });\n    }\n\n    render() {\n      let isRedirectToLoginPage = this.state.isRedirectToLoginPage;\n      return !isRedirectToLoginPage && React.createElement(AuthComponent, {\n        history: this.props.history,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      });\n    }\n\n  }\n\n  return AuthWrapped;\n}","map":{"version":3,"sources":["/home/huber/Pulpit/Divelog/reactapp/src/util/withTwitterAuth.js"],"names":["React","AuthService","jwt","withTwitterAuth","AuthComponent","props","Auth","AuthWrapped","Component","constructor","state","isRedirectToLoginPage","componentWillMount","console","log","match","params","jwtToken","fetch","method","headers","then","response","status","setState","render","history"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEA,eAAe,SAASC,eAAT,CAAyBC,aAAzB,EAAwCC,KAAxC,EAA+C;AAC1D,QAAMC,IAAI,GAAI,IAAIL,WAAJ,EAAd;;AAEA,QAAMM,WAAN,SAA0BP,KAAK,CAACQ,SAAhC,CAA0C;AACtCC,IAAAA,WAAW,GAAG;AACV;AAEA,WAAKC,KAAL,GAAa;AACTC,QAAAA,qBAAqB,EAAE;AADd,OAAb;AAGH;;AACDC,IAAAA,kBAAkB,GAAG;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKT,KAAL,CAAWU,KAAX,CAAiBC,MAAjB,CAAwBC,QAApC;AACAC,MAAAA,KAAK,yCAAkCD,QAAlC,GAA8C;AAC/CE,QAAAA,MAAM,EAAE,KADuC;AAE/CC,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX;AAFsC,OAA9C,CAAL,CAKGC,IALH,CAKQC,QAAQ,IAAI;AAChBT,QAAAA,OAAO,CAACC,GAAR,CAAYQ,QAAZ;;AACA,YAAGA,QAAQ,CAACC,MAAT,KAAoB,GAAvB,EAA4B;AACxB,eAAKC,QAAL,CAAc;AAAEb,YAAAA,qBAAqB,EAAE;AAAzB,WAAd;AACH;AACJ,OAVD;AAYH;;AAEDc,IAAAA,MAAM,GAAG;AACL,UAAId,qBAAqB,GAAG,KAAKD,KAAL,CAAWC,qBAAvC;AACA,aACI,CAACA,qBAAD,IAA0B,oBAAC,aAAD;AAAe,QAAA,OAAO,EAAE,KAAKN,KAAL,CAAWqB,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAD9B;AAGH;;AA7BqC;;AA+B1C,SAAOnB,WAAP;AACH","sourcesContent":["import React from 'react';\nimport AuthService from './AuthService';\nimport jwt from 'jsonwebtoken';\n\nexport default function withTwitterAuth(AuthComponent, props) {\n    const Auth =  new AuthService();\n\n    class AuthWrapped extends React.Component {\n        constructor() {\n            super();\n\n            this.state = {\n                isRedirectToLoginPage: true\n            }\n        }\n        componentWillMount() {\n            console.log(this.props.match.params.jwtToken);\n            fetch(`/twitter/login/validate/token/${jwtToken}`, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            }).then(response => {\n                console.log(response);\n                if(response.status === 200) {\n                    this.setState({ isRedirectToLoginPage: false });\n                }\n            })\n\n        }\n\n        render() {\n            let isRedirectToLoginPage = this.state.isRedirectToLoginPage;\n            return (\n                !isRedirectToLoginPage && <AuthComponent history={this.props.history} />\n            );\n        }\n    }\n    return AuthWrapped;\n}"]},"metadata":{},"sourceType":"module"}