{"ast":null,"code":"var _jsxFileName = \"/home/msi/Pulpit/Divelog/reactapp/src/components/twitter/SearchTwitterPeople.js\";\nimport React from 'react';\nimport '../../css/TwitterGroupsCard.css';\nimport AuthService from '../../util/AuthService';\nimport axios from 'axios';\nimport twitterVerified from '../../img/twitter-verified.png';\nimport { BACKEND_API_URL } from '../../actions/types';\n\nclass SearchTwitterPeople extends React.Component {\n  constructor(props) {\n    super(props);\n    this.isMountedSearchTwitterPeople = false;\n    this.state = {\n      searchPeople: '',\n      timeInterval: 0,\n      searchPeopleList: [],\n      isSearched: false,\n      isRateLimitExceeded: false\n    };\n    this.isError = false;\n    this.Auth = new AuthService();\n    this.twitterJwtToken = this.Auth.getTwitterToken();\n    this.onTwitterSearchChange = this.onTwitterSearchChange.bind(this);\n    this.getUsers = this.getUsers.bind(this);\n    this.getPeopleList = this.getPeopleList.bind(this);\n    this.onBlur = this.onBlur.bind(this);\n  }\n\n  componentDidMount() {\n    this.isMountedSearchTwitterPeople = true;\n  }\n\n  onTwitterSearchChange(e) {\n    this.setState({\n      searchPeople: e.target.value\n    }, () => {\n      if (this.state.searchPeople && this.state.searchPeople.length > 0) {\n        this.getUsers();\n      } else if (!this.state.searchPeople) {\n        this.setState({\n          searchPeopleList: []\n        });\n      }\n    });\n  }\n\n  onBlur(e) {\n    if (this.state.searchPeople.length === 0) {\n      this.setState({\n        searchPeopleList: []\n      });\n    }\n  }\n\n  getUsers() {\n    let searchPeople = this.state.searchPeople;\n    axios({\n      url: `${BACKEND_API_URL}/twitter/users/search/${this.state.searchPeople}/${this.twitterJwtToken}`,\n      method: 'POST',\n      body: searchPeople,\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      if (response.status === 429) {\n        this.setState({\n          isRateLimitExceeded: true\n        });\n        this.isError = true;\n        return;\n      }\n\n      if (this.isMountedSearchTwitterPeople && !this.isError) {\n        this.setState({\n          searchPeopleList: []\n        });\n        let counter = 0;\n        response.data.map((person, index) => {\n          if (counter === 10) {\n            return;\n          }\n\n          const element = {\n            id: person.id,\n            name: person.name,\n            pictureUrl: person['400x400ProfileImageURL'],\n            screenName: person.screenName,\n            verified: person.verified\n          };\n          this.setState({\n            searchPeopleList: this.state.searchPeopleList.concat(element)\n          });\n          counter++;\n        });\n        this.setState({\n          isSearched: true\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  getPeopleList() {\n    return this.state.searchPeopleList.map((person, index) => {\n      let verified = '';\n\n      if (person.verified) {\n        verified = \"- Verified\";\n      } else {\n        verified = \"\";\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        className: \"list-group-item list-group-search-person\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"search-li-item-float search-1-div\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: person.pictureUrl,\n        className: \"search-picture-person\",\n        alt: \"Person\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"search-li-item-float search-2-div\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, person.verified && React.createElement(\"img\", {\n        src: twitterVerified,\n        className: \"twitter-verified\",\n        alt: \"Twitter user verified\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }), person.name, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }), \"@\", person.screenName), React.createElement(\"div\", {\n        style: {\n          clear: 'both'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      })));\n    });\n  }\n\n  componentWillUnmount() {\n    this.isMountedSearchTwitterPeople = false;\n  }\n\n  render() {\n    let isSearched = this.state.isSearched;\n    let isRateLimitExceeded = this.state.isRateLimitExceeded;\n    return React.createElement(\"div\", {\n      className: \"search-people-bar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"list-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      id: \"search-twitter-people\",\n      className: \"list-group-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, true && React.createElement(\"span\", {\n      style: {\n        color: \"red\",\n        fontSize: \"0.6vw\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Twitter rate limit exceeded\"), React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.searchPeople,\n      placeholder: \"Search Twitter\",\n      className: \"form-control input-search-twitter\",\n      onChange: this.onTwitterSearchChange,\n      onBlur: this.onBlur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    })), isSearched && React.createElement(\"div\", {\n      className: \"list-searched-people\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, this.getPeopleList())));\n  }\n\n}\n\nexport default SearchTwitterPeople;","map":{"version":3,"sources":["/home/msi/Pulpit/Divelog/reactapp/src/components/twitter/SearchTwitterPeople.js"],"names":["React","AuthService","axios","twitterVerified","BACKEND_API_URL","SearchTwitterPeople","Component","constructor","props","isMountedSearchTwitterPeople","state","searchPeople","timeInterval","searchPeopleList","isSearched","isRateLimitExceeded","isError","Auth","twitterJwtToken","getTwitterToken","onTwitterSearchChange","bind","getUsers","getPeopleList","onBlur","componentDidMount","e","setState","target","value","length","url","method","body","headers","then","response","status","counter","data","map","person","index","element","id","name","pictureUrl","screenName","verified","concat","catch","err","console","log","clear","componentWillUnmount","render","color","fontSize"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../css/TwitterGroupsCard.css';\nimport AuthService from '../../util/AuthService';\nimport axios from 'axios';\nimport twitterVerified from '../../img/twitter-verified.png';\nimport { BACKEND_API_URL } from '../../actions/types';\n\nclass SearchTwitterPeople extends React.Component {\n    isMountedSearchTwitterPeople = false;\n    \n    constructor(props) {\n        super(props);\n\n        this.state = {\n            searchPeople: '',\n            timeInterval: 0,\n            searchPeopleList: [],\n            isSearched: false,\n            isRateLimitExceeded: false\n        }\n        this.isError = false;\n\n        this.Auth = new AuthService();\n        this.twitterJwtToken = this.Auth.getTwitterToken();\n\n        this.onTwitterSearchChange = this.onTwitterSearchChange.bind(this);\n        this.getUsers = this.getUsers.bind(this);\n        this.getPeopleList = this.getPeopleList.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n    }\n\n    componentDidMount() {\n        this.isMountedSearchTwitterPeople = true;\n    }\n\n    onTwitterSearchChange(e) {\n        this.setState({\n            searchPeople: e.target.value\n        }, () => {\n            if(this.state.searchPeople && this.state.searchPeople.length > 0) {\n                this.getUsers();\n            } else if(!this.state.searchPeople) {\n                this.setState({ searchPeopleList: [] });\n            }\n        });\n    }\n\n    onBlur(e) {\n        if(this.state.searchPeople.length === 0) {\n            this.setState({ searchPeopleList: [] });\n        }\n    }\n\n    getUsers() {\n        let searchPeople = this.state.searchPeople;\n        axios({ \n            url: `${BACKEND_API_URL}/twitter/users/search/${this.state.searchPeople}/${this.twitterJwtToken}`,\n            method: 'POST',\n            body: searchPeople,\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }\n        }).then(response => {\n            if(response.status === 429) {\n                this.setState({ isRateLimitExceeded: true });\n                this.isError = true;\n                return;\n            }\n            if(this.isMountedSearchTwitterPeople && !this.isError) {\n                this.setState({ searchPeopleList: [] });\n                let counter = 0;\n                response.data.map((person, index) => {\n                    if(counter === 10) {\n                        return;\n                    }\n                    const element = {\n                        id: person.id,\n                        name: person.name,\n                        pictureUrl: person['400x400ProfileImageURL'],\n                        screenName: person.screenName,\n                        verified: person.verified\n                    }\n                    this.setState({ searchPeopleList: this.state.searchPeopleList.concat(element) });\n                    counter++;\n                }); \n                this.setState({ isSearched: true });\n            }\n        }).catch(err => {\n            console.log(err);\n        });\n    }\n\n    getPeopleList() {\n        return this.state.searchPeopleList.map((person, index) => {\n            let verified = '';\n            if(person.verified) {\n                verified = \"- Verified\";\n            } else {\n                verified = \"\";\n            }\n            return (\n                <div>\n                    <li className=\"list-group-item list-group-search-person\">\n                        <div className=\"search-li-item-float search-1-div\">\n                            <img src={person.pictureUrl} className=\"search-picture-person\" alt=\"Person\" />\n                        </div>\n                        <div className=\"search-li-item-float search-2-div\">\n                            {person.verified && <img src={twitterVerified} className=\"twitter-verified\" alt=\"Twitter user verified\" /> }\n                            {person.name} \n                            <br />\n                            @{person.screenName}\n                        </div>\n                        <div style={{ clear: 'both' }}></div>\n                    </li>\n                </div>\n            );\n        });\n    }\n\n    componentWillUnmount() {\n        this.isMountedSearchTwitterPeople = false;\n    }\n\n    render() {\n        let isSearched = this.state.isSearched;\n        let isRateLimitExceeded = this.state.isRateLimitExceeded;\n\n        return (\n            <div className=\"search-people-bar\">\n            <ul className=\"list-group\">\n                <li id=\"search-twitter-people\" className=\"list-group-item\">\n                    { true && <span style={{ color: \"red\", fontSize: \"0.6vw\" }}>Twitter rate limit exceeded</span>} \n                    <input \n                        type=\"text\"\n                        value={this.state.searchPeople}\n                        placeholder=\"Search Twitter\"\n                        className=\"form-control input-search-twitter\"\n                        onChange={this.onTwitterSearchChange}\n                        onBlur={this.onBlur}\n                    />\n                </li>\n                { isSearched &&\n                    <div className=\"list-searched-people\">\n                        {this.getPeopleList() }\n                    </div>\n                }\n            </ul>\n            </div>\n        );\n    }\n}\n\nexport default SearchTwitterPeople;"]},"metadata":{},"sourceType":"module"}