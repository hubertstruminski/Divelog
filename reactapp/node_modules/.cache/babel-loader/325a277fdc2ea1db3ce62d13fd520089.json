{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/divelog/react-divelog/src/components/twitter/twitter-messages/TwitterMessagesInbox.js\";\nimport React from 'react';\nimport '../../../css/twitter-messages/TwitterMessagesInbox.css';\nimport AuthService from '../../../util/AuthService';\nimport TwitterConversationContact from './TwitterConversationContact';\nimport $ from 'jquery';\nimport TwitterMessagesSearch from './TwitterMessagesSearch';\nimport Conversation from './Conversation';\n\nclass TwitterMessagesInbox extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setIsLoadingConversation = (value, recipient, sender) => {\n      this.setState({\n        isLoadingConversation: value,\n        recipientId: recipient,\n        senderId: sender\n      });\n    };\n\n    this.state = {\n      conversations: [],\n      isConversationsRetrieved: false,\n      copyOfConversations: [],\n      isLoading: true,\n      isLoadingConversation: false,\n      recipientId: '',\n      senderId: ''\n    };\n    this.Auth = new AuthService();\n    this.copyOfConversations = [];\n    this.renderConversations = this.renderConversations.bind(this);\n    this.searchInList = this.searchInList.bind(this);\n    this.retrieveConversations = this.retrieveConversations.bind(this);\n    this.setIsConversationRetrieved = this.setIsConversationRetrieved.bind(this);\n    this.searchPeopleToConversation = this.searchPeopleToConversation.bind(this);\n    this.setIsLoadingConversation = this.setIsLoadingConversation.bind(this);\n  }\n\n  componentDidMount() {\n    let jwtToken = this.Auth.getRightSocialToken();\n    fetch(\"/twitter/direct/messages/\".concat(jwtToken), {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(json => {\n      json.map((item, index) => {\n        const element = {\n          recipientId: item.recipientId,\n          senderId: item.senderId,\n          name: item.name,\n          screenName: item.screenName,\n          createdAt: item.createdAt,\n          text: item.text,\n          pictureUrl: item.pictureUrl\n        };\n        this.setState({\n          conversations: this.state.conversations.concat(element)\n        });\n      });\n      this.setState({\n        isConversationsRetrieved: true\n      }, () => {\n        this.setState({\n          isLoading: false\n        });\n        this.copyOfConversations = this.state.conversations.map(x => x);\n        $(\".twitter-messages-list-persons-spinner\").css({\n          display: \"block\"\n        });\n      });\n    });\n  }\n\n  renderConversations() {\n    return this.state.conversations.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt)).map((conversation, index) => {\n      return React.createElement(TwitterConversationContact, {\n        recipientId: conversation.recipientId,\n        senderId: conversation.senderId,\n        name: conversation.name,\n        screenName: conversation.screenName,\n        createdAt: conversation.createdAt,\n        text: conversation.text,\n        pictureUrl: conversation.pictureUrl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      });\n    });\n  }\n\n  searchInList(searchInput) {\n    this.setState({\n      isConversationsRetrieved: true,\n      conversations: this.copyOfConversations.map(x => x)\n    }, () => {\n      return this.state.conversations.map((conversation, index) => {\n        if (conversation.name.includes(searchInput) || conversation.screenName.includes(searchInput)) {\n          this.setState({\n            conversations: this.state.conversations.filter((item, i) => i === index)\n          });\n        }\n      });\n    });\n    return null;\n  }\n\n  retrieveConversations() {\n    return this.copyOfConversations.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt)).map((conversation, index) => {\n      return React.createElement(TwitterConversationContact, {\n        recipientId: conversation.recipientId,\n        senderId: conversation.senderId,\n        name: conversation.name,\n        screenName: conversation.screenName,\n        createdAt: conversation.createdAt,\n        text: conversation.text,\n        pictureUrl: conversation.pictureUrl,\n        setIsLoadingConversation: this.setIsLoadingConversation,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      });\n    });\n  }\n\n  searchPeopleToConversation(e) {\n    e.preventDefault();\n    this.props.searchPeopleToConversation();\n  }\n\n  setIsConversationRetrieved(value) {\n    this.setState({\n      isConversationsRetrieved: value\n    });\n  }\n\n  render() {\n    let isConversationsRetrieved = this.state.isConversationsRetrieved;\n    let isLoading = this.state.isLoading;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-messages-list-inbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-messages-title-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-messages-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"Messages\"), React.createElement(\"i\", {\n      className: \"far fa-envelope twitter-messages-add-icon\",\n      onClick: this.searchPeopleToConversation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    })), React.createElement(TwitterMessagesSearch, {\n      searchInList: this.searchInList,\n      retrieveConversations: this.retrieveConversations,\n      setIsConversationRetrieved: this.setIsConversationRetrieved,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"twitter-messages-list-persons-spinner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"list-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, isConversationsRetrieved && this.renderConversations(), !isConversationsRetrieved && this.retrieveConversations()), isLoading && React.createElement(\"div\", {\n      className: \"spinner-border text-primary\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      class: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \"Loading...\")))), React.createElement(\"div\", {\n      className: \"twitter-messages-person-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-messages-person-invite-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(Conversation, {\n      setIsLoadingConversation: this.setIsLoadingConversation,\n      recipientId: this.state.recipientId,\n      senderId: this.state.senderId,\n      isLoadingConversation: this.state.isLoadingConversation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default TwitterMessagesInbox;","map":{"version":3,"sources":["/home/huber/Pulpit/divelog/react-divelog/src/components/twitter/twitter-messages/TwitterMessagesInbox.js"],"names":["React","AuthService","TwitterConversationContact","$","TwitterMessagesSearch","Conversation","TwitterMessagesInbox","Component","constructor","props","setIsLoadingConversation","value","recipient","sender","setState","isLoadingConversation","recipientId","senderId","state","conversations","isConversationsRetrieved","copyOfConversations","isLoading","Auth","renderConversations","bind","searchInList","retrieveConversations","setIsConversationRetrieved","searchPeopleToConversation","componentDidMount","jwtToken","getRightSocialToken","fetch","method","headers","then","response","json","map","item","index","element","name","screenName","createdAt","text","pictureUrl","concat","x","css","display","sort","a","b","Date","conversation","searchInput","includes","filter","i","e","preventDefault","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,wDAAP;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,0BAAP,MAAuC,8BAAvC;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,MAAMC,oBAAN,SAAmCN,KAAK,CAACO,SAAzC,CAAmD;AAC/CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAkHnBC,wBAlHmB,GAkHQ,CAACC,KAAD,EAAQC,SAAR,EAAmBC,MAAnB,KAA8B;AACrD,WAAKC,QAAL,CAAc;AACVC,QAAAA,qBAAqB,EAAEJ,KADb;AAEVK,QAAAA,WAAW,EAAGJ,SAFJ;AAGVK,QAAAA,QAAQ,EAAEJ;AAHA,OAAd;AAKH,KAxHkB;;AAGf,SAAKK,KAAL,GAAa;AACTC,MAAAA,aAAa,EAAE,EADN;AAETC,MAAAA,wBAAwB,EAAE,KAFjB;AAGTC,MAAAA,mBAAmB,EAAE,EAHZ;AAITC,MAAAA,SAAS,EAAE,IAJF;AAKTP,MAAAA,qBAAqB,EAAE,KALd;AAMTC,MAAAA,WAAW,EAAE,EANJ;AAOTC,MAAAA,QAAQ,EAAE;AAPD,KAAb;AASA,SAAKM,IAAL,GAAY,IAAItB,WAAJ,EAAZ;AACA,SAAKoB,mBAAL,GAA2B,EAA3B;AACA,SAAKG,mBAAL,GAA2B,KAAKA,mBAAL,CAAyBC,IAAzB,CAA8B,IAA9B,CAA3B;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKE,qBAAL,GAA6B,KAAKA,qBAAL,CAA2BF,IAA3B,CAAgC,IAAhC,CAA7B;AACA,SAAKG,0BAAL,GAAkC,KAAKA,0BAAL,CAAgCH,IAAhC,CAAqC,IAArC,CAAlC;AACA,SAAKI,0BAAL,GAAkC,KAAKA,0BAAL,CAAgCJ,IAAhC,CAAqC,IAArC,CAAlC;AACA,SAAKf,wBAAL,GAAgC,KAAKA,wBAAL,CAA8Be,IAA9B,CAAmC,IAAnC,CAAhC;AACH;;AAEDK,EAAAA,iBAAiB,GAAG;AAChB,QAAIC,QAAQ,GAAG,KAAKR,IAAL,CAAUS,mBAAV,EAAf;AAEAC,IAAAA,KAAK,oCAA6BF,QAA7B,GAAyC;AAC1CG,MAAAA,MAAM,EAAE,KADkC;AAE1CC,MAAAA,OAAO,EAAE;AACL,kBAAU,kBADL;AAEL,wBAAgB;AAFX;AAFiC,KAAzC,CAAL,CAMGC,IANH,CAMQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANpB,EAOCF,IAPD,CAOME,IAAI,IAAI;AACVA,MAAAA,IAAI,CAACC,GAAL,CAAS,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACtB,cAAMC,OAAO,GAAG;AACZ1B,UAAAA,WAAW,EAAEwB,IAAI,CAACxB,WADN;AAEZC,UAAAA,QAAQ,EAAEuB,IAAI,CAACvB,QAFH;AAGZ0B,UAAAA,IAAI,EAAEH,IAAI,CAACG,IAHC;AAIZC,UAAAA,UAAU,EAAEJ,IAAI,CAACI,UAJL;AAKZC,UAAAA,SAAS,EAAEL,IAAI,CAACK,SALJ;AAMZC,UAAAA,IAAI,EAAEN,IAAI,CAACM,IANC;AAOZC,UAAAA,UAAU,EAAEP,IAAI,CAACO;AAPL,SAAhB;AASA,aAAKjC,QAAL,CAAc;AAAEK,UAAAA,aAAa,EAAE,KAAKD,KAAL,CAAWC,aAAX,CAAyB6B,MAAzB,CAAgCN,OAAhC;AAAjB,SAAd;AACH,OAXD;AAYA,WAAK5B,QAAL,CAAc;AAAEM,QAAAA,wBAAwB,EAAE;AAA5B,OAAd,EAAkD,MAAM;AACpD,aAAKN,QAAL,CAAc;AAAEQ,UAAAA,SAAS,EAAE;AAAb,SAAd;AACA,aAAKD,mBAAL,GAA2B,KAAKH,KAAL,CAAWC,aAAX,CAAyBoB,GAAzB,CAA8BU,CAAD,IAAOA,CAApC,CAA3B;AACA9C,QAAAA,CAAC,CAAC,wCAAD,CAAD,CAA4C+C,GAA5C,CAAgD;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAAhD;AACH,OAJD;AAKH,KAzBD;AA0BH;;AAED3B,EAAAA,mBAAmB,GAAG;AAClB,WAAO,KAAKN,KAAL,CAAWC,aAAX,CACFiC,IADE,CACG,CAACC,CAAD,EAAIC,CAAJ,KAAU,IAAIC,IAAJ,CAASF,CAAC,CAACR,SAAX,IAAwB,IAAIU,IAAJ,CAASD,CAAC,CAACT,SAAX,CADrC,EAEFN,GAFE,CAEE,CAACiB,YAAD,EAAef,KAAf,KAAyB;AAC9B,aACI,oBAAC,0BAAD;AACI,QAAA,WAAW,EAAEe,YAAY,CAACxC,WAD9B;AAEI,QAAA,QAAQ,EAAEwC,YAAY,CAACvC,QAF3B;AAGI,QAAA,IAAI,EAAEuC,YAAY,CAACb,IAHvB;AAII,QAAA,UAAU,EAAEa,YAAY,CAACZ,UAJ7B;AAKI,QAAA,SAAS,EAAEY,YAAY,CAACX,SAL5B;AAMI,QAAA,IAAI,EAAEW,YAAY,CAACV,IANvB;AAOI,QAAA,UAAU,EAAEU,YAAY,CAACT,UAP7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAWH,KAdM,CAAP;AAeH;;AAEDrB,EAAAA,YAAY,CAAC+B,WAAD,EAAc;AACtB,SAAK3C,QAAL,CAAc;AACVM,MAAAA,wBAAwB,EAAE,IADhB;AAEVD,MAAAA,aAAa,EAAE,KAAKE,mBAAL,CAAyBkB,GAAzB,CAA8BU,CAAD,IAAOA,CAApC;AAFL,KAAd,EAIG,MAAM;AACL,aAAO,KAAK/B,KAAL,CAAWC,aAAX,CAAyBoB,GAAzB,CAA6B,CAACiB,YAAD,EAAef,KAAf,KAAyB;AACzD,YAAGe,YAAY,CAACb,IAAb,CAAkBe,QAAlB,CAA2BD,WAA3B,KAA2CD,YAAY,CAACZ,UAAb,CAAwBc,QAAxB,CAAiCD,WAAjC,CAA9C,EAA6F;AACzF,eAAK3C,QAAL,CAAc;AAAEK,YAAAA,aAAa,EAAE,KAAKD,KAAL,CAAWC,aAAX,CAAyBwC,MAAzB,CAAgC,CAACnB,IAAD,EAAOoB,CAAP,KAAaA,CAAC,KAAKnB,KAAnD;AAAjB,WAAd;AACH;AACJ,OAJM,CAAP;AAKH,KAVD;AAWA,WAAO,IAAP;AACH;;AAEDd,EAAAA,qBAAqB,GAAG;AACpB,WAAO,KAAKN,mBAAL,CACF+B,IADE,CACG,CAACC,CAAD,EAAIC,CAAJ,KAAU,IAAIC,IAAJ,CAASF,CAAC,CAACR,SAAX,IAAwB,IAAIU,IAAJ,CAASD,CAAC,CAACT,SAAX,CADrC,EAEFN,GAFE,CAEE,CAACiB,YAAD,EAAef,KAAf,KAAyB;AAC9B,aACI,oBAAC,0BAAD;AACI,QAAA,WAAW,EAAEe,YAAY,CAACxC,WAD9B;AAEI,QAAA,QAAQ,EAAEwC,YAAY,CAACvC,QAF3B;AAGI,QAAA,IAAI,EAAEuC,YAAY,CAACb,IAHvB;AAII,QAAA,UAAU,EAAEa,YAAY,CAACZ,UAJ7B;AAKI,QAAA,SAAS,EAAEY,YAAY,CAACX,SAL5B;AAMI,QAAA,IAAI,EAAEW,YAAY,CAACV,IANvB;AAOI,QAAA,UAAU,EAAEU,YAAY,CAACT,UAP7B;AAQI,QAAA,wBAAwB,EAAE,KAAKrC,wBARnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAYH,KAfM,CAAP;AAgBH;;AAEDmB,EAAAA,0BAA0B,CAACgC,CAAD,EAAI;AAC1BA,IAAAA,CAAC,CAACC,cAAF;AACA,SAAKrD,KAAL,CAAWoB,0BAAX;AACH;;AAEDD,EAAAA,0BAA0B,CAACjB,KAAD,EAAQ;AAC9B,SAAKG,QAAL,CAAc;AAAEM,MAAAA,wBAAwB,EAAET;AAA5B,KAAd;AACH;;AAUDoD,EAAAA,MAAM,GAAG;AACL,QAAI3C,wBAAwB,GAAG,KAAKF,KAAL,CAAWE,wBAA1C;AACA,QAAIE,SAAS,GAAG,KAAKJ,KAAL,CAAWI,SAA3B;AACA,WACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,6BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,EAEI;AACI,MAAA,SAAS,EAAC,2CADd;AAEI,MAAA,OAAO,EAAE,KAAKO,0BAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ,EAQI,oBAAC,qBAAD;AACI,MAAA,YAAY,EAAE,KAAKH,YADvB;AAEI,MAAA,qBAAqB,EAAE,KAAKC,qBAFhC;AAGI,MAAA,0BAA0B,EAAE,KAAKC,0BAHrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARJ,EAaI;AAAK,MAAA,SAAS,EAAC,uCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACMR,wBAAwB,IAAI,KAAKI,mBAAL,EADlC,EAEM,CAACJ,wBAAD,IAA6B,KAAKO,qBAAL,EAFnC,CADJ,EAKML,SAAS,IACP;AACI,MAAA,SAAS,EAAC,6BADd;AAEI,MAAA,IAAI,EAAC,QAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAII;AAAM,MAAA,KAAK,EAAC,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJJ,CANR,CAbJ,CADJ,EA+BI;AAAK,MAAA,SAAS,EAAC,6BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,wCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,YAAD;AACI,MAAA,wBAAwB,EAAE,KAAKZ,wBADnC;AAEI,MAAA,WAAW,EAAE,KAAKQ,KAAL,CAAWF,WAF5B;AAGI,MAAA,QAAQ,EAAE,KAAKE,KAAL,CAAWD,QAHzB;AAII,MAAA,qBAAqB,EAAE,KAAKC,KAAL,CAAWH,qBAJtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,CA/BJ,CADJ;AA4CH;;AA1K8C;;AA6KnD,eAAeT,oBAAf","sourcesContent":["import React from 'react';\nimport '../../../css/twitter-messages/TwitterMessagesInbox.css';\nimport AuthService from '../../../util/AuthService';\nimport TwitterConversationContact from './TwitterConversationContact';\nimport $ from 'jquery';\nimport TwitterMessagesSearch from './TwitterMessagesSearch';\nimport Conversation from './Conversation';\n\nclass TwitterMessagesInbox extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            conversations: [],\n            isConversationsRetrieved: false,\n            copyOfConversations: [],\n            isLoading: true,\n            isLoadingConversation: false,\n            recipientId: '',\n            senderId: ''\n        }\n        this.Auth = new AuthService();\n        this.copyOfConversations = [];\n        this.renderConversations = this.renderConversations.bind(this);\n        this.searchInList = this.searchInList.bind(this);\n        this.retrieveConversations = this.retrieveConversations.bind(this);\n        this.setIsConversationRetrieved = this.setIsConversationRetrieved.bind(this);\n        this.searchPeopleToConversation = this.searchPeopleToConversation.bind(this);\n        this.setIsLoadingConversation = this.setIsLoadingConversation.bind(this);\n    }\n\n    componentDidMount() {\n        let jwtToken = this.Auth.getRightSocialToken();\n\n        fetch(`/twitter/direct/messages/${jwtToken}`, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }\n        }).then(response => response.json())\n        .then(json => {\n            json.map((item, index) => {\n                const element = {\n                    recipientId: item.recipientId,\n                    senderId: item.senderId,\n                    name: item.name,\n                    screenName: item.screenName,\n                    createdAt: item.createdAt,\n                    text: item.text,\n                    pictureUrl: item.pictureUrl\n                }\n                this.setState({ conversations: this.state.conversations.concat(element) });\n            });\n            this.setState({ isConversationsRetrieved: true }, () => {\n                this.setState({ isLoading: false });\n                this.copyOfConversations = this.state.conversations.map((x) => x);\n                $(\".twitter-messages-list-persons-spinner\").css({ display: \"block\" });\n            });\n        })\n    }\n\n    renderConversations() {\n        return this.state.conversations\n            .sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt))\n            .map((conversation, index) => {\n            return (\n                <TwitterConversationContact \n                    recipientId={conversation.recipientId}\n                    senderId={conversation.senderId}\n                    name={conversation.name}\n                    screenName={conversation.screenName}\n                    createdAt={conversation.createdAt}\n                    text={conversation.text}\n                    pictureUrl={conversation.pictureUrl}\n                />\n            );\n        });\n    }\n\n    searchInList(searchInput) {\n        this.setState({ \n            isConversationsRetrieved: true,\n            conversations: this.copyOfConversations.map((x) => x)\n        \n        }, () => {\n            return this.state.conversations.map((conversation, index) => {\n                if(conversation.name.includes(searchInput) || conversation.screenName.includes(searchInput)) {\n                    this.setState({ conversations: this.state.conversations.filter((item, i) => i === index)});\n                }\n            });\n        });\n        return null;\n    }\n\n    retrieveConversations() {\n        return this.copyOfConversations\n            .sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt))\n            .map((conversation, index) => {\n            return (\n                <TwitterConversationContact \n                    recipientId={conversation.recipientId}\n                    senderId={conversation.senderId}\n                    name={conversation.name}\n                    screenName={conversation.screenName}\n                    createdAt={conversation.createdAt}\n                    text={conversation.text}\n                    pictureUrl={conversation.pictureUrl}\n                    setIsLoadingConversation={this.setIsLoadingConversation}\n                />\n            );\n        });\n    }\n\n    searchPeopleToConversation(e) {\n        e.preventDefault();\n        this.props.searchPeopleToConversation();\n    }\n\n    setIsConversationRetrieved(value) {\n        this.setState({ isConversationsRetrieved: value });\n    }\n\n    setIsLoadingConversation = (value, recipient, sender) => {\n        this.setState({ \n            isLoadingConversation: value,\n            recipientId:  recipient,\n            senderId: sender\n        });\n    }\n\n    render() {\n        let isConversationsRetrieved = this.state.isConversationsRetrieved;\n        let isLoading = this.state.isLoading;\n        return (\n            <React.Fragment>\n                <div className=\"twitter-messages-list-inbox\">\n                    <div className=\"twitter-messages-title-box\">\n                        <div className=\"twitter-messages-title\">Messages</div>\n                        <i \n                            className=\"far fa-envelope twitter-messages-add-icon\" \n                            onClick={this.searchPeopleToConversation}\n                        ></i>\n                    </div>\n                    <TwitterMessagesSearch \n                        searchInList={this.searchInList}\n                        retrieveConversations={this.retrieveConversations}\n                        setIsConversationRetrieved={this.setIsConversationRetrieved}\n                    />\n                    <div className=\"twitter-messages-list-persons-spinner\">\n                        <ul className=\"list-group\">\n                            { isConversationsRetrieved && this.renderConversations() }\n                            { !isConversationsRetrieved && this.retrieveConversations() }\n                        </ul>\n                        { isLoading &&\n                            <div \n                                className='spinner-border text-primary' \n                                role='status'\n                            >\n                                <span class='sr-only'>\n                                    Loading...\n                                </span>\n                            </div>\n                        }\n                    </div>\n                </div>\n                <div className=\"twitter-messages-person-box\">\n                    <div className=\"twitter-messages-person-invite-wrapper\">\n                        <Conversation \n                            setIsLoadingConversation={this.setIsLoadingConversation}\n                            recipientId={this.state.recipientId}\n                            senderId={this.state.senderId}\n                            isLoadingConversation={this.state.isLoadingConversation}\n                        />\n                    </div>\n                </div>                \n            </React.Fragment>\n        );\n    }\n}\n\nexport default TwitterMessagesInbox;"]},"metadata":{},"sourceType":"module"}