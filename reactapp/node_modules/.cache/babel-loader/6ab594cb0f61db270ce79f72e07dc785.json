{"ast":null,"code":"var _jsxFileName = \"/home/msi/Pulpit/Divelog/reactapp/src/components/twitter/twitter-messages/TwitterMessagesInbox.js\";\nimport React from 'react';\nimport '../../../css/twitter-messages/TwitterMessagesInbox.css';\nimport AuthService from '../../../util/AuthService';\nimport TwitterConversationContact from './TwitterConversationContact';\nimport $ from 'jquery';\nimport TwitterMessagesSearch from './TwitterMessagesSearch';\nimport Conversation from './Conversation';\nimport { BACKEND_API_URL } from '../../../actions/types';\nimport axios from 'axios';\n\nclass TwitterMessagesInbox extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      conversations: [],\n      isConversationsRetrieved: false,\n      copyOfConversations: [],\n      isLoading: true,\n      isLoadingConversation: false,\n      userId: '',\n      isConversationClicked: false,\n      name: '',\n      screenName: '',\n      pictureUrl: '',\n      isChangedConversationContext: false,\n      directMessages: []\n    };\n    this.Auth = new AuthService();\n    this.copyOfConversations = [];\n    this.renderConversations = this.renderConversations.bind(this);\n    this.searchInList = this.searchInList.bind(this);\n    this.retrieveConversations = this.retrieveConversations.bind(this);\n    this.setIsConversationRetrieved = this.setIsConversationRetrieved.bind(this);\n    this.searchPeopleToConversation = this.searchPeopleToConversation.bind(this);\n    this.setIsLoadingConversation = this.setIsLoadingConversation.bind(this);\n    this.reRenderSingleMessages = this.reRenderSingleMessages.bind(this);\n    this.setIsChangedConversationContext = this.setIsChangedConversationContext.bind(this);\n  }\n\n  componentDidMount() {\n    let jwtToken = this.Auth.getRightSocialToken();\n    fetch(`${BACKEND_API_URL}/twitter/direct/messages/${jwtToken}`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      return response.json();\n    }).then(json => {\n      json.map((item, index) => {\n        const element = {\n          userId: item.userId,\n          name: item.name,\n          screenName: item.screenName,\n          createdAt: item.createdAt,\n          text: item.text,\n          pictureUrl: item.pictureUrl\n        };\n        this.setState({\n          conversations: this.state.conversations.concat(element)\n        });\n      });\n      this.setState({\n        isConversationsRetrieved: true\n      }, () => {\n        this.setState({\n          isLoading: false\n        });\n        this.copyOfConversations = this.state.conversations.map(x => x);\n        $(\".twitter-messages-list-persons-spinner\").css({\n          display: \"block\"\n        });\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  renderConversations() {\n    return this.state.conversations.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt)).map((conversation, index) => {\n      return React.createElement(TwitterConversationContact, {\n        userId: conversation.userId,\n        name: conversation.name,\n        screenName: conversation.screenName,\n        createdAt: conversation.createdAt,\n        text: conversation.text,\n        pictureUrl: conversation.pictureUrl,\n        setIsLoadingConversation: this.setIsLoadingConversation,\n        reRenderSingleMessages: this.reRenderSingleMessages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      });\n    });\n  }\n\n  searchInList(searchInput) {\n    this.setState({\n      isConversationsRetrieved: true,\n      conversations: this.copyOfConversations.map(x => x)\n    }, () => {\n      return this.state.conversations.map((conversation, index) => {\n        if (conversation.name.includes(searchInput) || conversation.screenName.includes(searchInput)) {\n          this.setState({\n            conversations: this.state.conversations.filter((item, i) => i === index)\n          });\n        }\n      });\n    });\n    return null;\n  }\n\n  retrieveConversations() {\n    return this.copyOfConversations.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt)).map((conversation, index) => {\n      return React.createElement(TwitterConversationContact, {\n        userId: conversation.userId,\n        name: conversation.name,\n        screenName: conversation.screenName,\n        createdAt: conversation.createdAt,\n        text: conversation.text,\n        pictureUrl: conversation.pictureUrl,\n        setIsLoadingConversation: this.setIsLoadingConversation,\n        reRenderSingleMessages: this.reRenderSingleMessages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      });\n    });\n  }\n\n  searchPeopleToConversation(e) {\n    e.preventDefault();\n    this.props.searchPeopleToConversation();\n  }\n\n  setIsConversationRetrieved(value) {\n    this.setState({\n      isConversationsRetrieved: value\n    });\n  }\n\n  setIsLoadingConversation(value, userId, name, screenName, pictureUrl) {\n    this.setState({\n      userId: ''\n    }, () => {\n      this.setState({\n        isConversationClicked: true,\n        isLoadingConversation: value,\n        userId: userId,\n        name: name,\n        screenName: screenName,\n        pictureUrl: pictureUrl\n      });\n    });\n  }\n\n  setIsChangedConversationContext(value) {\n    this.setState({\n      isChangedConversationContext: value\n    });\n  }\n\n  reRenderSingleMessages() {\n    let jwtToken = this.Auth.getRightSocialToken();\n    axios({\n      url: `${BACKEND_API_URL}/twitter/direct/messages/specified/person/${jwtToken}`,\n      method: 'POST',\n      data: JSON.stringify(this.state.userId),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      response.data.map((message, index) => {\n        let urlEntities = [];\n        let mediaEntities = [];\n        message.urlEntities.map(urlEntity => {\n          let element = urlEntity.expandedURL;\n          urlEntities.push(element);\n        });\n        message.mediaEntities.map(mediaEntity => {\n          let element = {\n            mediaUrl: mediaEntity.mediaURL,\n            type: mediaEntity.type\n          };\n          mediaEntities.push(element);\n        });\n        const singleMessage = {\n          id: message.id,\n          createdAt: message.createdAt,\n          recipientId: message.recipientId,\n          senderId: message.senderId,\n          text: message.text,\n          mediaEntities: mediaEntities,\n          urlEntities: urlEntities,\n          twitterOwnerId: message.twitterOwnerId\n        };\n        this.setState({\n          isChangedConversationContext: true,\n          directMessages: this.state.directMessages.concat(singleMessage)\n        });\n      }); // this.setState({ \n      //     isLoadingConversation: false,\n      //     isSingleMessageRetrieved: true \n      // });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  render() {\n    let isConversationsRetrieved = this.state.isConversationsRetrieved;\n    let isLoading = this.state.isLoading;\n    let isConversationClicked = this.state.isConversationClicked;\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"twitter-messages-list-inboxfalse\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-messages-title-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-messages-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, \"Messages\"), React.createElement(\"i\", {\n      className: \"far fa-envelope twitter-messages-add-icon\",\n      onClick: this.searchPeopleToConversation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    })), React.createElement(TwitterMessagesSearch, {\n      searchInList: this.searchInList,\n      retrieveConversations: this.retrieveConversations,\n      setIsConversationRetrieved: this.setIsConversationRetrieved,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"twitter-messages-list-persons-spinner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"list-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, isConversationsRetrieved && this.renderConversations()), isLoading && React.createElement(\"div\", {\n      className: \"spinner-border tfalsext-primary\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      class: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, \"Loading...\")))), React.createElement(\"div\", {\n      className: \"twitter-messages-person-invite-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, !isConversationClicked && React.createElement(\"div\", {\n      className: \"twitter-messages-person-invite\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        fontWeight: 700,\n        fontSize: '1.1vw'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, \"You don't have a message selected\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }), \"Choose one from your existing messages, or start a new one.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"twitter-message-person-btn-new-message\",\n      onClick: this.searchPeopleToConversation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, \"New message\")), isConversationClicked && React.createElement(Conversation, {\n      userId: this.state.userId,\n      pictureUrl: this.state.pictureUrl,\n      isLoadingConversation: this.state.isLoadingConversation,\n      name: this.state.name,\n      screenName: this.state.screenName,\n      directMessages: this.state.directMessages,\n      isChangedConversationContext: this.state.isChangedConversationContext,\n      setIsChangedConversationContext: this.setIsChangedConversationContext,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default TwitterMessagesInbox;","map":{"version":3,"sources":["/home/msi/Pulpit/Divelog/reactapp/src/components/twitter/twitter-messages/TwitterMessagesInbox.js"],"names":["React","AuthService","TwitterConversationContact","$","TwitterMessagesSearch","Conversation","BACKEND_API_URL","axios","TwitterMessagesInbox","Component","constructor","state","conversations","isConversationsRetrieved","copyOfConversations","isLoading","isLoadingConversation","userId","isConversationClicked","name","screenName","pictureUrl","isChangedConversationContext","directMessages","Auth","renderConversations","bind","searchInList","retrieveConversations","setIsConversationRetrieved","searchPeopleToConversation","setIsLoadingConversation","reRenderSingleMessages","setIsChangedConversationContext","componentDidMount","jwtToken","getRightSocialToken","fetch","method","headers","then","response","json","map","item","index","element","createdAt","text","setState","concat","x","css","display","catch","err","console","log","sort","a","b","Date","conversation","searchInput","includes","filter","i","e","preventDefault","props","value","url","data","JSON","stringify","message","urlEntities","mediaEntities","urlEntity","expandedURL","push","mediaEntity","mediaUrl","mediaURL","type","singleMessage","id","recipientId","senderId","twitterOwnerId","render","fontWeight","fontSize"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../../css/twitter-messages/TwitterMessagesInbox.css';\nimport AuthService from '../../../util/AuthService';\nimport TwitterConversationContact from './TwitterConversationContact';\nimport $ from 'jquery';\nimport TwitterMessagesSearch from './TwitterMessagesSearch';\nimport Conversation from './Conversation';\nimport { BACKEND_API_URL } from '../../../actions/types';\nimport axios from 'axios';\n\nclass TwitterMessagesInbox extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            conversations: [],\n            isConversationsRetrieved: false,\n            copyOfConversations: [],\n            isLoading: true,\n            isLoadingConversation: false,\n            userId: '',\n            isConversationClicked: false,\n            name: '',\n            screenName: '',\n            pictureUrl: '',\n            isChangedConversationContext: false,\n            directMessages: []\n        }\n        this.Auth = new AuthService();\n        this.copyOfConversations = [];\n        this.renderConversations = this.renderConversations.bind(this);\n        this.searchInList = this.searchInList.bind(this);\n        this.retrieveConversations = this.retrieveConversations.bind(this);\n        this.setIsConversationRetrieved = this.setIsConversationRetrieved.bind(this);\n        this.searchPeopleToConversation = this.searchPeopleToConversation.bind(this);\n        this.setIsLoadingConversation = this.setIsLoadingConversation.bind(this);\n        this.reRenderSingleMessages = this.reRenderSingleMessages.bind(this);\n        this.setIsChangedConversationContext = this.setIsChangedConversationContext.bind(this);\n    }\n\n    componentDidMount() {\n        let jwtToken = this.Auth.getRightSocialToken();\n\n        fetch(`${BACKEND_API_URL}/twitter/direct/messages/${jwtToken}`, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }\n        }).then(response => { return response.json() })\n        .then(json => {\n            json.map((item, index) => {\n                const element = {\n                    userId: item.userId,\n                    name: item.name,\n                    screenName: item.screenName,\n                    createdAt: item.createdAt,\n                    text: item.text,\n                    pictureUrl: item.pictureUrl\n                }\n                this.setState({ conversations: this.state.conversations.concat(element) });\n            });\n            this.setState({ isConversationsRetrieved: true }, () => {\n                this.setState({ isLoading: false });\n                this.copyOfConversations = this.state.conversations.map((x) => x);\n                $(\".twitter-messages-list-persons-spinner\").css({ display: \"block\" });\n            });\n        }).catch(err => {\n            console.log(err);\n        });\n    }\n\n    renderConversations() {\n        return this.state.conversations\n            .sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt))\n            .map((conversation, index) => {\n            return (\n                <TwitterConversationContact \n                    userId={conversation.userId}\n                    name={conversation.name}\n                    screenName={conversation.screenName}\n                    createdAt={conversation.createdAt}\n                    text={conversation.text}\n                    pictureUrl={conversation.pictureUrl}\n                    setIsLoadingConversation={this.setIsLoadingConversation}\n                    reRenderSingleMessages={this.reRenderSingleMessages}\n                />\n            );\n        });\n    }\n\n    searchInList(searchInput) {\n        this.setState({ \n            isConversationsRetrieved: true,\n            conversations: this.copyOfConversations.map((x) => x)\n        \n        }, () => {\n            return this.state.conversations.map((conversation, index) => {\n                if(conversation.name.includes(searchInput) || conversation.screenName.includes(searchInput)) {\n                    this.setState({ conversations: this.state.conversations.filter((item, i) => i === index)});\n                }\n            });\n        });\n        return null;\n    }\n\n    retrieveConversations() {\n        return this.copyOfConversations\n            .sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt))\n            .map((conversation, index) => {\n            return (\n                <TwitterConversationContact \n                    userId={conversation.userId}\n                    name={conversation.name}\n                    screenName={conversation.screenName}\n                    createdAt={conversation.createdAt}\n                    text={conversation.text}\n                    pictureUrl={conversation.pictureUrl}\n                    setIsLoadingConversation={this.setIsLoadingConversation}\n                    reRenderSingleMessages={this.reRenderSingleMessages}\n                />\n            );\n        });\n    }\n\n    searchPeopleToConversation(e) {\n        e.preventDefault();\n        this.props.searchPeopleToConversation();\n    }\n\n    setIsConversationRetrieved(value) {\n        this.setState({ isConversationsRetrieved: value });\n    }\n\n    setIsLoadingConversation(value, userId, name, screenName, pictureUrl) {\n        this.setState({\n            userId: ''\n        }, () => {\n            this.setState({ \n                isConversationClicked: true,\n                isLoadingConversation: value,\n                userId: userId,\n                name: name,\n                screenName: screenName,\n                pictureUrl: pictureUrl\n            });\n        })\n    }\n\n    setIsChangedConversationContext(value) {\n        this.setState({ isChangedConversationContext: value });\n    }\n\n    reRenderSingleMessages() {\n        let jwtToken = this.Auth.getRightSocialToken();\n\n        axios({\n            url: `${BACKEND_API_URL}/twitter/direct/messages/specified/person/${jwtToken}`,\n            method: 'POST',\n            data: JSON.stringify(this.state.userId),\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }\n        }).then(response => {\n            response.data.map((message, index) => {\n                let urlEntities = [];\n                let mediaEntities = [];\n\n                message.urlEntities.map((urlEntity) => {\n                    let element = urlEntity.expandedURL;\n                    urlEntities.push(element);\n                });\n\n                message.mediaEntities.map((mediaEntity) => {\n                    let element = {\n                        mediaUrl: mediaEntity.mediaURL,\n                        type: mediaEntity.type\n                    }\n                    mediaEntities.push(element);\n                });\n                const singleMessage = {\n                    id: message.id,\n                    createdAt: message.createdAt,\n                    recipientId: message.recipientId,\n                    senderId: message.senderId,\n                    text: message.text,\n                    mediaEntities: mediaEntities,\n                    urlEntities: urlEntities,\n                    twitterOwnerId: message.twitterOwnerId\n                }\n                this.setState({ \n                    isChangedConversationContext: true,\n                    directMessages: this.state.directMessages.concat(singleMessage)\n                });\n            });\n            // this.setState({ \n            //     isLoadingConversation: false,\n            //     isSingleMessageRetrieved: true \n            // });\n        }).catch(err => {\n            console.log(err);\n        });\n    }\n\n    render() {\n        let isConversationsRetrieved = this.state.isConversationsRetrieved;\n        let isLoading = this.state.isLoading;\n        let isConversationClicked = this.state.isConversationClicked;\n        return (\n            <>\n                <div className=\"twitter-messages-list-inboxfalse\">\n                    <div className=\"twitter-messages-title-box\">\n                        <div className=\"twitter-messages-title\">Messages</div>\n                        <i \n                            className=\"far fa-envelope twitter-messages-add-icon\" \n                            onClick={this.searchPeopleToConversation}\n                        ></i>\n                    </div>\n                    <TwitterMessagesSearch \n                        searchInList={this.searchInList}\n                        retrieveConversations={this.retrieveConversations}\n                        setIsConversationRetrieved={this.setIsConversationRetrieved}\n                    />\n                    <div className=\"twitter-messages-list-persons-spinner\">\n                        <ul className=\"list-group\">\n                            { isConversationsRetrieved && this.renderConversations() }\n                            {/* { !isConversationsRetrieved && this.retrieveConversations() } */}\n                        </ul>\n                        { isLoading &&\n                            <div \n                                className='spinner-border tfalsext-primary' \n                                role='status'\n                            >\n                                <span class='sr-only'>\n                                    Loading...\n                                </span>\n                            </div>\n                        }\n                    </div>\n                </div>\n                <div className=\"twitter-messages-person-invite-wrapper\">\n                    { !isConversationClicked &&\n                        <div className=\"twitter-messages-person-invite\">\n                            <span style={{ fontWeight: 700, fontSize: '1.1vw' }}>You don't have a message selected</span>\n                            <br />\n                            Choose one from your existing messages, or start a new one.\n                            <br />\n                            <button \n                                className=\"twitter-message-person-btn-new-message\"\n                                onClick={this.searchPeopleToConversation}\n                            >\n                                New message\n                            </button>\n                        </div>\n                    }\n                    { isConversationClicked &&\n                        <Conversation \n                            userId={this.state.userId}\n                            pictureUrl={this.state.pictureUrl}\n                            isLoadingConversation={this.state.isLoadingConversation}\n                            name={this.state.name}\n                            screenName={this.state.screenName}\n                            directMessages={this.state.directMessages}\n                            isChangedConversationContext={this.state.isChangedConversationContext}\n                            setIsChangedConversationContext={this.setIsChangedConversationContext}\n                        />\n                    }\n                </div>\n            </>\n        );\n    }\n}\n\nexport default TwitterMessagesInbox;"]},"metadata":{},"sourceType":"module"}