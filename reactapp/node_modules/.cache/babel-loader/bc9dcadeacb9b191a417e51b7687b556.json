{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/divelog/react-divelog/src/components/twitter/AvailableTrends.js\";\nimport React from 'react';\nimport '../../css/AvailableTrends.css';\nimport AuthService from '../../util/AuthService';\n\nclass AvailableTrends extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      longitude: 0.0,\n      latitude: 0.0,\n      isGeolocationRejected: false\n    };\n    this.Auth = new AuthService();\n    this.twitterJwtToken = this.Auth.getTwitterToken();\n  }\n\n  componentDidMount() {\n    let latitude = this.state.latitude;\n    let longitude = this.state.longitude;\n\n    if (!navigator.geolocation) {\n      this.setState({\n        isGeolocationRejected: true\n      });\n    } else {\n      navigator.geolocation.getCurrentPosition(this.success, this.error);\n    }\n\n    fetch(\"/twitter/available/trends/\".concat(this.state.latitude, \"/\").concat(this.state.longitude, \"/\").concat(this.twitterJwtToken), {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'content-type': 'application/json'\n      }\n    }).then(response => response.json()).then(json => {\n      console.log(json);\n    });\n  }\n\n  error() {\n    alert(\"Unable to retrieve your location\");\n  }\n\n  success(position) {\n    alert(position.coords.latitude);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"list-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"geolocation-twitter-trends-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default AvailableTrends;","map":{"version":3,"sources":["/home/huber/Pulpit/divelog/react-divelog/src/components/twitter/AvailableTrends.js"],"names":["React","AuthService","AvailableTrends","Component","constructor","props","state","longitude","latitude","isGeolocationRejected","Auth","twitterJwtToken","getTwitterToken","componentDidMount","navigator","geolocation","setState","getCurrentPosition","success","error","fetch","method","headers","then","response","json","console","log","alert","position","coords","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,+BAAP;AACA,OAAOC,WAAP,MAAwB,wBAAxB;;AAEA,MAAMC,eAAN,SAA8BF,KAAK,CAACG,SAApC,CAA8C;AAC1CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAE,GADF;AAETC,MAAAA,QAAQ,EAAE,GAFD;AAGTC,MAAAA,qBAAqB,EAAE;AAHd,KAAb;AAKA,SAAKC,IAAL,GAAY,IAAIT,WAAJ,EAAZ;AACA,SAAKU,eAAL,GAAuB,KAAKD,IAAL,CAAUE,eAAV,EAAvB;AACH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,QAAIL,QAAQ,GAAG,KAAKF,KAAL,CAAWE,QAA1B;AACA,QAAID,SAAS,GAAG,KAAKD,KAAL,CAAWC,SAA3B;;AACA,QAAG,CAACO,SAAS,CAACC,WAAd,EAA2B;AACvB,WAAKC,QAAL,CAAc;AAAEP,QAAAA,qBAAqB,EAAE;AAAzB,OAAd;AACH,KAFD,MAEO;AACHK,MAAAA,SAAS,CAACC,WAAV,CAAsBE,kBAAtB,CAAyC,KAAKC,OAA9C,EAAuD,KAAKC,KAA5D;AACH;;AACDC,IAAAA,KAAK,qCAA8B,KAAKd,KAAL,CAAWE,QAAzC,cAAqD,KAAKF,KAAL,CAAWC,SAAhE,cAA6E,KAAKI,eAAlF,GAAqG;AACtGU,MAAAA,MAAM,EAAE,KAD8F;AAEtGC,MAAAA,OAAO,EAAE;AACL,kBAAU,mCADL;AAEL,wBAAgB;AAFX;AAF6F,KAArG,CAAL,CAMGC,IANH,CAMQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANpB,EAOCF,IAPD,CAOME,IAAI,IAAI;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACH,KATD;AAUH;;AAEDN,EAAAA,KAAK,GAAG;AACJS,IAAAA,KAAK,CAAC,kCAAD,CAAL;AACH;;AAEDV,EAAAA,OAAO,CAACW,QAAD,EAAW;AACdD,IAAAA,KAAK,CAACC,QAAQ,CAACC,MAAT,CAAgBtB,QAAjB,CAAL;AACH;;AAGDuB,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,gCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,CADJ;AASH;;AApDyC;;AAuD9C,eAAe7B,eAAf","sourcesContent":["import React from 'react';\nimport '../../css/AvailableTrends.css';\nimport AuthService from '../../util/AuthService';\n\nclass AvailableTrends extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            longitude: 0.0,\n            latitude: 0.0,\n            isGeolocationRejected: false\n        }\n        this.Auth = new AuthService();\n        this.twitterJwtToken = this.Auth.getTwitterToken();\n    }\n\n    componentDidMount() {\n        let latitude = this.state.latitude;\n        let longitude = this.state.longitude\n        if(!navigator.geolocation) {\n            this.setState({ isGeolocationRejected: true });\n        } else {\n            navigator.geolocation.getCurrentPosition(this.success, this.error);\n        }\n        fetch(`/twitter/available/trends/${this.state.latitude}/${this.state.longitude}/${this.twitterJwtToken}`, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'content-type': 'application/json'\n            }\n        }).then(response => response.json())\n        .then(json => {\n            console.log(json);\n        });\n    }\n\n    error() {\n        alert(\"Unable to retrieve your location\")\n    }\n\n    success(position) {\n        alert(position.coords.latitude);\n    }\n\n\n    render() {\n        return (\n            <div>\n                <ul className=\"list-group\">\n                    <div className=\"geolocation-twitter-trends-box\">\n                        \n                    </div>\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default AvailableTrends;"]},"metadata":{},"sourceType":"module"}