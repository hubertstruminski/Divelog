{"ast":null,"code":"var _jsxFileName = \"/home/msi/Pulpit/Divelog/reactapp/src/components/twitter/twitter-messages/TwitterMessagesInbox.js\";\nimport React from 'react';\nimport '../../../css/twitter-messages/TwitterMessagesInbox.css';\nimport AuthService from '../../../util/AuthService';\nimport TwitterConversationContact from './TwitterConversationContact';\nimport $ from 'jquery';\nimport TwitterMessagesSearch from './TwitterMessagesSearch';\nimport Conversation from './Conversation';\nimport { BACKEND_API_URL } from '../../../actions/types';\n\nclass TwitterMessagesInbox extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      conversations: [],\n      isConversationsRetrieved: false,\n      copyOfConversations: [],\n      isLoading: true,\n      isLoadingConversation: false,\n      userId: '',\n      isConversationClicked: false,\n      name: '',\n      screenName: '',\n      pictureUrl: '',\n      isChangedConversationContext: false,\n      directMessages: [],\n      isRateLimitExceeded: false\n    };\n    this.isError = false;\n    this.child = React.createRef();\n    this.Auth = new AuthService();\n    this.copyOfConversations = [];\n    this.renderConversations = this.renderConversations.bind(this);\n    this.searchInList = this.searchInList.bind(this);\n    this.retrieveConversations = this.retrieveConversations.bind(this);\n    this.setIsConversationRetrieved = this.setIsConversationRetrieved.bind(this);\n    this.searchPeopleToConversation = this.searchPeopleToConversation.bind(this);\n    this.setIsLoadingConversation = this.setIsLoadingConversation.bind(this);\n    this.reRenderSingleMessages = this.reRenderSingleMessages.bind(this);\n    this.setIsChangedConversationContext = this.setIsChangedConversationContext.bind(this);\n  }\n\n  componentDidMount() {\n    let jwtToken = this.Auth.getRightSocialToken();\n    fetch(`${BACKEND_API_URL}/twitter/direct/messages/${jwtToken}`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      if (response.status === 429) {\n        this.setState({\n          isRateLimitExceeded: true,\n          isLoading: false\n        });\n        this.isError = true;\n        return;\n      }\n\n      return response.json();\n    }).then(json => {\n      if (!this.isError) {\n        json.map((item, index) => {\n          const element = {\n            userId: item.userId,\n            name: item.name,\n            screenName: item.screenName,\n            createdAt: item.createdAt,\n            text: item.text,\n            pictureUrl: item.pictureUrl\n          };\n          this.setState({\n            conversations: this.state.conversations.concat(element)\n          });\n        });\n        this.setState({\n          isConversationsRetrieved: true\n        }, () => {\n          this.setState({\n            isLoading: false\n          });\n          this.copyOfConversations = this.state.conversations.map(x => x);\n          $(\".twitter-messages-list-persons-spinner\").css({\n            display: \"block\"\n          });\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  renderConversations() {\n    return this.state.conversations.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt)).map((conversation, index) => {\n      return React.createElement(TwitterConversationContact, {\n        userId: conversation.userId,\n        name: conversation.name,\n        screenName: conversation.screenName,\n        createdAt: conversation.createdAt,\n        text: conversation.text,\n        pictureUrl: conversation.pictureUrl,\n        setIsLoadingConversation: this.setIsLoadingConversation,\n        reRenderSingleMessages: this.reRenderSingleMessages,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      });\n    });\n  }\n\n  searchInList(searchInput) {\n    this.setState({\n      isConversationsRetrieved: true,\n      conversations: this.copyOfConversations.map(x => x)\n    }, () => {\n      return this.state.conversations.map((conversation, index) => {\n        if (conversation.name.includes(searchInput) || conversation.screenName.includes(searchInput)) {\n          this.setState({\n            conversations: this.state.conversations.filter((item, i) => i === index)\n          });\n        }\n      });\n    });\n    return null;\n  }\n\n  retrieveConversations() {\n    return this.copyOfConversations.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt)).map((conversation, index) => {\n      return React.createElement(TwitterConversationContact, {\n        userId: conversation.userId,\n        name: conversation.name,\n        screenName: conversation.screenName,\n        createdAt: conversation.createdAt,\n        text: conversation.text,\n        pictureUrl: conversation.pictureUrl,\n        setIsLoadingConversation: this.setIsLoadingConversation,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      });\n    });\n  }\n\n  searchPeopleToConversation(e) {\n    e.preventDefault();\n    this.props.searchPeopleToConversation();\n  }\n\n  setIsConversationRetrieved(value) {\n    this.setState({\n      isConversationsRetrieved: value\n    });\n  }\n\n  setIsLoadingConversation(value, userId, name, screenName, pictureUrl) {\n    this.setState({\n      isConversationClicked: true,\n      isLoadingConversation: value,\n      userId: userId,\n      name: name,\n      screenName: screenName,\n      pictureUrl: pictureUrl\n    }, () => {\n      this.child.current.retrieveSingleMessages();\n    });\n  }\n\n  setIsChangedConversationContext(value) {\n    this.setState({\n      isChangedConversationContext: value\n    });\n  }\n\n  render() {\n    let isConversationsRetrieved = this.state.isConversationsRetrieved;\n    let isLoading = this.state.isLoading;\n    let isConversationClicked = this.state.isConversationClicked;\n    let isRateLimitExceeded = this.state.isRateLimitExceeded;\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"twitter-messages-list-inboxfalse\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-messages-title-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-messages-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, \"Messages\"), React.createElement(\"i\", {\n      className: \"far fa-envelope twitter-messages-add-icon\",\n      onClick: this.searchPeopleToConversation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    })), React.createElement(TwitterMessagesSearch, {\n      searchInList: this.searchInList,\n      retrieveConversations: this.retrieveConversations,\n      setIsConversationRetrieved: this.setIsConversationRetrieved,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"twitter-messages-list-persons-spinner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"list-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, isConversationsRetrieved && this.renderConversations()), isLoading && React.createElement(\"div\", {\n      className: \"spinner-border tfalsext-primary\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      class: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, \"Loading...\")), isRateLimitExceeded && React.createElement(\"span\", {\n      style: {\n        color: \"red\",\n        fontSize: \"0.65vw\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, \"Twitter rate limit exceeded.\"))), React.createElement(\"div\", {\n      className: \"twitter-messages-person-invite-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, !isConversationClicked && React.createElement(\"div\", {\n      className: \"twitter-messages-person-invite\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        fontWeight: 700,\n        fontSize: '1.1vw'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, \"You don't have a message selected\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }), \"Choose one from your existing messages, or start a new one.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"twitter-message-person-btn-new-message\",\n      onClick: this.searchPeopleToConversation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, \"New message\")), isConversationClicked && React.createElement(Conversation, {\n      userId: this.state.userId,\n      pictureUrl: this.state.pictureUrl,\n      isLoadingConversation: this.state.isLoadingConversation,\n      name: this.state.name,\n      screenName: this.state.screenName,\n      ref: this.child,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default TwitterMessagesInbox;","map":{"version":3,"sources":["/home/msi/Pulpit/Divelog/reactapp/src/components/twitter/twitter-messages/TwitterMessagesInbox.js"],"names":["React","AuthService","TwitterConversationContact","$","TwitterMessagesSearch","Conversation","BACKEND_API_URL","TwitterMessagesInbox","Component","constructor","state","conversations","isConversationsRetrieved","copyOfConversations","isLoading","isLoadingConversation","userId","isConversationClicked","name","screenName","pictureUrl","isChangedConversationContext","directMessages","isRateLimitExceeded","isError","child","createRef","Auth","renderConversations","bind","searchInList","retrieveConversations","setIsConversationRetrieved","searchPeopleToConversation","setIsLoadingConversation","reRenderSingleMessages","setIsChangedConversationContext","componentDidMount","jwtToken","getRightSocialToken","fetch","method","headers","then","response","status","setState","json","map","item","index","element","createdAt","text","concat","x","css","display","catch","err","console","log","sort","a","b","Date","conversation","searchInput","includes","filter","i","e","preventDefault","props","value","current","retrieveSingleMessages","render","color","fontSize","fontWeight"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../../css/twitter-messages/TwitterMessagesInbox.css';\nimport AuthService from '../../../util/AuthService';\nimport TwitterConversationContact from './TwitterConversationContact';\nimport $ from 'jquery';\nimport TwitterMessagesSearch from './TwitterMessagesSearch';\nimport Conversation from './Conversation';\nimport { BACKEND_API_URL } from '../../../actions/types';\n\nclass TwitterMessagesInbox extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            conversations: [],\n            isConversationsRetrieved: false,\n            copyOfConversations: [],\n            isLoading: true,\n            isLoadingConversation: false,\n            userId: '',\n            isConversationClicked: false,\n            name: '',\n            screenName: '',\n            pictureUrl: '',\n            isChangedConversationContext: false,\n            directMessages: [],\n            isRateLimitExceeded: false\n        }\n        this.isError = false;\n        this.child = React.createRef();\n\n        this.Auth = new AuthService();\n        this.copyOfConversations = [];\n        this.renderConversations = this.renderConversations.bind(this);\n        this.searchInList = this.searchInList.bind(this);\n        this.retrieveConversations = this.retrieveConversations.bind(this);\n        this.setIsConversationRetrieved = this.setIsConversationRetrieved.bind(this);\n        this.searchPeopleToConversation = this.searchPeopleToConversation.bind(this);\n        this.setIsLoadingConversation = this.setIsLoadingConversation.bind(this);\n        this.reRenderSingleMessages = this.reRenderSingleMessages.bind(this);\n        this.setIsChangedConversationContext = this.setIsChangedConversationContext.bind(this);\n    }\n\n    componentDidMount() {\n        let jwtToken = this.Auth.getRightSocialToken();\n\n        fetch(`${BACKEND_API_URL}/twitter/direct/messages/${jwtToken}`, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }\n        }).then(response => { \n            if(response.status === 429) {\n                this.setState({ \n                    isRateLimitExceeded: true,\n                    isLoading: false\n                });\n                this.isError = true;\n                return;\n            }\n            return response.json()\n        }).then(json => {\n            if(!this.isError) {\n                json.map((item, index) => {\n                    const element = {\n                        userId: item.userId,\n                        name: item.name,\n                        screenName: item.screenName,\n                        createdAt: item.createdAt,\n                        text: item.text,\n                        pictureUrl: item.pictureUrl\n                    }\n                    this.setState({ conversations: this.state.conversations.concat(element) });\n                });\n                this.setState({ isConversationsRetrieved: true }, () => {\n                    this.setState({ isLoading: false });\n                    this.copyOfConversations = this.state.conversations.map((x) => x);\n                    $(\".twitter-messages-list-persons-spinner\").css({ display: \"block\" });\n                });\n            }\n        }).catch(err => {\n            console.log(err);\n        });\n    }\n\n    renderConversations() {\n        return this.state.conversations\n            .sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt))\n            .map((conversation, index) => {\n            return (\n                <TwitterConversationContact \n                    userId={conversation.userId}\n                    name={conversation.name}\n                    screenName={conversation.screenName}\n                    createdAt={conversation.createdAt}\n                    text={conversation.text}\n                    pictureUrl={conversation.pictureUrl}\n                    setIsLoadingConversation={this.setIsLoadingConversation}\n                    reRenderSingleMessages={this.reRenderSingleMessages}\n                />\n            );\n        });\n    }\n\n    searchInList(searchInput) {\n        this.setState({ \n            isConversationsRetrieved: true,\n            conversations: this.copyOfConversations.map((x) => x)\n        \n        }, () => {\n            return this.state.conversations.map((conversation, index) => {\n                if(conversation.name.includes(searchInput) || conversation.screenName.includes(searchInput)) {\n                    this.setState({ conversations: this.state.conversations.filter((item, i) => i === index)});\n                }\n            });\n        });\n        return null;\n    }\n\n    retrieveConversations() {\n        return this.copyOfConversations\n            .sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt))\n            .map((conversation, index) => {\n            return (\n                <TwitterConversationContact \n                    userId={conversation.userId}\n                    name={conversation.name}\n                    screenName={conversation.screenName}\n                    createdAt={conversation.createdAt}\n                    text={conversation.text}\n                    pictureUrl={conversation.pictureUrl}\n                    setIsLoadingConversation={this.setIsLoadingConversation}\n                />\n            );\n        });\n    }\n\n    searchPeopleToConversation(e) {\n        e.preventDefault();\n        this.props.searchPeopleToConversation();\n    }\n\n    setIsConversationRetrieved(value) {\n        this.setState({ isConversationsRetrieved: value });\n    }\n\n    setIsLoadingConversation(value, userId, name, screenName, pictureUrl) {\n        this.setState({ \n            isConversationClicked: true,\n            isLoadingConversation: value,\n            userId: userId,\n            name: name,\n            screenName: screenName,\n            pictureUrl: pictureUrl\n        }, () => {\n            this.child.current.retrieveSingleMessages();\n        });\n    }\n\n    setIsChangedConversationContext(value) {\n        this.setState({ isChangedConversationContext: value });\n    }\n\n    render() {\n        let isConversationsRetrieved = this.state.isConversationsRetrieved;\n        let isLoading = this.state.isLoading;\n        let isConversationClicked = this.state.isConversationClicked;\n        let isRateLimitExceeded = this.state.isRateLimitExceeded;\n        return (\n            <>\n                <div className=\"twitter-messages-list-inboxfalse\">\n                    <div className=\"twitter-messages-title-box\">\n                        <div className=\"twitter-messages-title\">Messages</div>\n                        <i \n                            className=\"far fa-envelope twitter-messages-add-icon\" \n                            onClick={this.searchPeopleToConversation}\n                        ></i>\n                    </div>\n                    <TwitterMessagesSearch \n                        searchInList={this.searchInList}\n                        retrieveConversations={this.retrieveConversations}\n                        setIsConversationRetrieved={this.setIsConversationRetrieved}\n                    />\n                    <div className=\"twitter-messages-list-persons-spinner\">\n                        <ul className=\"list-group\">\n                            { isConversationsRetrieved && this.renderConversations() }\n                            {/* { !isConversationsRetrieved && this.retrieveConversations() } */}\n                        </ul>\n                        { isLoading &&\n                            <div \n                                className='spinner-border tfalsext-primary' \n                                role='status'\n                            >\n                                <span class='sr-only'>\n                                    Loading...\n                                </span>\n                            </div>\n                        }\n                        {\n                            isRateLimitExceeded &&\n                            <span style={{ color: \"red\", fontSize: \"0.65vw\" }}>Twitter rate limit exceeded.</span>\n                        }\n                    </div>\n                </div>\n                <div className=\"twitter-messages-person-invite-wrapper\">\n                    { !isConversationClicked &&\n                        <div className=\"twitter-messages-person-invite\">\n                            <span style={{ fontWeight: 700, fontSize: '1.1vw' }}>You don't have a message selected</span>\n                            <br />\n                            Choose one from your existing messages, or start a new one.\n                            <br />\n                            <button \n                                className=\"twitter-message-person-btn-new-message\"\n                                onClick={this.searchPeopleToConversation}\n                            >\n                                New message\n                            </button>\n                        </div>\n                    }\n                    { isConversationClicked &&\n                        <Conversation \n                            userId={this.state.userId}\n                            pictureUrl={this.state.pictureUrl}\n                            isLoadingConversation={this.state.isLoadingConversation}\n                            name={this.state.name}\n                            screenName={this.state.screenName}\n                            ref={this.child}\n                        />\n                    }\n                </div>\n            </>\n        );\n    }\n}\n\nexport default TwitterMessagesInbox;"]},"metadata":{},"sourceType":"module"}