{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/divelog/react-divelog/src/components/twitter/TwitterHome.js\";\nimport React from 'react';\nimport '../../css/TimelineLikes.css';\nimport withAuth from '../../util/withAuth';\nimport AuthService from '../../util/AuthService';\nimport TwitterCategoriesCard from './../twitter/TwitterCategoriesCard';\nimport SearchTwitterPeople from './../twitter/SearchTwitterPeople';\nimport AvailableTrends from './../twitter/AvailableTrends';\nimport TwitterFriendsList from './../twitter/TwitterFriendsList';\nimport $ from 'jquery';\n\nclass TwitterHome extends React.Component {\n  constructor(props) {\n    super(props);\n    this.isMountedTwitter = false;\n    this.state = {\n      accessToken: '',\n      email: '',\n      name: '',\n      userID: '',\n      pictureUrl: '',\n      providerId: '',\n      screenName: '',\n      tokenSecret: '',\n      tweets: [],\n      isTweetsRetrieved: false\n    };\n    this.Auth = new AuthService();\n    this.renderTweets = this.renderTweets.bind(this);\n  }\n\n  componentDidMount() {\n    this.isMountedTwitter = true;\n    this.isMountedTwitter && window.twttr.widgets.load(document.getElementById(\"home-tweets-container\"));\n    let jwtToken = this.Auth.getRightSocialToken();\n    fetch(\"/getuserdata/\".concat(jwtToken), {\n      method: 'GET',\n      headers: {\n        'content-type': 'application/json'\n      }\n    }).then(response => response.json()).then(jsonData => {\n      if (this.isMountedTwitter) {\n        this.setState({\n          accessToken: jsonData.accessToken,\n          email: jsonData.email,\n          name: jsonData.name,\n          twitterUserID: jsonData.twitterUserID,\n          pictureUrl: jsonData.pictureUrl,\n          providerId: jsonData.providerId,\n          screenName: jsonData.screenName,\n          tokenSecret: jsonData.tokenSecret\n        }, () => {\n          fetch(\"/twitter/home/timeline/\".concat(jwtToken), {\n            method: 'GET',\n            headers: {\n              'content-type': 'application/json'\n            }\n          }).then(response => response.json()).then(json => {\n            json.map((tweet, index) => {\n              this.setState({\n                tweets: this.state.tweets.concat(tweet.id)\n              });\n            });\n            this.setState({\n              isTweetsRetrieved: true\n            }); // json.map((tweetHtml, index) => {\n            //     this.setState({ tweets: this.state.tweets.concat(tweetHtml) });\n            // });\n            // this.setState({ isTweetsRetrieved: true });\n            // json.map((tweet, index) => {\n            //     console.log(tweet.id);\n            //     window.twttr.events.bind(\n            //         'loaded',\n            //         function(twttr) {\n            //             console.log(twttr);\n            //         twttr.widgets.createTweet(\n            //             tweet.id,\n            //             document.getElementById('home-tweets-container'),\n            //             {\n            //                 theme: 'dark'\n            //             }\n            //         ).then(function(response) {\n            //             console.log(response);\n            //         });\n            //     });\n            // })\n          });\n        });\n      }\n    });\n  }\n\n  renderTweets() {\n    // let content = \"\";\n    // this.state.tweets.map((tweetHtml, index) => {\n    //     content += tweetHtml;\n    // });\n    // $(\".tweets-likes-container\").html(content);\n    // $(\".twitter-tweet-rendered\").css({ \"width\": \"100%\" });\n    this.state.tweets.map((id, index) => {\n      window.twttr.events.bind('loaded', function (twttr) {\n        console.log(twttr);\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.isMountedTwitter = false;\n  }\n\n  render() {\n    let isTweetsRetrieved = this.state.isTweetsRetrieved;\n    return React.createElement(\"div\", {\n      className: \"twitter-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-grid-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-grid-item-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-left-categories-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-profil-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, this.state.name), React.createElement(TwitterCategoriesCard, {\n      pictureUrl: this.state.pictureUrl,\n      screenName: this.state.screenName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"feed-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"home-tweets-container\",\n      className: \"tweets-likes-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, isTweetsRetrieved && this.renderTweets())), React.createElement(\"div\", {\n      className: \"twitter-grid-item-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-rl-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-groups-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(SearchTwitterPeople, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }), React.createElement(AvailableTrends, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"twitter-rr-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-friends-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default withAuth(TwitterHome, {\n  twitterHome: true\n});","map":{"version":3,"sources":["/home/huber/Pulpit/divelog/react-divelog/src/components/twitter/TwitterHome.js"],"names":["React","withAuth","AuthService","TwitterCategoriesCard","SearchTwitterPeople","AvailableTrends","TwitterFriendsList","$","TwitterHome","Component","constructor","props","isMountedTwitter","state","accessToken","email","name","userID","pictureUrl","providerId","screenName","tokenSecret","tweets","isTweetsRetrieved","Auth","renderTweets","bind","componentDidMount","window","twttr","widgets","load","document","getElementById","jwtToken","getRightSocialToken","fetch","method","headers","then","response","json","jsonData","setState","twitterUserID","map","tweet","index","concat","id","events","console","log","componentWillUnmount","render","twitterHome"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../css/TimelineLikes.css';\nimport withAuth from '../../util/withAuth';\nimport AuthService from '../../util/AuthService';\nimport TwitterCategoriesCard from './../twitter/TwitterCategoriesCard';\nimport SearchTwitterPeople from './../twitter/SearchTwitterPeople';\nimport AvailableTrends from './../twitter/AvailableTrends';\nimport TwitterFriendsList from './../twitter/TwitterFriendsList';\nimport $ from 'jquery';\n\nclass TwitterHome extends React.Component {\n    isMountedTwitter = false;\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            accessToken: '',\n            email: '',\n            name: '',\n            userID: '',\n            pictureUrl: '',\n            providerId: '',\n            screenName: '',\n            tokenSecret: '',\n            tweets: [],\n            isTweetsRetrieved: false\n        }\n        this.Auth = new AuthService();\n        this.renderTweets = this.renderTweets.bind(this);\n    }\n\n    componentDidMount() {\n        this.isMountedTwitter = true;\n\n        this.isMountedTwitter && window.twttr.widgets.load(document.getElementById(\"home-tweets-container\"));\n        let jwtToken = this.Auth.getRightSocialToken();\n\n        fetch(`/getuserdata/${jwtToken}`, {\n            method: 'GET',\n            headers: {\n              'content-type': 'application/json'\n            }\n        })\n        .then(response => response.json())\n        .then(jsonData => {\n            if(this.isMountedTwitter) {\n                this.setState({\n                    accessToken: jsonData.accessToken,\n                    email: jsonData.email,\n                    name: jsonData.name,\n                    twitterUserID: jsonData.twitterUserID,\n                    pictureUrl: jsonData.pictureUrl,\n                    providerId: jsonData.providerId,\n                    screenName: jsonData.screenName,\n                    tokenSecret: jsonData.tokenSecret\n                }, () => {\n                    fetch(`/twitter/home/timeline/${jwtToken}`, {\n                        method: 'GET',\n                        headers: {\n                            'content-type': 'application/json'\n                        }\n                    }).then(response => response.json())\n                    .then(json => {\n                        json.map((tweet, index) => {\n                            this.setState({ tweets: this.state.tweets.concat(tweet.id) });\n                        });\n                        this.setState({ isTweetsRetrieved: true });\n                        // json.map((tweetHtml, index) => {\n                        //     this.setState({ tweets: this.state.tweets.concat(tweetHtml) });\n                        // });\n                        // this.setState({ isTweetsRetrieved: true });\n                        // json.map((tweet, index) => {\n                        //     console.log(tweet.id);\n                        //     window.twttr.events.bind(\n                        //         'loaded',\n                        //         function(twttr) {\n                        //             console.log(twttr);\n                        //         twttr.widgets.createTweet(\n                        //             tweet.id,\n                        //             document.getElementById('home-tweets-container'),\n                        //             {\n                        //                 theme: 'dark'\n                        //             }\n                        //         ).then(function(response) {\n                        //             console.log(response);\n                        //         });\n                        //     });\n                        // })\n                    });\n                });\n            }\n        }); \n    }\n\n    renderTweets() {\n        // let content = \"\";\n        // this.state.tweets.map((tweetHtml, index) => {\n        //     content += tweetHtml;\n        // });\n        // $(\".tweets-likes-container\").html(content);\n        // $(\".twitter-tweet-rendered\").css({ \"width\": \"100%\" });\n        \n        this.state.tweets.map((id, index) => {\n            window.twttr.events.bind(\n                'loaded',\n                function(twttr) {\n                    console.log(twttr);\n                }\n            );\n        });\n        \n        \n        \n    }\n\n    componentWillUnmount() {\n        this.isMountedTwitter = false;\n    }\n\n    render() {\n        let isTweetsRetrieved = this.state.isTweetsRetrieved;\n\n        return (\n            <div className=\"twitter-container\">\n                <div className=\"twitter-grid-container\">\n                    <div className=\"twitter-grid-item-1\">\n                        <div className=\"twitter-left-categories-container\">\n                            <div className=\"twitter-profil-container\">\n                                { this.state.name }\n                            </div>\n                            <TwitterCategoriesCard\n                                pictureUrl={this.state.pictureUrl}\n                                screenName={this.state.screenName}\n                            />    \n                        </div>\n                    </div>\n                    <div className=\"feed-container\">\n                        <div id=\"home-tweets-container\" className=\"tweets-likes-container\">\n                            { isTweetsRetrieved && this.renderTweets() }\n                        </div>\n                    </div>\n                    <div className=\"twitter-grid-item-3\">\n                        <div className=\"twitter-rl-container\">\n                            <div className=\"twitter-groups-container\">\n                                <SearchTwitterPeople />\n                                <AvailableTrends />\n                            </div>\n                        </div>\n                        <div className=\"twitter-rr-container\">\n                            <div className=\"twitter-friends-container\">\n                                {/* <TwitterFriendsList /> */}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withAuth(TwitterHome, { twitterHome: true });"]},"metadata":{},"sourceType":"module"}