{"ast":null,"code":"import decode from 'jwt-decode';\nexport default class AuthService {\n  setToken(idToken) {\n    localStorage.setItem(\"JwtToken\", idToken);\n  }\n\n  getToken() {\n    console.log(\"localStorage facebookJwtToken -> getToken()\");\n    return localStorage.getItem(\"JwtToken\");\n  }\n\n  getTwitterToken() {\n    console.log(\"cookie twitterJwtToken -> getTwitterToken()\");\n    console.log(localStorage.getItem(\"twitterJwtToken\"));\n    return localStorage.getItem(\"twitterJwtToken\");\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (error) {\n      return false;\n    }\n  }\n\n  getRightSocialToken() {\n    let jwtToken = null;\n\n    if (this.getTwitterToken() !== null) {\n      jwtToken = this.getTwitterToken();\n    }\n\n    if (this.getToken() !== null) {\n      jwtToken = this.getToken();\n    }\n\n    return jwtToken;\n  }\n\n  loggedIn() {\n    let facebookJwtToken = this.getToken();\n    let twitterJwtToken = this.getTwitterToken();\n\n    if (facebookJwtToken !== null) {\n      return !!facebookJwtToken && !this.isTokenExpired(facebookJwtToken);\n    }\n\n    if (twitterJwtToken !== null) {\n      console.log(\"twitterJwtToken != null -> inside\");\n      console.log(!!twitterJwtToken && !this.isTokenExpired(twitterJwtToken));\n      return !!twitterJwtToken && !this.isTokenExpired(twitterJwtToken);\n    }\n\n    return false;\n  }\n\n  logout() {\n    localStorage.removeItem(\"JwtToken\");\n  }\n\n  logoutTwitter() {\n    localStorage.removeItem(\"twitterJwtToken\");\n  }\n\n}","map":{"version":3,"sources":["/home/huber/Pulpit/Divelog/reactapp/src/util/AuthService.js"],"names":["decode","AuthService","setToken","idToken","localStorage","setItem","getToken","console","log","getItem","getTwitterToken","isTokenExpired","token","decoded","exp","Date","now","error","getRightSocialToken","jwtToken","loggedIn","facebookJwtToken","twitterJwtToken","logout","removeItem","logoutTwitter"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,YAAnB;AAEA,eAAe,MAAMC,WAAN,CAAkB;AAE7BC,EAAAA,QAAQ,CAACC,OAAD,EAAU;AACdC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,OAAjC;AACH;;AAEDG,EAAAA,QAAQ,GAAG;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,6CAAZ;AACA,WAAOJ,YAAY,CAACK,OAAb,CAAqB,UAArB,CAAP;AACH;;AAEDC,EAAAA,eAAe,GAAG;AACdH,IAAAA,OAAO,CAACC,GAAR,CAAY,6CAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYJ,YAAY,CAACK,OAAb,CAAqB,iBAArB,CAAZ;AACA,WAAOL,YAAY,CAACK,OAAb,CAAqB,iBAArB,CAAP;AACH;;AAEDE,EAAAA,cAAc,CAACC,KAAD,EAAQ;AAClB,QAAI;AACA,YAAMC,OAAO,GAAGb,MAAM,CAACY,KAAD,CAAtB;;AAEA,UAAGC,OAAO,CAACC,GAAR,GAAcC,IAAI,CAACC,GAAL,KAAa,IAA9B,EAAoC;AAChC,eAAO,IAAP;AACH,OAFD,MAEO;AACH,eAAO,KAAP;AACH;AACJ,KARD,CAQE,OAAMC,KAAN,EAAa;AACX,aAAO,KAAP;AACH;AACJ;;AAEDC,EAAAA,mBAAmB,GAAG;AAClB,QAAIC,QAAQ,GAAG,IAAf;;AAEA,QAAG,KAAKT,eAAL,OAA2B,IAA9B,EAAoC;AAChCS,MAAAA,QAAQ,GAAG,KAAKT,eAAL,EAAX;AACH;;AACD,QAAG,KAAKJ,QAAL,OAAoB,IAAvB,EAA6B;AACzBa,MAAAA,QAAQ,GAAG,KAAKb,QAAL,EAAX;AACH;;AACD,WAAOa,QAAP;AACH;;AAEDC,EAAAA,QAAQ,GAAG;AACP,QAAIC,gBAAgB,GAAG,KAAKf,QAAL,EAAvB;AACA,QAAIgB,eAAe,GAAG,KAAKZ,eAAL,EAAtB;;AAEA,QAAGW,gBAAgB,KAAK,IAAxB,EAA8B;AAC1B,aAAO,CAAC,CAACA,gBAAF,IAAsB,CAAC,KAAKV,cAAL,CAAoBU,gBAApB,CAA9B;AACH;;AAED,QAAGC,eAAe,KAAK,IAAvB,EAA6B;AACzBf,MAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,CAAC,CAACc,eAAF,IAAqB,CAAC,KAAKX,cAAL,CAAoBW,eAApB,CAAlC;AACA,aAAO,CAAC,CAACA,eAAF,IAAqB,CAAC,KAAKX,cAAL,CAAoBW,eAApB,CAA7B;AACH;;AACD,WAAO,KAAP;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACLnB,IAAAA,YAAY,CAACoB,UAAb,CAAwB,UAAxB;AACH;;AAEDC,EAAAA,aAAa,GAAG;AACZrB,IAAAA,YAAY,CAACoB,UAAb,CAAwB,iBAAxB;AACH;;AAjE4B","sourcesContent":["import decode from 'jwt-decode';\n\nexport default class AuthService {\n\n    setToken(idToken) {\n        localStorage.setItem(\"JwtToken\", idToken);\n    }\n\n    getToken() {\n        console.log(\"localStorage facebookJwtToken -> getToken()\");\n        return localStorage.getItem(\"JwtToken\");\n    }\n\n    getTwitterToken() {\n        console.log(\"cookie twitterJwtToken -> getTwitterToken()\");\n        console.log(localStorage.getItem(\"twitterJwtToken\"));\n        return localStorage.getItem(\"twitterJwtToken\");\n    }\n\n    isTokenExpired(token) {\n        try {\n            const decoded = decode(token);\n\n            if(decoded.exp < Date.now() / 1000) {\n                return true;\n            } else {\n                return false;\n            }\n        } catch(error) {\n            return false;\n        }\n    }\n\n    getRightSocialToken() {\n        let jwtToken = null;\n\n        if(this.getTwitterToken() !== null) {\n            jwtToken = this.getTwitterToken();\n        }\n        if(this.getToken() !== null) {\n            jwtToken = this.getToken();\n        }\n        return jwtToken;\n    }\n\n    loggedIn() {\n        let facebookJwtToken = this.getToken();\n        let twitterJwtToken = this.getTwitterToken();\n\n        if(facebookJwtToken !== null) {\n            return !!facebookJwtToken && !this.isTokenExpired(facebookJwtToken);\n        }\n\n        if(twitterJwtToken !== null) {\n            console.log(\"twitterJwtToken != null -> inside\");\n            console.log(!!twitterJwtToken && !this.isTokenExpired(twitterJwtToken));\n            return !!twitterJwtToken && !this.isTokenExpired(twitterJwtToken);\n        }\n        return false;\n    }\n\n    logout() {\n        localStorage.removeItem(\"JwtToken\");\n    }\n\n    logoutTwitter() {\n        localStorage.removeItem(\"twitterJwtToken\");\n    }\n}"]},"metadata":{},"sourceType":"module"}