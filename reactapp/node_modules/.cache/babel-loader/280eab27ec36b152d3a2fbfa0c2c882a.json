{"ast":null,"code":"var _jsxFileName = \"/home/msi/Pulpit/Divelog/reactapp/src/components/twitter/twitter-explore/TwitterExplore.js\";\nimport React from 'react';\nimport '../../../css/twitter-explore/TwitterExplore.css';\nimport withAuth from '../../../util/withAuth';\nimport AuthService from '../../../util/AuthService';\nimport TwitterCategoriesCard from '../TwitterCategoriesCard';\nimport SearchTwitterPeople from '../SearchTwitterPeople';\nimport AvailableTrends from '../AvailableTrends';\nimport TwitterExploreSearch from './TwitterExploreSearch';\nimport $ from 'jquery';\nimport { BACKEND_API_URL } from '../../../actions/types';\nimport swal from 'sweetalert';\nimport TwitterExploreSearchRequestMethod from '../../../util/TwitterExploreSearchRequestMethod';\n\nclass TwitterExplore extends React.Component {\n  constructor(props) {\n    super(props);\n    this.isMountedTwitterExplore = false;\n    this.state = {\n      accessToken: '',\n      email: '',\n      name: '',\n      twitterUserID: '',\n      pictureUrl: '',\n      providerId: '',\n      screenName: '',\n      tokenSecret: '',\n      searchTweets: '',\n      isTrendClickedAgain: false,\n      searchTweetInputAgain: ''\n    };\n    this.isLoading = true;\n    this.Auth = new AuthService();\n    this.SearchTweetObject = new TwitterExploreSearchRequestMethod();\n    this.addNewTweet = this.addNewTweet.bind(this);\n  }\n\n  componentDidMount() {\n    this.isMountedTwitterExplore = true;\n    console.log(this.props.match.params);\n    let jwtToken = this.Auth.getRightSocialToken();\n    fetch(`${BACKEND_API_URL}/getuserdata/${jwtToken}`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonData => {\n      if (this.isMountedTwitterExplore) {\n        this.setState({\n          accessToken: jsonData.accessToken,\n          email: jsonData.email,\n          name: jsonData.name,\n          twitterUserID: jsonData.twitterUserID,\n          pictureUrl: jsonData.pictureUrl,\n          providerId: jsonData.providerId,\n          screenName: jsonData.screenName,\n          tokenSecret: jsonData.tokenSecret\n        });\n      }\n    }).catch(err => {\n      swal(\"Error\", \"Can not retrieve user data.\", \"error\");\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.isTrendClickedAgain) {\n      this.SearchTweetObject.searchTweets(this, this.state.searchTweetInputAgain);\n    } else {\n      if (prevProps.match.params.trendName === undefined) {\n        if (prevProps.location.hash !== \"\") {\n          this.SearchTweetObject.searchTweets(this, prevProps.location.hash);\n        }\n      } else {\n        if (prevProps.location.hash === \"\") {\n          this.SearchTweetObject.searchTweets(this, prevProps.match.params.trendName);\n        }\n      }\n    }\n\n    this.isLoading = false;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.isMountedTwitterExplore) {\n      if (nextProps.match.params.trendName === undefined) {\n        if (nextProps.location.hash !== \"\") {\n          this.setState({\n            isTrendClickedAgain: true,\n            searchTweetInputAgain: nextProps.location.hash\n          });\n        }\n      } else {\n        if (nextProps.location.hash === \"\") {\n          this.setState({\n            isTrendClickedAgain: true,\n            searchTweetInputAgain: nextProps.match.params.trendName\n          });\n        }\n      }\n    }\n  }\n\n  addNewTweet(newTweets) {\n    this.setState({\n      searchTweets: newTweets\n    }, () => {\n      $(\".twitter-explore-search-tweets-container\").html(this.state.searchTweets);\n      $(\".twitter-tweet\").attr(\"data-width\", \"520px\");\n    });\n  }\n\n  render() {\n    let isLoading = this.isLoading;\n    return React.createElement(\"div\", {\n      className: \"twitter-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-grid-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-grid-item-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-left-categories-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-profil-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, this.state.name), React.createElement(TwitterCategoriesCard, {\n      pictureUrl: this.state.pictureUrl,\n      screenName: this.state.screenName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"feed-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(TwitterExploreSearch, {\n      addNewTweet: this.addNewTweet,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"twitter-explore-search-tweets-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, isLoading ? React.createElement(\"div\", {\n      className: \"spinner-border text-primary\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      class: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"Loading...\")) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"twitter-grid-item-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-rl-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-groups-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(SearchTwitterPeople, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), React.createElement(AvailableTrends, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"twitter-rr-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-friends-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    })))));\n  }\n\n} // export default withAuth(TwitterExplore, {  twitterExplore: true });\n\n\nexport default TwitterExplore;","map":{"version":3,"sources":["/home/msi/Pulpit/Divelog/reactapp/src/components/twitter/twitter-explore/TwitterExplore.js"],"names":["React","withAuth","AuthService","TwitterCategoriesCard","SearchTwitterPeople","AvailableTrends","TwitterExploreSearch","$","BACKEND_API_URL","swal","TwitterExploreSearchRequestMethod","TwitterExplore","Component","constructor","props","isMountedTwitterExplore","state","accessToken","email","name","twitterUserID","pictureUrl","providerId","screenName","tokenSecret","searchTweets","isTrendClickedAgain","searchTweetInputAgain","isLoading","Auth","SearchTweetObject","addNewTweet","bind","componentDidMount","console","log","match","params","jwtToken","getRightSocialToken","fetch","method","headers","then","response","json","jsonData","setState","catch","err","componentDidUpdate","prevProps","prevState","trendName","undefined","location","hash","componentWillReceiveProps","nextProps","newTweets","html","attr","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../../css/twitter-explore/TwitterExplore.css';\nimport withAuth from '../../../util/withAuth';\nimport AuthService from '../../../util/AuthService';\nimport TwitterCategoriesCard from '../TwitterCategoriesCard';\nimport SearchTwitterPeople from '../SearchTwitterPeople';\nimport AvailableTrends from '../AvailableTrends';\nimport TwitterExploreSearch from './TwitterExploreSearch';\nimport $ from 'jquery';\nimport { BACKEND_API_URL } from '../../../actions/types';\nimport swal from 'sweetalert';\nimport TwitterExploreSearchRequestMethod from '../../../util/TwitterExploreSearchRequestMethod';\n\nclass TwitterExplore extends React.Component {\n    isMountedTwitterExplore = false;\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            accessToken: '',\n            email: '',\n            name: '',\n            twitterUserID: '',\n            pictureUrl: '',\n            providerId: '',\n            screenName: '',\n            tokenSecret: '',\n            searchTweets: '',\n            isTrendClickedAgain: false,\n            searchTweetInputAgain: '',\n        }\n        this.isLoading = true;\n        this.Auth = new AuthService();\n        this.SearchTweetObject = new TwitterExploreSearchRequestMethod();\n\n        this.addNewTweet = this.addNewTweet.bind(this);\n    }\n\n    componentDidMount() {\n        this.isMountedTwitterExplore = true;\n\n        console.log(this.props.match.params);\n\n        let jwtToken = this.Auth.getRightSocialToken();\n\n        fetch(`${BACKEND_API_URL}/getuserdata/${jwtToken}`, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }\n        })\n        .then(response => { return response.json() })\n        .then(jsonData => {\n            if(this.isMountedTwitterExplore) {\n                this.setState({\n                    accessToken: jsonData.accessToken,\n                    email: jsonData.email,\n                    name: jsonData.name,\n                    twitterUserID: jsonData.twitterUserID,\n                    pictureUrl: jsonData.pictureUrl,\n                    providerId: jsonData.providerId,\n                    screenName: jsonData.screenName,\n                    tokenSecret: jsonData.tokenSecret\n                });\n            }\n        }).catch(err => {\n            swal(\"Error\", \"Can not retrieve user data.\", \"error\");\n        });   \n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if(this.state.isTrendClickedAgain) {\n            this.SearchTweetObject.searchTweets(this, this.state.searchTweetInputAgain);\n        } else {\n            if(prevProps.match.params.trendName === undefined) {\n                if(prevProps.location.hash !== \"\") {\n                    this.SearchTweetObject.searchTweets(this, prevProps.location.hash);\n                }\n            } else {\n                if(prevProps.location.hash === \"\") {\n                    this.SearchTweetObject.searchTweets(this, prevProps.match.params.trendName);\n                }\n            }\n        }\n        this.isLoading = false;\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if(this.isMountedTwitterExplore) {\n            if(nextProps.match.params.trendName === undefined) {\n                if(nextProps.location.hash !== \"\") {\n                    this.setState({\n                        isTrendClickedAgain: true,\n                        searchTweetInputAgain: nextProps.location.hash\n                    })\n                }\n            } else {\n                if(nextProps.location.hash === \"\") {\n                    this.setState({\n                        isTrendClickedAgain: true,\n                        searchTweetInputAgain: nextProps.match.params.trendName\n                    })\n                }\n            }\n        }\n    }\n\n    addNewTweet(newTweets) {\n        this.setState({ searchTweets: newTweets }, () => {\n            $(\".twitter-explore-search-tweets-container\").html(this.state.searchTweets);\n            $(\".twitter-tweet\").attr(\"data-width\", \"520px\");\n        });\n    }\n\n    render() {\n        let isLoading = this.isLoading;\n        return (\n            <div className=\"twitter-container\">\n                <div className=\"twitter-grid-container\">\n                    <div className=\"twitter-grid-item-1\">\n                        <div className=\"twitter-left-categories-container\">\n                            <div className=\"twitter-profil-container\">\n                                { this.state.name }\n                            </div>\n                            <TwitterCategoriesCard\n                                pictureUrl={this.state.pictureUrl}\n                                screenName={this.state.screenName}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"feed-container\">\n                        <TwitterExploreSearch \n                            addNewTweet={this.addNewTweet}\n                        />\n                        <div className=\"twitter-explore-search-tweets-container\">\n                            {\n                                isLoading ?\n                                (\n                                    <div \n                                        className='spinner-border text-primary' \n                                        role='status'\n                                    >\n                                        <span class='sr-only'>\n                                            Loading...\n                                        </span>\n                                    </div>\n                                )\n                                :\n                                (\n                                    <div></div>\n                                )\n                            }\n                        </div>\n                    </div>\n                    <div className=\"twitter-grid-item-3\">\n                        <div className=\"twitter-rl-container\">\n                            <div className=\"twitter-groups-container\">\n                                    <SearchTwitterPeople />\n                                    <AvailableTrends />\n                            </div>\n                        </div>\n                        <div className=\"twitter-rr-container\">\n                            <div className=\"twitter-friends-container\"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n// export default withAuth(TwitterExplore, {  twitterExplore: true });\nexport default TwitterExplore;"]},"metadata":{},"sourceType":"module"}