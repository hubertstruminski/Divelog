{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/Divelog/reactapp/src/components/twitter/twitter-messages/TwitterMessagesBox.js\";\nimport React from 'react';\nimport '../../../css/twitter-messages/TwitterMessagesBox.css';\nimport AuthService from '../../../util/AuthService';\nimport TwitterCategoriesCard from '../TwitterCategoriesCard';\nimport TwitterFriendsList from '../TwitterFriendsList';\nimport $ from 'jquery';\nimport TwitterMessagesSearch from './TwitterMessagesSearch';\nimport TwitterMessagesInbox from './TwitterMessagesInbox';\nimport SearchPeopleConversationModal from './SearchPeopleConversationModal';\nimport { BACKEND_API_URL } from '../../../actions/types';\n\nclass TwitterMessagesBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.isMountedTwitterMessagesBox = false;\n    this.state = {\n      accessToken: '',\n      email: '',\n      name: '',\n      twitterUserID: '',\n      pictureUrl: '',\n      providerId: '',\n      screenName: '',\n      tokenSecret: '',\n      isVisibleModalToSearch: false\n    };\n    this.Auth = new AuthService();\n    this.searchPeopleToConversation = this.searchPeopleToConversation.bind(this);\n    this.setIsNotVisibleModalToSearch = this.setIsNotVisibleModalToSearch.bind(this);\n  }\n\n  componentDidMount() {\n    // $(\".twitter-container\").html(\"\");\n    // $(\".twitter-container\").css({ \"width\": \"0\", \"height\": \"0\" });\n    this.isMountedTwitterMessagesBox = true;\n    let jwtToken = this.Auth.getRightSocialToken();\n    fetch(\"\".concat(BACKEND_API_URL, \"/getuserdata/\").concat(jwtToken), {\n      method: 'GET',\n      headers: {\n        'content-type': 'application/json'\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonData => {\n      if (this.isMountedTwitterMessagesBox) {\n        this.setState({\n          accessToken: jsonData.accessToken,\n          email: jsonData.email,\n          name: jsonData.name,\n          twitterUserID: jsonData.twitterUserID,\n          pictureUrl: jsonData.pictureUrl,\n          providerId: jsonData.providerId,\n          screenName: jsonData.screenName,\n          tokenSecret: jsonData.tokenSecret\n        });\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  searchPeopleToConversation() {\n    this.setState({\n      isVisibleModalToSearch: true\n    });\n  }\n\n  setIsNotVisibleModalToSearch() {\n    this.setState({\n      isVisibleModalToSearch: false\n    });\n  }\n\n  componentWillUnmount() {\n    this.isMountedTwitterMessagesBox = false;\n  }\n\n  render() {\n    let isVisibleModalToSearch = this.state.isVisibleModalToSearch;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, isVisibleModalToSearch && React.createElement(SearchPeopleConversationModal, {\n      setIsNotVisibleModalToSearch: this.setIsNotVisibleModalToSearch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"twitter-messages-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-messages-grid-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-messages-grid-item-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-messages-left-categories-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-messages-profil-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, this.state.name), React.createElement(TwitterCategoriesCard, {\n      pictureUrl: this.state.pictureUrl,\n      screenName: this.state.screenName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"twitter-messages-container-feed\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(TwitterMessagesInbox, {\n      searchPeopleToConversation: this.searchPeopleToConversation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"twitter-messages-grid-item-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-messages-rr-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-messages-friends-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default TwitterMessagesBox;","map":{"version":3,"sources":["/home/huber/Pulpit/Divelog/reactapp/src/components/twitter/twitter-messages/TwitterMessagesBox.js"],"names":["React","AuthService","TwitterCategoriesCard","TwitterFriendsList","$","TwitterMessagesSearch","TwitterMessagesInbox","SearchPeopleConversationModal","BACKEND_API_URL","TwitterMessagesBox","Component","constructor","props","isMountedTwitterMessagesBox","state","accessToken","email","name","twitterUserID","pictureUrl","providerId","screenName","tokenSecret","isVisibleModalToSearch","Auth","searchPeopleToConversation","bind","setIsNotVisibleModalToSearch","componentDidMount","jwtToken","getRightSocialToken","fetch","method","headers","then","response","json","jsonData","setState","catch","err","console","log","componentWillUnmount","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../../css/twitter-messages/TwitterMessagesBox.css';\nimport AuthService from '../../../util/AuthService';\nimport TwitterCategoriesCard from '../TwitterCategoriesCard';\nimport TwitterFriendsList from '../TwitterFriendsList';\nimport $ from 'jquery';\nimport TwitterMessagesSearch from './TwitterMessagesSearch';\nimport TwitterMessagesInbox from './TwitterMessagesInbox';\nimport SearchPeopleConversationModal from './SearchPeopleConversationModal';\nimport { BACKEND_API_URL } from '../../../actions/types';\n\nclass TwitterMessagesBox extends React.Component {\n    isMountedTwitterMessagesBox = false;\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            accessToken: '',\n            email: '',\n            name: '',\n            twitterUserID: '',\n            pictureUrl: '',\n            providerId: '',\n            screenName: '',\n            tokenSecret: '',\n            isVisibleModalToSearch: false\n        }\n        this.Auth = new AuthService();\n        this.searchPeopleToConversation = this.searchPeopleToConversation.bind(this);\n        this.setIsNotVisibleModalToSearch = this.setIsNotVisibleModalToSearch.bind(this);\n    }\n\n    componentDidMount() {\n        // $(\".twitter-container\").html(\"\");\n        // $(\".twitter-container\").css({ \"width\": \"0\", \"height\": \"0\" });\n        this.isMountedTwitterMessagesBox = true;\n        let jwtToken = this.Auth.getRightSocialToken();\n\n        fetch(`${BACKEND_API_URL}/getuserdata/${jwtToken}`, {\n            method: 'GET',\n            headers: {\n              'content-type': 'application/json'\n            }\n        })\n        .then(response => { return response.json() })\n        .then(jsonData => {\n            if(this.isMountedTwitterMessagesBox) {\n                this.setState({\n                    accessToken: jsonData.accessToken,\n                    email: jsonData.email,\n                    name: jsonData.name,\n                    twitterUserID: jsonData.twitterUserID,\n                    pictureUrl: jsonData.pictureUrl,\n                    providerId: jsonData.providerId,\n                    screenName: jsonData.screenName,\n                    tokenSecret: jsonData.tokenSecret\n                });\n            }\n        }).catch(err => {\n            console.log(err);\n        });\n    }\n\n    searchPeopleToConversation() {\n        this.setState({ isVisibleModalToSearch: true });\n    }\n\n    setIsNotVisibleModalToSearch() {\n        this.setState({ isVisibleModalToSearch: false });\n    }\n\n    componentWillUnmount() {\n        this.isMountedTwitterMessagesBox = false;\n    }\n\n    render() {\n        let isVisibleModalToSearch = this.state.isVisibleModalToSearch;\n        return (\n            <React.Fragment>\n                {\n                    isVisibleModalToSearch && \n                    <SearchPeopleConversationModal\n                        setIsNotVisibleModalToSearch={this.setIsNotVisibleModalToSearch}\n                    />\n                }\n                <div className=\"twitter-messages-container\">\n                    <div className=\"twitter-messages-grid-container\">\n                        <div className=\"twitter-messages-grid-item-1\">\n                            <div className=\"twitter-messages-left-categories-container\">\n                                <div className=\"twitter-messages-profil-container\">\n                                    { this.state.name }\n                                </div>\n                                <TwitterCategoriesCard\n                                    pictureUrl={this.state.pictureUrl}\n                                    screenName={this.state.screenName}\n                                />    \n                            </div>\n                        </div>\n                        <div className=\"twitter-messages-container-feed\">\n                            <TwitterMessagesInbox \n                                searchPeopleToConversation={this.searchPeopleToConversation}\n                            />\n                        </div>\n                        <div className=\"twitter-messages-grid-item-3\">\n                            <div className=\"twitter-messages-rr-container\">\n                                <div className=\"twitter-messages-friends-container\">\n                                    {/* <TwitterFriendsList /> */}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default TwitterMessagesBox;"]},"metadata":{},"sourceType":"module"}