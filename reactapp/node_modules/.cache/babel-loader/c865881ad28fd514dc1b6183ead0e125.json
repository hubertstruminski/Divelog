{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/Divelog/reactapp/src/util/withAuth.js\";\nimport React from 'react';\nimport AuthService from './AuthService'; // export default function withAuth(AuthComponent) {\n\nexport default function withAuth(AuthComponent, props) {\n  const Auth = new AuthService();\n  let customAuthComponent = false;\n\n  class AuthWrapped extends React.Component {\n    constructor(props) {\n      super(props); // this.state = {\n      //     isRedirectToLoginPage: true\n      // }\n    }\n\n    setRedirectForTwitterExplore(props, url) {\n      if (props.hasOwnProperty(\"twitterExploreForCategories\")) {\n        if (props.twitterExploreForCategories) {\n          this.props.history.replace(url);\n        }\n      }\n\n      if (props.hasOwnProperty(\"twitterExplore\")) {\n        if (props.twitterExplore) {\n          this.props.history.replace(url);\n        }\n      }\n    }\n\n    componentWillMount() {\n      console.log(\"Hubert Strumiński\");\n      console.log(props);\n      customAuthComponent = true;\n\n      if (this.props.match.params.jwtToken !== null && this.props.match.params.jwtToken !== undefined) {\n        fetch(\"/twitter/login/validate/token/\".concat(this.props.match.params.jwtToken), {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }).then(response => {\n          if (response.status === 200) {\n            localStorage.setItem(\"twitterJwtToken\", this.props.match.params.jwtToken);\n          } else {\n            this.props.history.replace(\"/login\");\n            return;\n          }\n        });\n      }\n\n      if (!Auth.loggedIn()) {\n        console.log(\"!Auth.loggedIn()\");\n        this.props.history.replace(\"/login\");\n      } else {\n        console.log(\"before retrieving JwtToken\");\n        let twitterJwtToken = Auth.getTwitterToken();\n        let facebookJwtToken = Auth.getToken();\n        console.log(twitterJwtToken);\n        console.log(facebookJwtToken);\n\n        try {\n          if (twitterJwtToken) {\n            if (props !== undefined) {\n              if (this.props.location.pathname === \"/twitter/explore\") {\n                customAuthComponent && this.setRedirectForTwitterExplore(props, \"/twitter/explore\");\n              }\n\n              if (this.props.location.pathname === \"/twitter/home\") {\n                customAuthComponent && this.props.history.replace(\"/twitter/home\");\n              }\n            } else {\n              customAuthComponent && this.props.history.replace(\"/twitter\");\n            }\n          }\n\n          if (facebookJwtToken) {\n            customAuthComponent && this.props.history.replace(\"/dashboard\");\n          }\n        } catch (err) {\n          if (twitterJwtToken) {\n            Auth.logoutTwitter();\n          }\n\n          if (facebookJwtToken) {\n            Auth.logout();\n          }\n\n          console.log(\"/login\");\n          this.props.history.replace(\"/login\");\n        }\n      }\n    }\n\n    componentWillUnmount() {\n      customAuthComponent = false;\n    }\n\n    render() {\n      // let isRedirectToLoginPage = this.state.isRedirectToLoginPage;\n      // if(!isRedirectToLoginPage) {\n      //     return customAuthComponent && <AuthComponent />\n      // }\n      if (Auth.loggedIn()) {\n        return customAuthComponent && React.createElement(AuthComponent, {\n          history: this.props.history,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        });\n      } else {\n        return null;\n      }\n    }\n\n  }\n\n  return AuthWrapped;\n}","map":{"version":3,"sources":["/home/huber/Pulpit/Divelog/reactapp/src/util/withAuth.js"],"names":["React","AuthService","withAuth","AuthComponent","props","Auth","customAuthComponent","AuthWrapped","Component","constructor","setRedirectForTwitterExplore","url","hasOwnProperty","twitterExploreForCategories","history","replace","twitterExplore","componentWillMount","console","log","match","params","jwtToken","undefined","fetch","method","headers","then","response","status","localStorage","setItem","loggedIn","twitterJwtToken","getTwitterToken","facebookJwtToken","getToken","location","pathname","err","logoutTwitter","logout","componentWillUnmount","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport AuthService from './AuthService';\n\n// export default function withAuth(AuthComponent) {\nexport default function withAuth(AuthComponent, props) {\n    const Auth =  new AuthService();\n    let customAuthComponent = false;\n\n    class AuthWrapped extends React.Component {\n        constructor(props) {\n            super(props);\n\n            // this.state = {\n            //     isRedirectToLoginPage: true\n            // }\n        }\n\n        setRedirectForTwitterExplore(props, url) {\n            if(props.hasOwnProperty(\"twitterExploreForCategories\")) {\n                if(props.twitterExploreForCategories) {\n                    this.props.history.replace(url);\n                }\n            }\n\n            if(props.hasOwnProperty(\"twitterExplore\")) {\n                if(props.twitterExplore) {\n                    this.props.history.replace(url);\n                }\n            }\n        }\n\n        componentWillMount() {\n            console.log(\"Hubert Strumiński\");\n            console.log(props);\n            customAuthComponent = true;\n\n            if(this.props.match.params.jwtToken !== null && this.props.match.params.jwtToken !== undefined) {\n                fetch(`/twitter/login/validate/token/${this.props.match.params.jwtToken}`, {\n                    method: 'GET',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                }).then(response => {\n                    if(response.status === 200) {\n                        localStorage.setItem(\"twitterJwtToken\", this.props.match.params.jwtToken);\n                    } else {\n                        this.props.history.replace(\"/login\");\n                        return;\n                    }\n                });\n            }\n\n            if(!Auth.loggedIn()) {\n                console.log(\"!Auth.loggedIn()\");\n                this.props.history.replace(\"/login\");\n            } else {\n                console.log(\"before retrieving JwtToken\");\n                let twitterJwtToken = Auth.getTwitterToken();\n                let facebookJwtToken = Auth.getToken();\n                console.log(twitterJwtToken);\n                console.log(facebookJwtToken);\n                try {\n                    if(twitterJwtToken) {\n                        if(props !== undefined) {\n                            if(this.props.location.pathname === \"/twitter/explore\") {\n                                customAuthComponent && this.setRedirectForTwitterExplore(props, \"/twitter/explore\");\n                            }\n                            if(this.props.location.pathname === \"/twitter/home\") {\n                                customAuthComponent && this.props.history.replace(\"/twitter/home\");\n                            }\n                        } else {\n                            customAuthComponent && this.props.history.replace(\"/twitter\");\n                        }\n                    }\n\n                    if(facebookJwtToken) {\n                        customAuthComponent && this.props.history.replace(\"/dashboard\");\n                    }\n                } catch(err) {\n                    if(twitterJwtToken) {\n                        Auth.logoutTwitter();\n                    }\n                    if(facebookJwtToken) {\n                        Auth.logout();\n                    }\n                    console.log(\"/login\");\n                    this.props.history.replace(\"/login\");\n                }\n            }\n        }\n\n        componentWillUnmount() {\n            customAuthComponent = false;\n        }\n\n        render() {\n            // let isRedirectToLoginPage = this.state.isRedirectToLoginPage;\n\n            // if(!isRedirectToLoginPage) {\n            //     return customAuthComponent && <AuthComponent />\n            // }\n\n            if(Auth.loggedIn()) {\n                return (\n                    customAuthComponent && <AuthComponent history={this.props.history} />\n                );\n            } else {\n                return null;\n            }\n        }\n    }\n    return AuthWrapped;\n}"]},"metadata":{},"sourceType":"module"}