{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/Divelog/reactapp/src/components/settings/Settings.js\";\nimport React from 'react';\nimport '../../css/Settings.css';\nimport { BACKEND_API_URL } from '../../actions/types';\n\nclass Settings extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onClick = this.onClick.bind(this);\n  }\n\n  onClick() {\n    fetch(\"\".concat(BACKEND_API_URL, \"/generate/pdf\"), {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'content-type': 'application/json'\n      },\n      responseType: 'blob' // }).then(response => {\n      //     console.log(response.text());\n      //     const file = new Blob([response.data], { type: 'application/pdf' });\n      //     const fileURL = URL.createObjectURL(file);\n      //     window.open(fileURL);\n      // });\n\n    }).then(response => response.blob()).then(this.showFile);\n  }\n\n  showFile(blob) {\n    // It is necessary to create a new blob object with mime-type explicitly set\n    // otherwise only Chrome works like it should\n    var newBlob = new Blob([blob], {\n      type: \"application/pdf\"\n    }); // IE doesn't allow using a blob object directly as link href\n    // instead it is necessary to use msSaveOrOpenBlob\n\n    if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n      window.navigator.msSaveOrOpenBlob(newBlob);\n      return;\n    } // For other browsers: \n    // Create a link pointing to the ObjectURL containing the blob.\n\n\n    const data = window.URL.createObjectURL(newBlob);\n    var link = document.createElement('a');\n    link.href = data;\n    link.download = \"file.pdf\";\n    link.click();\n    setTimeout(function () {\n      // For Firefox it is necessary to delay revoking the ObjectURL\n      window.URL.revokeObjectURL(data);\n    }, 100);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"settings-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: this.onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"PDF\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(\"pre\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"@PostMapping(value = \\\"/twitter/search/tweets/{jwtToken{\\\", produces = \\\"application/json\\\")\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), \"public ResponseEntity<?> getSearchTweets(@RequestBody String query, @PathVariable String jwtToken) throws TwitterException {\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), \"Twitter twitter = setTwitterConfiguration(jwtToken);\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), \"if(twitter == null) {\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), \"return new ResponseEntity<Void>(HttpStatus.BAD_REQUEST);\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), \"}\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), \"Query tweetsQuery = new Query(query);\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), \"QueryResult queryResult = twitter.search(tweetsQuery);\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), \"List<Status> tweets = queryResult.getTweets();\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), \"StringBuilder builder = new StringBuilder();\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), \"for(Status tweet: tweets) {\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), \"builder = createOEmbedTweet(tweet, twitter, builder);\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), \"}\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), \"return new ResponseEntity<String>(builder.toString(), HttpStatus.OK);\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), \"}\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), \"k\"));\n  }\n\n}\n\nexport default Settings;","map":{"version":3,"sources":["/home/huber/Pulpit/Divelog/reactapp/src/components/settings/Settings.js"],"names":["React","BACKEND_API_URL","Settings","Component","constructor","props","onClick","bind","fetch","method","headers","responseType","then","response","blob","showFile","newBlob","Blob","type","window","navigator","msSaveOrOpenBlob","data","URL","createObjectURL","link","document","createElement","href","download","click","setTimeout","revokeObjectURL","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../css/Settings.css';\nimport { BACKEND_API_URL } from '../../actions/types';\n\nclass Settings extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onClick = this.onClick.bind(this);\n    }\n    \n    onClick() {\n        fetch(`${BACKEND_API_URL}/generate/pdf`, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'content-type': 'application/json'\n            },\n            responseType: 'blob'\n        // }).then(response => {\n        //     console.log(response.text());\n        //     const file = new Blob([response.data], { type: 'application/pdf' });\n        //     const fileURL = URL.createObjectURL(file);\n        //     window.open(fileURL);\n        // });\n        }).then(response => response.blob()).then(this.showFile)\n    }\n\n    showFile(blob){\n        // It is necessary to create a new blob object with mime-type explicitly set\n        // otherwise only Chrome works like it should\n        var newBlob = new Blob([blob], {type: \"application/pdf\"})\n\n        // IE doesn't allow using a blob object directly as link href\n        // instead it is necessary to use msSaveOrOpenBlob\n        if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n            window.navigator.msSaveOrOpenBlob(newBlob);\n            return;\n        } \n\n        // For other browsers: \n        // Create a link pointing to the ObjectURL containing the blob.\n        const data = window.URL.createObjectURL(newBlob);\n        var link = document.createElement('a');\n        link.href = data;\n        link.download=\"file.pdf\";\n        link.click();\n        setTimeout(function(){\n            // For Firefox it is necessary to delay revoking the ObjectURL\n            window.URL.revokeObjectURL(data);\n        }, 100);\n    }\n\n    render() {\n        return (\n            <div className=\"settings-container\">\n                <button className=\"btn btn-primary\" onClick={this.onClick}>PDF</button>\n                <br />\n                <pre>\n                    @PostMapping(value = \"/twitter/search/tweets/&#123;jwtToken&#123;\", produces = \"application/json\")<br />\n                    public ResponseEntity&#60;?&#62; getSearchTweets(@RequestBody String query, @PathVariable String jwtToken) throws TwitterException &#123;<br />\n                        Twitter twitter = setTwitterConfiguration(jwtToken);<br />\n                        <br />\n                        if(twitter == null) &#123;<br />\n                            return new ResponseEntity&#60;Void&#62;(HttpStatus.BAD_REQUEST);<br />\n                        &#125;\n                        <br />\n                        Query tweetsQuery = new Query(query);<br />\n                        <br />\n                        QueryResult queryResult = twitter.search(tweetsQuery);<br />\n                        List&#60;Status&#62; tweets = queryResult.getTweets();<br />\n                        StringBuilder builder = new StringBuilder();<br />\n                        <br />\n                        for(Status tweet: tweets) &#123;<br />\n                            builder = createOEmbedTweet(tweet, twitter, builder);<br />\n                        &#125;<br />\n                        <br />\n                        return new ResponseEntity&#60;String&#62;(builder.toString(), HttpStatus.OK);<br />\n                    &#125;<br />k\n                </pre>\n            \n            </div>\n        );\n    }\n}\n\nexport default Settings;"]},"metadata":{},"sourceType":"module"}