{"ast":null,"code":"var _jsxFileName = \"/home/msi/Pulpit/Divelog/reactapp/src/components/twitter/twitter-messages/Conversation.js\";\nimport React from 'react';\nimport '../../../css/twitter-messages/Conversation.css';\nimport axios from 'axios';\nimport AuthService from '../../../util/AuthService';\nimport SingleMessage from './SingleMessage';\nimport { BACKEND_API_URL } from '../../../actions/types';\nimport $ from 'jquery';\n\nclass Conversation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoadingConversation: this.props.isLoadingConversation,\n      directMessages: [],\n      isSingleMessageRetrieved: false\n    };\n    this.Auth = new AuthService();\n    this.renderSingleMessages = this.renderSingleMessages.bind(this);\n  }\n\n  componentDidMount() {\n    let jwtToken = this.Auth.getRightSocialToken();\n    axios({\n      url: `${BACKEND_API_URL}/twitter/direct/messages/specified/person/${jwtToken}`,\n      method: 'POST',\n      data: JSON.stringify(this.props.userId),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      response.data.map((message, index) => {\n        let urlEntities = [];\n        let mediaEntities = [];\n        message.urlEntities.map(urlEntity => {\n          let element = urlEntity.expandedURL;\n          urlEntities.push(element);\n        });\n        message.mediaEntities.map(mediaEntity => {\n          let element = {\n            mediaUrl: mediaEntity.mediaURL,\n            type: mediaEntity.type\n          };\n          mediaEntities.push(element);\n        });\n        const singleMessage = {\n          id: message.id,\n          createdAt: message.createdAt,\n          recipientId: message.recipientId,\n          senderId: message.senderId,\n          text: message.text,\n          mediaEntities: mediaEntities,\n          urlEntities: urlEntities,\n          twitterOwnerId: message.twitterOwnerId\n        };\n        this.setState({\n          directMessages: this.state.directMessages.concat(singleMessage)\n        });\n      });\n      this.setState({\n        isLoadingConversation: false,\n        isSingleMessageRetrieved: true\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  renderSingleMessages() {\n    return this.state.directMessages.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt)).map((singleMessage, index) => {\n      return React.createElement(SingleMessage, {\n        index: index,\n        id: singleMessage.id,\n        createdAt: singleMessage.createdAt,\n        recipientId: singleMessage.recipientId,\n        senderId: singleMessage.senderId,\n        text: singleMessage.text,\n        mediaEntities: singleMessage.mediaEntities,\n        urlEntities: singleMessage.urlEntities,\n        twitterOwnerId: singleMessage.twitterOwnerId,\n        pictureUrl: this.props.pictureUrl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      });\n    });\n  }\n\n  setIsSingleMessageRetrieved() {\n    this.setState({\n      isSingleMessageRetrieved: false,\n      directMessages: this.props.directMessages\n    }, () => {\n      this.props.setIsChangedConversationContext(false);\n    });\n  }\n\n  render() {\n    let isLoadingConversation = this.state.isLoadingConversation;\n    let isSingleMessageRetrieved = this.state.isSingleMessageRetrieved;\n    return React.createElement(React.Fragment, null, isLoadingConversation && React.createElement(\"div\", {\n      className: \"spinner-border text-primary\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      class: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Loading...\")), !isLoadingConversation && React.createElement(\"div\", {\n      className: \"twitter-messages-direct-message-person-conversation-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-messages-direct-message-person-title-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-direct-message-screen-name-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        fontWeight: 700,\n        fontSize: '1vw'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, this.props.name), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), \"@\", this.props.screenName), React.createElement(\"div\", {\n      className: \"twitter-direct-message-info-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      class: \"fas fa-info-circle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"twitter-messages-direct-message-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, isSingleMessageRetrieved && this.renderSingleMessages(), !isSingleMessageRetrieved && this.renderSingleMessages()), React.createElement(\"div\", {\n      className: \"twitter-messages-direct-message-send-input-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      class: \"fas fa-image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), React.createElement(\"textarea\", {\n      placeholder: \"Start a new message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      class: \"fas fa-check\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Conversation;","map":{"version":3,"sources":["/home/msi/Pulpit/Divelog/reactapp/src/components/twitter/twitter-messages/Conversation.js"],"names":["React","axios","AuthService","SingleMessage","BACKEND_API_URL","$","Conversation","Component","constructor","props","state","isLoadingConversation","directMessages","isSingleMessageRetrieved","Auth","renderSingleMessages","bind","componentDidMount","jwtToken","getRightSocialToken","url","method","data","JSON","stringify","userId","headers","then","response","map","message","index","urlEntities","mediaEntities","urlEntity","element","expandedURL","push","mediaEntity","mediaUrl","mediaURL","type","singleMessage","id","createdAt","recipientId","senderId","text","twitterOwnerId","setState","concat","catch","err","console","log","sort","a","b","Date","pictureUrl","setIsSingleMessageRetrieved","setIsChangedConversationContext","render","fontWeight","fontSize","name","screenName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../../css/twitter-messages/Conversation.css';\nimport axios from 'axios';\nimport AuthService from '../../../util/AuthService';\nimport SingleMessage from './SingleMessage';\nimport { BACKEND_API_URL } from '../../../actions/types';\nimport $ from 'jquery';\n\nclass Conversation extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isLoadingConversation: this.props.isLoadingConversation,\n            directMessages: [],\n            isSingleMessageRetrieved: false\n        }\n        this.Auth = new AuthService();\n        this.renderSingleMessages = this.renderSingleMessages.bind(this);\n    }\n\n    componentDidMount() {\n        let jwtToken = this.Auth.getRightSocialToken();\n\n        axios({\n            url: `${BACKEND_API_URL}/twitter/direct/messages/specified/person/${jwtToken}`,\n            method: 'POST',\n            data: JSON.stringify(this.props.userId),\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }\n        }).then(response => {\n            response.data.map((message, index) => {\n                let urlEntities = [];\n                let mediaEntities = [];\n\n                message.urlEntities.map((urlEntity) => {\n                    let element = urlEntity.expandedURL;\n                    urlEntities.push(element);\n                });\n\n                message.mediaEntities.map((mediaEntity) => {\n                    let element = {\n                        mediaUrl: mediaEntity.mediaURL,\n                        type: mediaEntity.type\n                    }\n                    mediaEntities.push(element);\n                });\n                const singleMessage = {\n                    id: message.id,\n                    createdAt: message.createdAt,\n                    recipientId: message.recipientId,\n                    senderId: message.senderId,\n                    text: message.text,\n                    mediaEntities: mediaEntities,\n                    urlEntities: urlEntities,\n                    twitterOwnerId: message.twitterOwnerId\n                }\n                this.setState({ directMessages: this.state.directMessages.concat(singleMessage) });\n            });\n            this.setState({ \n                isLoadingConversation: false,\n                isSingleMessageRetrieved: true \n            });\n        }).catch(err => {\n            console.log(err);\n        });\n    }\n\n    renderSingleMessages() {\n        return this.state.directMessages\n        .sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt))\n        .map((singleMessage, index) => {\n            return (\n                <SingleMessage \n                    index={index}\n                    id={singleMessage.id}\n                    createdAt={singleMessage.createdAt}\n                    recipientId={singleMessage.recipientId}\n                    senderId={singleMessage.senderId}\n                    text={singleMessage.text}\n                    mediaEntities={singleMessage.mediaEntities}\n                    urlEntities={singleMessage.urlEntities}\n                    twitterOwnerId={singleMessage.twitterOwnerId}\n                    pictureUrl={this.props.pictureUrl}\n                />\n            );\n        });\n    }\n\n    setIsSingleMessageRetrieved() {\n        this.setState({ \n            isSingleMessageRetrieved: false,\n            directMessages: this.props.directMessages\n        }, () => {\n            this.props.setIsChangedConversationContext(false);\n        }); \n    }\n\n    render() {\n        let isLoadingConversation = this.state.isLoadingConversation;\n        let isSingleMessageRetrieved = this.state.isSingleMessageRetrieved;\n        return (\n            <>\n                { isLoadingConversation &&\n                    <div \n                        className='spinner-border text-primary' \n                        role='status'\n                    >\n                        <span class='sr-only'>\n                            Loading...\n                        </span>\n                    </div>\n                }\n                {\n                    !isLoadingConversation &&\n                    <div className=\"twitter-messages-direct-message-person-conversation-wrapper\">\n                        <div className=\"twitter-messages-direct-message-person-title-info\">\n                            <div className=\"twitter-direct-message-screen-name-container\">\n                                <span style={{fontWeight: 700, fontSize: '1vw'}}>{ this.props.name }</span>\n                                <br />\n                                @{ this.props.screenName }\n                            </div>\n                            <div className=\"twitter-direct-message-info-icon\">\n                                <i class=\"fas fa-info-circle\"></i>\n                            </div>\n                        </div>\n                        <div className=\"twitter-messages-direct-message-container\">\n                            {\n                                isSingleMessageRetrieved && this.renderSingleMessages()\n                            }\n                            {\n                                !isSingleMessageRetrieved && this.renderSingleMessages()\n                            }\n                        </div>\n                        <div className=\"twitter-messages-direct-message-send-input-container\">\n                            <i class=\"fas fa-image\"></i>\n                            <textarea\n                                placeholder=\"Start a new message\"\n                            ></textarea>\n                            <i class=\"fas fa-check\"></i>\n                        </div>\n                    </div>\n                }\n            </>\n        );\n    }\n}\n\nexport default Conversation;"]},"metadata":{},"sourceType":"module"}