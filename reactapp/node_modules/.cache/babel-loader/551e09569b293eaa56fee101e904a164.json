{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/divelog/react-divelog/src/components/logbook/PDFTableButton.js\";\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport jsPDF from 'jspdf';\nimport divelogLogo from '../../img/logo.png';\nimport ConvertTime from '../../util/ConvertTime';\nimport $ from 'jquery';\nimport '../../css/PdfLogbook.css';\n\nclass PDFTableButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.specialElementHandlers = {\n      '#hubert': function (element, renderer) {\n        return true;\n      },\n      '.controls': function (element, renderer) {\n        return true;\n      }\n    };\n    this.state = {\n      partnerName: '',\n      partnerSurname: '',\n      marker: {},\n      entryTime: '',\n      exitTime: '',\n      averageDepth: 0.0,\n      maxDepth: 0.0,\n      visibility: 0.0,\n      waterTemperature: 0.0,\n      airTemperature: 0.0,\n      cylinderCapacity: '',\n      divingSuit: 'NONE',\n      waterType: 'NONE',\n      waterEntryType: 'NONE',\n      ballast: 0.0,\n      glovesType: 'NONE',\n      divingType: 'NONE',\n      comment: ''\n    };\n    this.ConvertTime = new ConvertTime();\n    this.onClick = this.onClick.bind(this);\n  }\n\n  renderDataForHTML() {\n    return React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"Hubert Struminski\");\n  }\n\n  onClick(e) {\n    e.preventDefault();\n    const id = this.props.id;\n    let jwtToken = localStorage.getItem(\"JwtToken\");\n    fetch(\"/pdf/logbook/\".concat(id, \"/\").concat(jwtToken), {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'content-type': 'application/json'\n      }\n    }).then(response => response.json()).then(jsonData => {\n      let time = this.ConvertTime.convertTime(jsonData.entryTime, jsonData.exitTime, true);\n      const markerElement = {\n        id: jsonData.marker.id,\n        name: jsonData.marker.name,\n        latitude: jsonData.marker.latitude,\n        longitude: jsonData.marker.longitude\n      };\n      this.setState({\n        partnerName: jsonData.partnerName,\n        partnerSurname: jsonData.partnerSurname,\n        marker: markerElement,\n        entryTime: time[0],\n        exitTime: time[1],\n        averageDepth: jsonData.averageDepth,\n        maxDepth: jsonData.maxDepth,\n        visibility: jsonData.visibility,\n        waterTemperature: jsonData.waterTemperature,\n        airTemperature: jsonData.airTemperature,\n        cylinderCapacity: jsonData.cylinderCapacity,\n        divingSuit: jsonData.divingSuit,\n        waterType: jsonData.waterType,\n        waterEntryType: jsonData.waterEntryType,\n        ballast: jsonData.ballast,\n        glovesType: jsonData.glovesType,\n        divingType: jsonData.divingType,\n        comment: jsonData.comment\n      }, () => {\n        let doc = new jsPDF({\n          orientation: \"p\",\n          unit: \"mm\"\n        });\n        let img = new Image();\n        img.src = divelogLogo; // var output = this.renderDataForHTML();\n\n        doc.text(\"Divelog\", 23, 20);\n        doc.addImage(img, 'PNG', 20, 23, 30, 30);\n        doc.setCharSpace(0.5);\n        doc.setFontSize(10);\n        doc.text(\"Imie partnera:  \".concat(this.state.partnerName), 15, 40);\n        doc.text(\"Nazwisko partnera: \".concat(this.state.partnerSurname), 15, 40); // doc.fromHTML($(\".pdf-logbook-container\").html(), 20, 20, { 'width': 500, 'elementHandlers': this.specialElementHandlers });\n\n        doc.save(\"pdf\");\n      });\n    });\n  }\n\n  render() {\n    let createdAt = new Date();\n    let createdTimeDocument = createdAt.getFullYear() + \"-\" + createdAt.getMonth() + \"-\" + createdAt.getDay() + \" \" + createdAt.getHours() + \":\" + createdAt.getMinutes();\n    const stylesPdfDocument = {\n      'width': '100%',\n      'text-align': 'right',\n      'color': 'lightgray',\n      'font-size': '12px'\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: this.onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"PDF\"), React.createElement(\"div\", {\n      className: \"pdf-logbook-container\",\n      style: {\n        display: 'none'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      style: {\n        color: 'lightgray',\n        fontSize: '15px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"Generated by Divelog - \", createdTimeDocument)), React.createElement(\"p\", {\n      style: {\n        fontSize: '25px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"Hubert Struminski\"), \"Partner's name: \", this.state.partnerName, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), \"Partner's surname: \", this.state.partnerSurname, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }), \"Entry time: \", this.state.entryTime, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }), \"Exit time: \", this.state.exitTime, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), \"Average depth: \", this.state.averageDepth, \"m\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), \"Maximum depth: \", this.state.maxDepth, \"m\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }), \"Visibility: \", this.state.visibility, \"m\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), \"Temperature of water: \", this.state.waterTemperature, React.createElement(\"sup\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"o\"), \"C\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }), \"Temperature of air: \", this.state.airTemperature, React.createElement(\"sup\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \"o\"), \"C\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }), \"Cylinder capacity: \", this.state.cylinderCapacity, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), \"Diving suit: \", this.state.divingSuit, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), \"Water type: \", this.state.waterType, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }), \"Entry type of water: \", this.state.waterEntryType, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }), \"Gloves type: \", this.state.glovesType, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }), \"Ballast: \", this.state.ballast, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), \"Diving type: \", this.state.divingType, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), \"Comment: \", this.state.comment, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }), \"Name: \", this.state.marker.name, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }), \"Latitude: \", this.state.marker.latitude, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }), \"Longitude: \", this.state.marker.longitude));\n  }\n\n}\n\nexport default withTranslation(\"common\")(PDFTableButton);","map":{"version":3,"sources":["/home/huber/Pulpit/divelog/react-divelog/src/components/logbook/PDFTableButton.js"],"names":["React","withTranslation","jsPDF","divelogLogo","ConvertTime","$","PDFTableButton","Component","constructor","props","specialElementHandlers","element","renderer","state","partnerName","partnerSurname","marker","entryTime","exitTime","averageDepth","maxDepth","visibility","waterTemperature","airTemperature","cylinderCapacity","divingSuit","waterType","waterEntryType","ballast","glovesType","divingType","comment","onClick","bind","renderDataForHTML","e","preventDefault","id","jwtToken","localStorage","getItem","fetch","method","headers","then","response","json","jsonData","time","convertTime","markerElement","name","latitude","longitude","setState","doc","orientation","unit","img","Image","src","text","addImage","setCharSpace","setFontSize","save","render","createdAt","Date","createdTimeDocument","getFullYear","getMonth","getDay","getHours","getMinutes","stylesPdfDocument","display","color","fontSize"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport jsPDF from 'jspdf';\nimport divelogLogo from '../../img/logo.png';\nimport ConvertTime from '../../util/ConvertTime';\nimport $ from 'jquery';\nimport '../../css/PdfLogbook.css';\n\nclass PDFTableButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            partnerName: '',\n            partnerSurname: '',\n            marker: {},\n            entryTime: '',\n            exitTime: '',\n            averageDepth: 0.0,\n            maxDepth: 0.0,\n            visibility: 0.0,\n            waterTemperature: 0.0,\n            airTemperature: 0.0,\n            cylinderCapacity: '',\n            divingSuit: 'NONE',\n            waterType: 'NONE',\n            waterEntryType: 'NONE',\n            ballast: 0.0,\n            glovesType: 'NONE',\n            divingType: 'NONE',\n            comment: ''\n        }\n        this.ConvertTime = new ConvertTime();\n        this.onClick = this.onClick.bind(this);\n    }\n\n    renderDataForHTML() {\n        return (\n            <h1>Hubert Struminski</h1>\n        );\n    }\n\n    onClick(e) {\n        e.preventDefault();\n\n        const id = this.props.id;\n        let jwtToken = localStorage.getItem(\"JwtToken\");\n\n        fetch(`/pdf/logbook/${id}/${jwtToken}`, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'content-type': 'application/json'\n            }\n        })\n        .then(response => response.json())\n        .then(jsonData => {\n            let time = this.ConvertTime.convertTime(jsonData.entryTime, jsonData.exitTime, true);\n\n            const markerElement = {\n                id: jsonData.marker.id,\n                name: jsonData.marker.name,\n                latitude: jsonData.marker.latitude,\n                longitude: jsonData.marker.longitude\n            }\n\n            this.setState({\n                partnerName: jsonData.partnerName,\n                partnerSurname: jsonData.partnerSurname,\n                marker: markerElement,\n                entryTime: time[0],\n                exitTime: time[1],\n                averageDepth: jsonData.averageDepth,\n                maxDepth: jsonData.maxDepth,\n                visibility: jsonData.visibility,\n                waterTemperature: jsonData.waterTemperature,\n                airTemperature: jsonData.airTemperature,\n                cylinderCapacity: jsonData.cylinderCapacity,\n                divingSuit: jsonData.divingSuit,\n                waterType: jsonData.waterType,\n                waterEntryType: jsonData.waterEntryType,\n                ballast: jsonData.ballast,\n                glovesType: jsonData.glovesType,\n                divingType: jsonData.divingType,\n                comment: jsonData.comment\n            }, () => {\n                let doc = new jsPDF({\n                    orientation: \"p\",\n                    unit: \"mm\",\n                });\n                let img = new Image();\n                img.src = divelogLogo;\n        \n                // var output = this.renderDataForHTML();\n                doc.text(\"Divelog\", 23, 20);\n                doc.addImage(img, 'PNG', 20, 23, 30, 30);\n                doc.setCharSpace(0.5);\n                doc.setFontSize(10);\n                doc.text(`Imie partnera:  ${this.state.partnerName}`, 15, 40);\n                doc.text(`Nazwisko partnera: ${this.state.partnerSurname}`, 15, 40);\n                // doc.fromHTML($(\".pdf-logbook-container\").html(), 20, 20, { 'width': 500, 'elementHandlers': this.specialElementHandlers });\n        \n                doc.save(\"pdf\");\n            });\n        }); \n    }\n\n    specialElementHandlers = {\n        '#hubert': function (element, renderer) {\n            return true;\n        },\n        '.controls': function (element, renderer) {\n            return true;\n        }\n    };\n\n    render() {\n        let createdAt = new Date();\n        let createdTimeDocument = createdAt.getFullYear() + \"-\" + createdAt.getMonth() + \"-\" + createdAt.getDay() + \" \" + createdAt.getHours() + \":\" + createdAt.getMinutes();\n\n        const stylesPdfDocument = {\n            'width': '100%',\n            'text-align': 'right',\n            'color': 'lightgray',\n            'font-size': '12px'\n        }\n        return (\n            <div>\n                <button className=\"btn btn-primary\"\n                    onClick={this.onClick}\n                >\n                    PDF\n                </button>\n\n                <div className=\"pdf-logbook-container\" style={{ display: 'none'}}>\n                    <div>\n                        <p style={{color: 'lightgray', fontSize: '15px'}}>Generated by Divelog - { createdTimeDocument }</p>\n                    </div>\n                    <p style={{ fontSize: '25px'}}>Hubert Struminski</p>\n                    Partner's name: {this.state.partnerName}\n                    <br />\n                    Partner's surname: {this.state.partnerSurname}\n                    <br />\n                    Entry time: {this.state.entryTime}\n                    <br />\n                    Exit time: {this.state.exitTime}\n                    <br />\n                    Average depth: {this.state.averageDepth}m\n                    <br />\n                    Maximum depth: {this.state.maxDepth}m\n                    <br />\n                    Visibility: {this.state.visibility}m\n                    <br />\n                    Temperature of water: {this.state.waterTemperature}<sup>o</sup>C\n                    <br />\n                    Temperature of air: {this.state.airTemperature}<sup>o</sup>C\n                    <br />\n                    Cylinder capacity: {this.state.cylinderCapacity}\n                    <br />\n                    Diving suit: {this.state.divingSuit}\n                    <br />\n                    Water type: {this.state.waterType}\n                    <br />\n                    Entry type of water: {this.state.waterEntryType}\n                    <br />\n                    Gloves type: {this.state.glovesType}\n                    <br />\n                    Ballast: {this.state.ballast}\n                    <br />\n                    Diving type: {this.state.divingType}\n                    <br />\n                    Comment: {this.state.comment}\n                    <br />\n                    Name: {this.state.marker.name}\n                    <br />\n                    Latitude: {this.state.marker.latitude}\n                    <br />\n                    Longitude: {this.state.marker.longitude}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withTranslation(\"common\")(PDFTableButton);"]},"metadata":{},"sourceType":"module"}