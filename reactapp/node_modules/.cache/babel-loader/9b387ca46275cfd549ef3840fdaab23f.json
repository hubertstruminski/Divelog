{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/divelog/frontend/src/components/twitter/AvailableTrends.js\";\nimport React from 'react';\nimport '../../css/AvailableTrends.css';\nimport AuthService from '../../util/AuthService';\nimport swal from 'sweetalert';\nimport Trend from './Trend';\nimport $ from 'jquery';\n\nclass AvailableTrends extends React.Component {\n  constructor(props) {\n    super(props);\n    this.isMountedAvailableTrends = false;\n    this.state = {\n      longitude: 0.0,\n      latitude: 0.0,\n      isGeolocationRejected: false,\n      isGeolocationNotSupported: false,\n      trends: [],\n      isRetrievedTrends: false\n    };\n    this.Auth = new AuthService();\n    this.twitterJwtToken = this.Auth.getTwitterToken();\n    this.geolocationError = this.geolocationError.bind(this);\n    this.geolocationSuccess = this.geolocationSuccess.bind(this);\n    this.renderTwitterTrends = this.renderTwitterTrends.bind(this);\n  }\n\n  componentDidMount() {\n    this.isMountedAvailableTrends = true;\n    $(\".trends-div-box\").html(\"<div class='spinner-border text-primary twitter-explore-search-spinner' role='status'><span class='sr-only'>Loading...</span></div>\");\n\n    if (this.isMountedAvailableTrends) {\n      if (!navigator.geolocation) {\n        this.setState({\n          isGeolocationNotSupported: true\n        });\n      } else {\n        navigator.geolocation.getCurrentPosition(this.geolocationSuccess, this.geolocationError);\n      }\n    }\n  }\n\n  geolocationError() {\n    this.setState({\n      isGeolocationRejected: true\n    });\n  }\n\n  geolocationSuccess(position) {\n    this.setState({\n      latitude: position.coords.latitude,\n      longitude: position.coords.longitude\n    }, () => {\n      fetch(\"/twitter/available/closest/trends/\".concat(this.state.latitude, \"/\").concat(this.state.longitude, \"/\").concat(this.twitterJwtToken), {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json, text/plain, */*',\n          'content-type': 'application/json'\n        }\n      }).then(response => response.json()).then(json => {\n        if (this.isMountedAvailableTrends) {\n          $(\".trends-div-box\").html(\"\");\n          json.map((trend, index) => {\n            if (trend.tweetVolume !== -1) {\n              const element = {\n                name: trend.name,\n                countryName: trend.countryName,\n                tweetVolume: trend.tweetVolume\n              };\n              this.setState({\n                trends: this.state.trends.concat(element)\n              });\n            }\n          });\n          this.setState({\n            isGeolocationNotSupported: false,\n            isGeolocationRejected: false,\n            isRetrievedTrends: true\n          });\n        }\n      });\n    });\n  }\n\n  notSupportedGeolocation(isGeolocationNotSupported) {\n    if (isGeolocationNotSupported) {\n      return React.createElement(\"div\", {\n        className: \"alert alert-danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"Your browser does not support geolocation.\");\n    }\n\n    return null;\n  }\n\n  rejectGeolocation(isGeolocationRejected) {\n    if (isGeolocationRejected) {\n      return React.createElement(\"div\", {\n        className: \"alert alert-danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"Location process rejected.\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }), \"Unable to retrieve twitter trends.\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }), \"Turn on your location.\");\n    }\n\n    return null;\n  }\n\n  renderTwitterTrends() {\n    return this.state.trends.map((trend, index) => {\n      return React.createElement(\"li\", {\n        className: \"list-group-item trends-list-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(Trend, {\n        name: trend.name,\n        countryName: trend.countryName,\n        tweetVolume: trend.tweetVolume,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }));\n    });\n  }\n\n  componentWillUnmount() {\n    this.isMountedAvailableTrends = false;\n  }\n\n  render() {\n    let isGeolocationRejected = this.state.isGeolocationRejected;\n    let isGeolocationNotSupported = this.state.isGeolocationNotSupported;\n    let isRetrievedTrends = this.state.isRetrievedTrends;\n    return React.createElement(\"div\", {\n      className: \"trends-div-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, isGeolocationRejected && React.createElement(\"div\", {\n      className: \"geolocation-twitter-trends-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, this.rejectGeolocation(isGeolocationRejected)), isGeolocationNotSupported && React.createElement(\"div\", {\n      className: \"geolocation-twitter-trends-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, this.notSupportedGeolocation(isGeolocationNotSupported)), isRetrievedTrends && React.createElement(\"ul\", {\n      className: \"list-group trends-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, this.renderTwitterTrends()));\n  }\n\n}\n\nexport default AvailableTrends;","map":{"version":3,"sources":["/home/huber/Pulpit/divelog/frontend/src/components/twitter/AvailableTrends.js"],"names":["React","AuthService","swal","Trend","$","AvailableTrends","Component","constructor","props","isMountedAvailableTrends","state","longitude","latitude","isGeolocationRejected","isGeolocationNotSupported","trends","isRetrievedTrends","Auth","twitterJwtToken","getTwitterToken","geolocationError","bind","geolocationSuccess","renderTwitterTrends","componentDidMount","html","navigator","geolocation","setState","getCurrentPosition","position","coords","fetch","method","headers","then","response","json","map","trend","index","tweetVolume","element","name","countryName","concat","notSupportedGeolocation","rejectGeolocation","componentWillUnmount","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../css/AvailableTrends.css';\nimport AuthService from '../../util/AuthService';\nimport swal from 'sweetalert';\nimport Trend from './Trend';\nimport $ from 'jquery';\n\nclass AvailableTrends extends React.Component {\n    isMountedAvailableTrends = false\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            longitude: 0.0,\n            latitude: 0.0,\n            isGeolocationRejected: false,\n            isGeolocationNotSupported: false,\n            trends: [],\n            isRetrievedTrends: false\n        }\n        this.Auth = new AuthService();\n\n        this.twitterJwtToken = this.Auth.getTwitterToken();\n        this.geolocationError = this.geolocationError.bind(this);\n        this.geolocationSuccess = this.geolocationSuccess.bind(this);\n        this.renderTwitterTrends = this.renderTwitterTrends.bind(this);\n    }\n\n    componentDidMount() {\n        this.isMountedAvailableTrends = true;\n        $(\".trends-div-box\").html(\"<div class='spinner-border text-primary twitter-explore-search-spinner' role='status'><span class='sr-only'>Loading...</span></div>\");\n\n        if(this.isMountedAvailableTrends) {\n            if(!navigator.geolocation) {\n                this.setState({ isGeolocationNotSupported: true });\n            } else {\n                navigator.geolocation.getCurrentPosition(this.geolocationSuccess, this.geolocationError);\n            }\n        }\n    }\n\n    geolocationError() {\n        this.setState({ isGeolocationRejected: true });\n    }\n\n    geolocationSuccess(position) {\n        this.setState({ \n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude\n        }, () => {\n            fetch(`/twitter/available/closest/trends/${this.state.latitude}/${this.state.longitude}/${this.twitterJwtToken}`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json, text/plain, */*',\n                    'content-type': 'application/json'\n                }\n            }).then(response => response.json())\n            .then(json => {\n                if(this.isMountedAvailableTrends) {\n                    $(\".trends-div-box\").html(\"\");\n\n                    json.map((trend, index) => {\n                        if(trend.tweetVolume !== -1) {\n                            const element = {\n                                name: trend.name,\n                                countryName: trend.countryName,\n                                tweetVolume: trend.tweetVolume\n                            }\n                            this.setState({ trends: this.state.trends.concat(element) });\n                        }\n                    });\n                    this.setState({\n                        isGeolocationNotSupported: false,\n                        isGeolocationRejected: false,\n                        isRetrievedTrends: true\n                    });\n                }\n            });\n        });\n    }\n\n    notSupportedGeolocation(isGeolocationNotSupported) {\n        if(isGeolocationNotSupported) {\n            return (\n                <div className=\"alert alert-danger\">\n                    Your browser does not support geolocation.\n                </div>\n            );\n        }\n        return null;\n    }\n\n    rejectGeolocation(isGeolocationRejected) {\n        if(isGeolocationRejected) {\n            return (\n                <div className=\"alert alert-danger\">\n                    Location process rejected.\n                    <br />\n                    Unable to retrieve twitter trends.\n                    <br />\n                    Turn on your location.\n                </div>\n            );\n        }\n        return null;\n    }\n\n    renderTwitterTrends() {\n        return this.state.trends.map((trend, index) => {\n            return (\n                <li className=\"list-group-item trends-list-item\">\n                    <Trend \n                        name={trend.name}\n                        countryName={trend.countryName}\n                        tweetVolume={trend.tweetVolume}\n                    />\n                </li>\n            );\n        });\n    }\n\n    componentWillUnmount() {\n        this.isMountedAvailableTrends = false;\n    }\n\n\n    render() {\n        let isGeolocationRejected = this.state.isGeolocationRejected;\n        let isGeolocationNotSupported = this.state.isGeolocationNotSupported;\n        let isRetrievedTrends = this.state.isRetrievedTrends;\n\n        return (\n            <div className=\"trends-div-box\">\n                { isGeolocationRejected &&\n                    <div className=\"geolocation-twitter-trends-box\">\n                        { this.rejectGeolocation(isGeolocationRejected) }\n                    </div>\n                }\n                {\n                    isGeolocationNotSupported &&\n                    <div className=\"geolocation-twitter-trends-box\">\n                        { this.notSupportedGeolocation(isGeolocationNotSupported) }\n                    </div>\n                }\n                { isRetrievedTrends &&\n                    <ul className=\"list-group trends-list\">\n                        { this.renderTwitterTrends() }\n                    </ul>\n                }\n            </div>\n        );\n    }\n}\n\nexport default AvailableTrends;"]},"metadata":{},"sourceType":"module"}