{"ast":null,"code":"var _jsxFileName = \"/home/msi/Pulpit/Divelog/reactapp/src/components/twitter/twitter-messages/Conversation.js\";\nimport React from 'react';\nimport '../../../css/twitter-messages/Conversation.css';\nimport axios from 'axios';\nimport AuthService from '../../../util/AuthService';\nimport SingleMessage from './SingleMessage';\nimport { BACKEND_API_URL } from '../../../actions/types';\nimport $ from 'jquery';\n\nclass Conversation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoadingConversation: this.props.isLoadingConversation,\n      directMessages: [],\n      isSingleMessageRetrieved: false,\n      isFirstTimeRendered: true\n    };\n    this.Auth = new AuthService();\n    this.renderSingleMessages = this.renderSingleMessages.bind(this);\n  }\n\n  componentDidMount() {\n    let jwtToken = this.Auth.getRightSocialToken();\n\n    if (this.state.isFirstTimeRendered) {\n      axios({\n        url: `${BACKEND_API_URL}/twitter/direct/messages/specified/person/${jwtToken}`,\n        method: 'POST',\n        data: JSON.stringify(this.props.userId),\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      }).then(response => {\n        response.data.map((message, index) => {\n          let urlEntities = [];\n          let mediaEntities = [];\n          message.urlEntities.map(urlEntity => {\n            let element = urlEntity.expandedURL;\n            urlEntities.push(element);\n          });\n          message.mediaEntities.map(mediaEntity => {\n            let element = {\n              mediaUrl: mediaEntity.mediaURL,\n              type: mediaEntity.type\n            };\n            mediaEntities.push(element);\n          });\n          const singleMessage = {\n            id: message.id,\n            createdAt: message.createdAt,\n            recipientId: message.recipientId,\n            senderId: message.senderId,\n            text: message.text,\n            mediaEntities: mediaEntities,\n            urlEntities: urlEntities,\n            twitterOwnerId: message.twitterOwnerId\n          };\n          this.setState({\n            directMessages: this.state.directMessages.concat(singleMessage)\n          });\n        });\n        this.setState({\n          isLoadingConversation: false,\n          isSingleMessageRetrieved: true,\n          isFirstTimeRendered: false\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  }\n\n  retrieveSingleMessages() {\n    if (!this.state.isFirstTimeRendered) {\n      this.setState({\n        isSingleMessageRetrieved: false,\n        directMessages: []\n      }, () => {\n        let jwtToken = this.Auth.getRightSocialToken();\n        axios({\n          url: `${BACKEND_API_URL}/twitter/direct/messages/specified/person/${jwtToken}`,\n          method: 'POST',\n          data: JSON.stringify(this.props.userId),\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          }\n        }).then(response => {\n          response.data.map((message, index) => {\n            let urlEntities = [];\n            let mediaEntities = [];\n            message.urlEntities.map(urlEntity => {\n              let element = urlEntity.expandedURL;\n              urlEntities.push(element);\n            });\n            message.mediaEntities.map(mediaEntity => {\n              let element = {\n                mediaUrl: mediaEntity.mediaURL,\n                type: mediaEntity.type\n              };\n              mediaEntities.push(element);\n            });\n            const singleMessage = {\n              id: message.id,\n              createdAt: message.createdAt,\n              recipientId: message.recipientId,\n              senderId: message.senderId,\n              text: message.text,\n              mediaEntities: mediaEntities,\n              urlEntities: urlEntities,\n              twitterOwnerId: message.twitterOwnerId\n            };\n            this.setState({\n              // isChangedConversationContext: true,\n              directMessages: this.state.directMessages.concat(singleMessage)\n            });\n          });\n          this.setState({\n            isSingleMessageRetrieved: true\n          });\n        }).catch(err => {\n          console.log(err);\n        });\n      });\n    }\n  }\n\n  renderSingleMessages() {\n    return this.state.directMessages.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt)).map((singleMessage, index) => {\n      return React.createElement(SingleMessage, {\n        index: index,\n        id: singleMessage.id,\n        createdAt: singleMessage.createdAt,\n        recipientId: singleMessage.recipientId,\n        senderId: singleMessage.senderId,\n        text: singleMessage.text,\n        mediaEntities: singleMessage.mediaEntities,\n        urlEntities: singleMessage.urlEntities,\n        twitterOwnerId: singleMessage.twitterOwnerId,\n        pictureUrl: this.props.pictureUrl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      });\n    });\n  } // setIsSingleMessageRetrieved() {\n  //     this.setState({ \n  //         isSingleMessageRetrieved: false,\n  //         directMessages: this.props.directMessages\n  //     }, () => {\n  //         this.props.setIsChangedConversationContext(false);\n  //     }); \n  // }\n\n\n  render() {\n    let isLoadingConversation = this.state.isLoadingConversation;\n    let isSingleMessageRetrieved = this.state.isSingleMessageRetrieved;\n    return React.createElement(React.Fragment, null, isLoadingConversation && React.createElement(\"div\", {\n      className: \"spinner-border text-primary\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      class: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, \"Loading...\")), !isLoadingConversation && React.createElement(\"div\", {\n      className: \"twitter-messages-direct-message-person-conversation-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-messages-direct-message-person-title-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-direct-message-screen-name-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      style: {\n        fontWeight: 700,\n        fontSize: '1vw'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, this.props.name), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }), \"@\", this.props.screenName), React.createElement(\"div\", {\n      className: \"twitter-direct-message-info-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      class: \"fas fa-info-circle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"twitter-messages-direct-message-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, isSingleMessageRetrieved && this.renderSingleMessages()), React.createElement(\"div\", {\n      className: \"twitter-messages-direct-message-send-input-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      class: \"fas fa-image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), React.createElement(\"textarea\", {\n      placeholder: \"Start a new message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }), React.createElement(\"i\", {\n      class: \"fas fa-check\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Conversation;","map":{"version":3,"sources":["/home/msi/Pulpit/Divelog/reactapp/src/components/twitter/twitter-messages/Conversation.js"],"names":["React","axios","AuthService","SingleMessage","BACKEND_API_URL","$","Conversation","Component","constructor","props","state","isLoadingConversation","directMessages","isSingleMessageRetrieved","isFirstTimeRendered","Auth","renderSingleMessages","bind","componentDidMount","jwtToken","getRightSocialToken","url","method","data","JSON","stringify","userId","headers","then","response","map","message","index","urlEntities","mediaEntities","urlEntity","element","expandedURL","push","mediaEntity","mediaUrl","mediaURL","type","singleMessage","id","createdAt","recipientId","senderId","text","twitterOwnerId","setState","concat","catch","err","console","log","retrieveSingleMessages","sort","a","b","Date","pictureUrl","render","fontWeight","fontSize","name","screenName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../../css/twitter-messages/Conversation.css';\nimport axios from 'axios';\nimport AuthService from '../../../util/AuthService';\nimport SingleMessage from './SingleMessage';\nimport { BACKEND_API_URL } from '../../../actions/types';\nimport $ from 'jquery';\n\nclass Conversation extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isLoadingConversation: this.props.isLoadingConversation,\n            directMessages: [],\n            isSingleMessageRetrieved: false,\n            isFirstTimeRendered: true\n        }\n        this.Auth = new AuthService();\n        this.renderSingleMessages = this.renderSingleMessages.bind(this);\n    }\n\n    componentDidMount() {\n        let jwtToken = this.Auth.getRightSocialToken();\n\n        if(this.state.isFirstTimeRendered) {\n            axios({\n                url: `${BACKEND_API_URL}/twitter/direct/messages/specified/person/${jwtToken}`,\n                method: 'POST',\n                data: JSON.stringify(this.props.userId),\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                }\n            }).then(response => {\n                response.data.map((message, index) => {\n                    let urlEntities = [];\n                    let mediaEntities = [];\n    \n                    message.urlEntities.map((urlEntity) => {\n                        let element = urlEntity.expandedURL;\n                        urlEntities.push(element);\n                    });\n    \n                    message.mediaEntities.map((mediaEntity) => {\n                        let element = {\n                            mediaUrl: mediaEntity.mediaURL,\n                            type: mediaEntity.type\n                        }\n                        mediaEntities.push(element);\n                    });\n                    const singleMessage = {\n                        id: message.id,\n                        createdAt: message.createdAt,\n                        recipientId: message.recipientId,\n                        senderId: message.senderId,\n                        text: message.text,\n                        mediaEntities: mediaEntities,\n                        urlEntities: urlEntities,\n                        twitterOwnerId: message.twitterOwnerId\n                    }\n                    this.setState({ directMessages: this.state.directMessages.concat(singleMessage) });\n                });\n                this.setState({ \n                    isLoadingConversation: false,\n                    isSingleMessageRetrieved: true,\n                    isFirstTimeRendered: false\n                });\n            }).catch(err => {\n                console.log(err);\n            });\n        }\n        \n    }\n\n    retrieveSingleMessages() {\n        if(!this.state.isFirstTimeRendered) {\n            this.setState({ \n                isSingleMessageRetrieved: false,\n                directMessages: []\n            }, () => {\n                let jwtToken = this.Auth.getRightSocialToken();\n                axios({\n                    url: `${BACKEND_API_URL}/twitter/direct/messages/specified/person/${jwtToken}`,\n                    method: 'POST',\n                    data: JSON.stringify(this.props.userId),\n                    headers: {\n                        'Accept': 'application/json',\n                        'Content-Type': 'application/json'\n                    }\n                }).then(response => {\n                    response.data.map((message, index) => {\n                        let urlEntities = [];\n                        let mediaEntities = [];\n        \n                        message.urlEntities.map((urlEntity) => {\n                            let element = urlEntity.expandedURL;\n                            urlEntities.push(element);\n                        });\n        \n                        message.mediaEntities.map((mediaEntity) => {\n                            let element = {\n                                mediaUrl: mediaEntity.mediaURL,\n                                type: mediaEntity.type\n                            }\n                            mediaEntities.push(element);\n                        });\n                        const singleMessage = {\n                            id: message.id,\n                            createdAt: message.createdAt,\n                            recipientId: message.recipientId,\n                            senderId: message.senderId,\n                            text: message.text,\n                            mediaEntities: mediaEntities,\n                            urlEntities: urlEntities,\n                            twitterOwnerId: message.twitterOwnerId\n                        }\n                        this.setState({ \n                            // isChangedConversationContext: true,\n                            directMessages: this.state.directMessages.concat(singleMessage)\n                        });\n                    });\n                    this.setState({\n                        isSingleMessageRetrieved: true\n                    })\n                }).catch(err => {\n                    console.log(err);\n                });\n            });\n        }\n    }\n\n    renderSingleMessages() {\n        return this.state.directMessages\n        .sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt))\n        .map((singleMessage, index) => {\n            return (\n                <SingleMessage \n                    index={index}\n                    id={singleMessage.id}\n                    createdAt={singleMessage.createdAt}\n                    recipientId={singleMessage.recipientId}\n                    senderId={singleMessage.senderId}\n                    text={singleMessage.text}\n                    mediaEntities={singleMessage.mediaEntities}\n                    urlEntities={singleMessage.urlEntities}\n                    twitterOwnerId={singleMessage.twitterOwnerId}\n                    pictureUrl={this.props.pictureUrl}\n                />\n            );\n        });\n    }\n\n    // setIsSingleMessageRetrieved() {\n    //     this.setState({ \n    //         isSingleMessageRetrieved: false,\n    //         directMessages: this.props.directMessages\n    //     }, () => {\n    //         this.props.setIsChangedConversationContext(false);\n    //     }); \n    // }\n\n    render() {\n        let isLoadingConversation = this.state.isLoadingConversation;\n        let isSingleMessageRetrieved = this.state.isSingleMessageRetrieved;\n        return (\n            <>\n                { isLoadingConversation &&\n                    <div \n                        className='spinner-border text-primary' \n                        role='status'\n                    >\n                        <span class='sr-only'>\n                            Loading...\n                        </span>\n                    </div>\n                }\n                {\n                    !isLoadingConversation &&\n                    <div className=\"twitter-messages-direct-message-person-conversation-wrapper\">\n                        <div className=\"twitter-messages-direct-message-person-title-info\">\n                            <div className=\"twitter-direct-message-screen-name-container\">\n                                <span style={{fontWeight: 700, fontSize: '1vw'}}>{ this.props.name }</span>\n                                <br />\n                                @{ this.props.screenName }\n                            </div>\n                            <div className=\"twitter-direct-message-info-icon\">\n                                <i class=\"fas fa-info-circle\"></i>\n                            </div>\n                        </div>\n                        <div className=\"twitter-messages-direct-message-container\">\n                            {\n                                isSingleMessageRetrieved && this.renderSingleMessages()\n                            }\n                            {/* {\n                                !isSingleMessageRetrieved && this.renderSingleMessages()\n                            } */}\n                        </div>\n                        <div className=\"twitter-messages-direct-message-send-input-container\">\n                            <i class=\"fas fa-image\"></i>\n                            <textarea\n                                placeholder=\"Start a new message\"\n                            ></textarea>\n                            <i class=\"fas fa-check\"></i>\n                        </div>\n                    </div>\n                }\n            </>\n        );\n    }\n}\n\nexport default Conversation;"]},"metadata":{},"sourceType":"module"}