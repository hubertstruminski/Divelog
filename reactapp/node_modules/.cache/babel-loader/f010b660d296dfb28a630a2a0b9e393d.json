{"ast":null,"code":"import React from 'react';\nimport { Redirect } from 'react-router-dom';\nexport default function withTwitterAuth(AuthComponent, props) {\n  class AuthWrapped extends React.Component {\n    constructor() {\n      super();\n      this.state = {\n        isRedirectToLoginPage: true\n      };\n    }\n\n    componentWillMount() {\n      fetch(\"/twitter/login/validate/token/\".concat(this.props.match.params.jwtToken), {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => {\n        if (response.status === 200) {\n          localStorage.setItem(\"twitterJwtToken\", this.props.match.params.jwtToken);\n          this.setState({\n            isRedirectToLoginPage: false\n          });\n        } else {\n          this.props.history.replace(\"/login\");\n        }\n      });\n    } // history={`/twitter/${this.props.match.params.jwtToken}`}\n\n\n    render() {\n      let isRedirectToLoginPage = this.state.isRedirectToLoginPage; // return (\n      //      !isRedirectToLoginPage && <AuthComponent />\n      // );\n    }\n\n  }\n\n  return AuthWrapped;\n}","map":{"version":3,"sources":["/home/huber/Pulpit/Divelog/reactapp/src/util/withTwitterAuth.js"],"names":["React","Redirect","withTwitterAuth","AuthComponent","props","AuthWrapped","Component","constructor","state","isRedirectToLoginPage","componentWillMount","fetch","match","params","jwtToken","method","headers","then","response","status","localStorage","setItem","setState","history","replace","render"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAEA,eAAe,SAASC,eAAT,CAAyBC,aAAzB,EAAwCC,KAAxC,EAA+C;AAC1D,QAAMC,WAAN,SAA0BL,KAAK,CAACM,SAAhC,CAA0C;AACtCC,IAAAA,WAAW,GAAG;AACV;AAEA,WAAKC,KAAL,GAAa;AACTC,QAAAA,qBAAqB,EAAE;AADd,OAAb;AAGH;;AACDC,IAAAA,kBAAkB,GAAG;AACjBC,MAAAA,KAAK,yCAAkC,KAAKP,KAAL,CAAWQ,KAAX,CAAiBC,MAAjB,CAAwBC,QAA1D,GAAsE;AACvEC,QAAAA,MAAM,EAAE,KAD+D;AAEvEC,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX;AAF8D,OAAtE,CAAL,CAKGC,IALH,CAKQC,QAAQ,IAAI;AAChB,YAAGA,QAAQ,CAACC,MAAT,KAAoB,GAAvB,EAA4B;AACxBC,UAAAA,YAAY,CAACC,OAAb,CAAqB,iBAArB,EAAwC,KAAKjB,KAAL,CAAWQ,KAAX,CAAiBC,MAAjB,CAAwBC,QAAhE;AACA,eAAKQ,QAAL,CAAc;AAAEb,YAAAA,qBAAqB,EAAE;AAAzB,WAAd;AACH,SAHD,MAGO;AACH,eAAKL,KAAL,CAAWmB,OAAX,CAAmBC,OAAnB,CAA2B,QAA3B;AACH;AACJ,OAZD;AAaH,KAtBqC,CAwBtC;;;AAEAC,IAAAA,MAAM,GAAG;AACL,UAAIhB,qBAAqB,GAAG,KAAKD,KAAL,CAAWC,qBAAvC,CADK,CAGL;AACA;AACA;AACH;;AAhCqC;;AAkC1C,SAAOJ,WAAP;AACH","sourcesContent":["import React from 'react';\nimport { Redirect } from 'react-router-dom';\n\nexport default function withTwitterAuth(AuthComponent, props) {\n    class AuthWrapped extends React.Component {\n        constructor() {\n            super();\n\n            this.state = {\n                isRedirectToLoginPage: true\n            }\n        }\n        componentWillMount() {\n            fetch(`/twitter/login/validate/token/${this.props.match.params.jwtToken}`, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            }).then(response => {\n                if(response.status === 200) {\n                    localStorage.setItem(\"twitterJwtToken\", this.props.match.params.jwtToken);\n                    this.setState({ isRedirectToLoginPage: false });\n                } else {\n                    this.props.history.replace(\"/login\");\n                }\n            });\n        }\n\n        // history={`/twitter/${this.props.match.params.jwtToken}`}\n\n        render() {\n            let isRedirectToLoginPage = this.state.isRedirectToLoginPage;\n            \n            // return (\n            //      !isRedirectToLoginPage && <AuthComponent />\n            // );\n        }\n    }\n    return AuthWrapped;\n}"]},"metadata":{},"sourceType":"module"}