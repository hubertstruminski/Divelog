{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/divelog/frontend/src/components/logbook/Logbook.js\";\nimport React from 'react';\nimport '../../css/Logbook.css';\nimport { withRouter } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { withTranslation } from 'react-i18next';\nimport DeleteTableButton from './DeleteTableButton';\nimport UpdateLogbookButton from './UpdateLogbookButton';\nimport PDFTableButton from './PDFTableButton';\nimport ConvertTime from '../../util/ConvertTime';\nimport AuthService from '../../util/AuthService';\n\nclass Logbook extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      isEmptyLogbook: true,\n      deletedLogbookId: 0\n    };\n    this.Auth = new AuthService();\n    this.logbooks = [];\n    this.bodyTableRef = React.createRef();\n    this.showTableRows = this.showTableRows.bind(this);\n    this.setDeletedLogbookId = this.setDeletedLogbookId.bind(this);\n    this.fetchLogbooks = this.fetchLogbooks.bind(this);\n    this.ConvertTime = new ConvertTime();\n  }\n\n  componentDidMount() {\n    let jwtToken = this.Auth.getRightSocialToken();\n    fetch(\"/get/logbook/\".concat(jwtToken), {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'content-type': 'application/json'\n      }\n    }).then(response => response.json()).then(jsonData => {\n      jsonData.map((jsonElement, index) => {\n        let time = this.ConvertTime.convertTime(jsonElement.entryTime, jsonElement.exitTime, false);\n        const element = {\n          id: jsonElement.id,\n          partnerName: jsonElement.partnerName,\n          partnerSurname: jsonElement.partnerSurname,\n          entryTime: time[0],\n          exitTime: time[1],\n          marker: jsonElement.marker.name,\n          averageDepth: jsonElement.averageDepth,\n          maxDepth: jsonElement.maxDepth,\n          airTemperature: jsonElement.airTemperature,\n          waterTemperature: jsonElement.waterTemperature,\n          divingType: jsonElement.divingType\n        };\n        this.logbooks.push(element);\n      });\n\n      if (this.logbooks.length === 0) {\n        this.setState({\n          isEmptyLogbook: true\n        });\n      } else {\n        if (this.state.isEmptyLogbook === true) {\n          this.setState({\n            isEmptyLogbook: false\n          });\n        }\n      }\n    });\n  }\n\n  fetchLogbooks() {\n    let jwtToken = this.Auth.getRightSocialToken();\n    fetch(\"/get/logbook/\".concat(jwtToken), {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'content-type': 'application/json'\n      }\n    }).then(response => response.json()).then(jsonData => {\n      this.logbooks = [];\n      jsonData.map((jsonElement, index) => {\n        let time = this.ConvertTime.convertTime(jsonElement.entryTime, jsonElement.exitTime, false);\n        const element = {\n          id: jsonElement.id,\n          partnerName: jsonElement.partnerName,\n          partnerSurname: jsonElement.partnerSurname,\n          entryTime: time[0],\n          exitTime: time[1],\n          marker: jsonElement.marker.name,\n          averageDepth: jsonElement.averageDepth,\n          maxDepth: jsonElement.maxDepth,\n          airTemperature: jsonElement.airTemperature,\n          waterTemperature: jsonElement.waterTemperature,\n          divingType: jsonElement.divingType\n        };\n        this.logbooks.push(element);\n      });\n\n      if (this.logbooks.length === 0) {\n        this.setState({\n          isEmptyLogbook: true\n        });\n      } else {\n        if (this.state.isEmptyLogbook === true) {\n          this.setState({\n            isEmptyLogbook: false\n          });\n        }\n      }\n    });\n  }\n\n  showTableRows() {\n    let rowNumber = 0;\n    return this.logbooks.map((logbook, index) => {\n      return React.createElement(\"tr\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        scope: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, ++rowNumber), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, logbook.partnerName), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, logbook.partnerSurname), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, logbook.entryTime), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, logbook.exitTime), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, logbook.marker), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, logbook.averageDepth, \"m\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, logbook.maxDepth, \"m\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, logbook.airTemperature, React.createElement(\"sup\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \"o\"), \"C\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, logbook.waterTemperature, React.createElement(\"sup\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"o\"), \"C\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, logbook.divingType), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(PDFTableButton, {\n        id: logbook.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      })), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(UpdateLogbookButton, {\n        id: logbook.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      })), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(DeleteTableButton, {\n        id: logbook.id,\n        setIsDeletedRow: this.setIsDeletedRow,\n        setDeletedLogbookId: this.setDeletedLogbookId,\n        fetchLogbooks: this.fetchLogbooks,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      })));\n    });\n  }\n\n  showTable() {\n    return React.createElement(\"div\", {\n      className: \"table-center table-margin\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"table-responsive\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      className: \"table table-hover table-striped\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      className: \"table-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      scope: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"#\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, this.props.t(\"logbook.table.partnerName\")), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, this.props.t(\"logbook.table.partnerSurname\")), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, this.props.t(\"logbook.table.entryTime\")), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, this.props.t(\"logbook.table.exitTime\")), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, this.props.t(\"logbook.table.location\")), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, this.props.t(\"logbook.table.avgDepth\")), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, this.props.t(\"logbook.table.maxDepth\")), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, this.props.t(\"logbook.table.airTemperature\")), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, this.props.t(\"logbook.table.waterTemperature\")), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, this.props.t(\"logbook.table.divingType\")), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"PDF\"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, this.props.t(\"logbook.table.UPDATE\")), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, this.props.t(\"logbook.table.DELETE\")))), React.createElement(\"tbody\", {\n      ref: this.bodyTableRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, this.showTableRows()))));\n  }\n\n  setDeletedLogbookId(value) {\n    this.setState({\n      deletedLogbookId: value\n    }, () => {\n      let id = this.state.deletedLogbookId;\n      let index = 0;\n      this.logbooks.map((logbook, index) => {\n        if (logbook.id === id) {\n          this.logbooks.splice(index, 1);\n          this.forceUpdate();\n        }\n\n        index++;\n      });\n    });\n  }\n\n  render() {\n    let isEmptyLogbook = this.state.isEmptyLogbook;\n    return React.createElement(\"div\", {\n      className: \"logbook-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/add/dive\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"btn btn-primary btn-padding\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, this.props.t(\"logbook.addButton\"))), !isEmptyLogbook && this.showTable(), React.createElement(NoLogbookData, {\n      isEmptyLogbook: this.state.isEmptyLogbook,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction NoLogbookData(props) {\n  if (props.isEmptyLogbook) {\n    return React.createElement(\"div\", {\n      className: \"alert alert-danger alert-margin\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, \"No data in your logbook.\");\n  }\n\n  return null;\n}\n\nexport default withTranslation(\"common\")(withRouter(Logbook));","map":{"version":3,"sources":["/home/huber/Pulpit/divelog/frontend/src/components/logbook/Logbook.js"],"names":["React","withRouter","Link","withTranslation","DeleteTableButton","UpdateLogbookButton","PDFTableButton","ConvertTime","AuthService","Logbook","Component","constructor","state","isEmptyLogbook","deletedLogbookId","Auth","logbooks","bodyTableRef","createRef","showTableRows","bind","setDeletedLogbookId","fetchLogbooks","componentDidMount","jwtToken","getRightSocialToken","fetch","method","headers","then","response","json","jsonData","map","jsonElement","index","time","convertTime","entryTime","exitTime","element","id","partnerName","partnerSurname","marker","name","averageDepth","maxDepth","airTemperature","waterTemperature","divingType","push","length","setState","rowNumber","logbook","setIsDeletedRow","showTable","props","t","value","splice","forceUpdate","render","NoLogbookData"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../css/Logbook.css';\nimport { withRouter } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { withTranslation } from 'react-i18next';\nimport DeleteTableButton from './DeleteTableButton';\nimport UpdateLogbookButton from './UpdateLogbookButton';\nimport PDFTableButton from './PDFTableButton';\nimport ConvertTime from '../../util/ConvertTime';\nimport AuthService from '../../util/AuthService';\n\nclass Logbook extends React.Component {\n    constructor() {\n        super();\n        \n        this.state = {\n            isEmptyLogbook: true,\n            deletedLogbookId: 0\n        }\n        this.Auth = new AuthService();\n        this.logbooks = [];\n        this.bodyTableRef = React.createRef();\n        \n        this.showTableRows = this.showTableRows.bind(this);\n        this.setDeletedLogbookId = this.setDeletedLogbookId.bind(this);\n        this.fetchLogbooks = this.fetchLogbooks.bind(this);\n\n        this.ConvertTime = new ConvertTime();\n    }\n\n    componentDidMount() {\n        let jwtToken = this.Auth.getRightSocialToken();\n\n        fetch(`/get/logbook/${jwtToken}`, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'content-type': 'application/json'\n            }\n        }).then(response => response.json())\n        .then(jsonData => {\n            jsonData.map((jsonElement, index) => {\n                let time = this.ConvertTime.convertTime(jsonElement.entryTime, jsonElement.exitTime, false);\n\n                const element = {\n                    id: jsonElement.id,\n                    partnerName: jsonElement.partnerName,\n                    partnerSurname: jsonElement.partnerSurname,\n                    entryTime: time[0],\n                    exitTime: time[1],\n                    marker: jsonElement.marker.name,\n                    averageDepth: jsonElement.averageDepth,\n                    maxDepth: jsonElement.maxDepth,\n                    airTemperature: jsonElement.airTemperature,\n                    waterTemperature: jsonElement.waterTemperature,\n                    divingType: jsonElement.divingType\n                }\n                this.logbooks.push(element);\n            });\n            if(this.logbooks.length === 0) {\n                this.setState({ isEmptyLogbook: true });\n            } else {\n                if(this.state.isEmptyLogbook === true) {\n                    this.setState({ isEmptyLogbook: false });\n                }\n            }\n        });\n    }\n\n    fetchLogbooks() {\n        let jwtToken = this.Auth.getRightSocialToken(); \n\n        fetch(`/get/logbook/${jwtToken}`, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'content-type': 'application/json'\n            }\n        }).then(response => response.json())\n        .then(jsonData => {\n            this.logbooks = [];\n            jsonData.map((jsonElement, index) => {\n                let time = this.ConvertTime.convertTime(jsonElement.entryTime, jsonElement.exitTime, false);\n\n                const element = {\n                    id: jsonElement.id,\n                    partnerName: jsonElement.partnerName,\n                    partnerSurname: jsonElement.partnerSurname,\n                    entryTime: time[0],\n                    exitTime: time[1],\n                    marker: jsonElement.marker.name,\n                    averageDepth: jsonElement.averageDepth,\n                    maxDepth: jsonElement.maxDepth,\n                    airTemperature: jsonElement.airTemperature,\n                    waterTemperature: jsonElement.waterTemperature,\n                    divingType: jsonElement.divingType\n                }\n                this.logbooks.push(element);\n            });\n            if(this.logbooks.length === 0) {\n                this.setState({ isEmptyLogbook: true });\n            } else {\n                if(this.state.isEmptyLogbook === true) {\n                    this.setState({ isEmptyLogbook: false });\n                }\n            }\n        });\n    }\n\n    showTableRows() {\n        let rowNumber = 0;\n        return this.logbooks.map((logbook, index) => {\n            return (\n                <tr key={index}>\n                    <th scope=\"row\">{++rowNumber}</th>\n                    <td>{logbook.partnerName}</td>\n                    <td>{logbook.partnerSurname}</td>\n                    <td>{logbook.entryTime}</td>\n                    <td>{logbook.exitTime}</td>\n                    <td>{logbook.marker}</td>\n                    <td>{logbook.averageDepth}m</td>\n                    <td>{logbook.maxDepth}m</td>\n                    <td>{logbook.airTemperature}<sup>o</sup>C</td>\n                    <td>{logbook.waterTemperature}<sup>o</sup>C</td>\n                    <td>{logbook.divingType}</td>\n                    <td>\n                        <PDFTableButton id={logbook.id} />\n                    </td>\n                    <td>\n                        <UpdateLogbookButton id={logbook.id} />\n                    </td>\n                    <td>\n                        <DeleteTableButton \n                            id={logbook.id} \n                            setIsDeletedRow={this.setIsDeletedRow}\n                            setDeletedLogbookId={this.setDeletedLogbookId}\n                            fetchLogbooks={this.fetchLogbooks}\n                        />\n                    </td>\n                </tr>\n            );\n        });\n    }\n\n    showTable() {\n        return (\n            <div className=\"table-center table-margin\">\n                <div className=\"table-responsive\">\n                    <table className=\"table table-hover table-striped\">\n                        <thead>\n                            <tr className=\"table-primary\">\n                                <th scope=\"col\">#</th>\n                                <td>\n                                    {this.props.t(\"logbook.table.partnerName\")}\n                                </td>\n                                <td>\n                                    {this.props.t(\"logbook.table.partnerSurname\")}\n                                </td>\n                                <td>\n                                    {this.props.t(\"logbook.table.entryTime\")}\n                                </td>\n                                <td>\n                                    {this.props.t(\"logbook.table.exitTime\")}\n                                </td>\n                                <td>\n                                    {this.props.t(\"logbook.table.location\")}\n                                </td>\n                                <td>\n                                    {this.props.t(\"logbook.table.avgDepth\")}\n                                </td>\n                                <td>\n                                    {this.props.t(\"logbook.table.maxDepth\")}\n                                </td>\n                                <td>\n                                    {this.props.t(\"logbook.table.airTemperature\")}\n                                </td>\n                                <td>\n                                    {this.props.t(\"logbook.table.waterTemperature\")}\n                                </td>\n                                <td>\n                                    {this.props.t(\"logbook.table.divingType\")}\n                                </td>\n                                <td>PDF</td>\n                                <td>\n                                    {this.props.t(\"logbook.table.UPDATE\")}\n                                </td>\n                                <td>\n                                    {this.props.t(\"logbook.table.DELETE\")}\n                                </td>\n                            </tr>\n                        </thead>\n                        <tbody ref={this.bodyTableRef}>\n                            { this.showTableRows() }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    }\n\n    setDeletedLogbookId(value) {\n        this.setState({ deletedLogbookId: value }, () => {\n            let id = this.state.deletedLogbookId;\n            let index = 0;\n            this.logbooks.map((logbook, index) => {\n                if(logbook.id === id) {\n                    this.logbooks.splice(index, 1);\n                    this.forceUpdate();\n                }\n                index++;\n            });\n        });\n    }\n\n    render() {\n        let isEmptyLogbook = this.state.isEmptyLogbook;\n\n        return (\n            <div className=\"logbook-container\">\n                <Link \n                    to=\"/add/dive\"\n                >\n                    <div className=\"btn btn-primary btn-padding\">\n                        {this.props.t(\"logbook.addButton\")}\n                    </div>\n                </Link>\n                { !isEmptyLogbook && this.showTable() } \n                <NoLogbookData isEmptyLogbook={this.state.isEmptyLogbook} />\n            </div>\n        );\n    }\n}\n\nfunction NoLogbookData(props) {\n    if(props.isEmptyLogbook) {\n        return (\n            <div className=\"alert alert-danger alert-margin\">\n                No data in your logbook.\n            </div>\n        );\n    }\n    return null;\n}\n\nexport default withTranslation(\"common\")(withRouter(Logbook));"]},"metadata":{},"sourceType":"module"}