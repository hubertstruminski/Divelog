{"ast":null,"code":"var _jsxFileName = \"/home/msi/Pulpit/Divelog/react-divelog/src/components/googleMaps/GoogleMap.js\";\nimport React from 'react';\nimport '../../css/GoogleMap.css';\nimport { Map, Marker, GoogleApiWrapper, InfoWindow } from 'google-maps-react';\nimport ModalVertically from '../Layout/ModalVertically';\nimport $ from 'jquery';\n\nclass GoogleMap extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.showMarkers = () => {\n      return this.state.markers.map((marker, index) => {\n        return React.createElement(Marker, {\n          key: index,\n          position: {\n            lat: marker.lat,\n            lng: marker.lng\n          },\n          onClick: this.onMarkerClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37\n          },\n          __self: this\n        });\n      });\n    };\n\n    this.onMarkerClick = (props, marker, e) => {\n      this.setState({\n        selectedPlace: props,\n        activeMarker: marker,\n        showingInfoWindow: true\n      });\n    };\n\n    this.onClose = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    };\n\n    this.state = {\n      isLoading: true,\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n      markers: [],\n      isClickedPlace: false\n    };\n    this.onMapClick = this.onMapClick.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      isLoading: false\n    });\n    this.setState({\n      markers: [{\n        name: 'ParyÅ¼',\n        lat: 48.887,\n        lng: 2.343\n      }, {\n        name: 'Hubert StrumiÅ„ski',\n        lat: 49.748,\n        lng: 20.731\n      }, {\n        name: 'Berlin',\n        lat: 52.518,\n        lng: 13.373\n      }]\n    });\n  }\n\n  onMapClick(t, map, coord) {\n    const latLng = coord.latLng;\n    const lat = latLng.lat();\n    const lng = latLng.lng();\n    $(\"#modalCenter\").modal('show');\n  }\n\n  render() {\n    const mapStyle = {\n      width: '70%',\n      height: '60%',\n      position: 'absolute',\n      left: '50%',\n      top: '50%',\n      '-webkit-transform': 'translate(-50%, -50%)',\n      transform: 'translate(-50%, -50%)'\n    };\n    let loadingScreen = React.createElement(\"div\", {\n      class: \"d-flex justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"spinner-grow\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      class: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Loading...\")));\n    let map = React.createElement(\"div\", {\n      className: \"google-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(Map, {\n      google: this.props.google,\n      zoom: 5,\n      style: mapStyle,\n      initialCenter: {\n        lat: 50.087,\n        lng: 14.421\n      },\n      onClick: this.onMapClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, this.showMarkers(), React.createElement(InfoWindow, {\n      marker: this.state.activeMarker,\n      visible: this.state.showingInfoWindow,\n      onClose: this.onClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"alert alert-success\",\n      role: \"alert\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, this.state.selectedPlace.name)))), React.createElement(ModalVertically, {\n      isClickedPlace: this.state.isClickedPlace,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }));\n    let content = this.state.isLoading ? loadingScreen : map;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, content);\n  }\n\n}\n\nexport default GoogleApiWrapper(props => ({\n  apiKey: 'AIzaSyBgb4kpatKEjsOGsxplxFyRfw1K_wGhLTo',\n  language: props.language\n}))(GoogleMap);","map":{"version":3,"sources":["/home/msi/Pulpit/Divelog/react-divelog/src/components/googleMaps/GoogleMap.js"],"names":["React","Map","Marker","GoogleApiWrapper","InfoWindow","ModalVertically","$","GoogleMap","Component","constructor","props","showMarkers","state","markers","map","marker","index","lat","lng","onMarkerClick","e","setState","selectedPlace","activeMarker","showingInfoWindow","onClose","isLoading","isClickedPlace","onMapClick","bind","componentDidMount","name","t","coord","latLng","modal","render","mapStyle","width","height","position","left","top","transform","loadingScreen","google","content","apiKey","language"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../css/GoogleMap.css';\nimport { Map, Marker, GoogleApiWrapper, InfoWindow } from 'google-maps-react';\nimport ModalVertically from '../Layout/ModalVertically';\nimport $ from 'jquery';\n\nclass GoogleMap extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isLoading: true,\n            showingInfoWindow: false,\n            activeMarker: {},\n            selectedPlace: {},\n            markers: [],\n            isClickedPlace: false\n        }\n        this.onMapClick = this.onMapClick.bind(this);\n    }\n\n    componentDidMount() {\n        this.setState({ isLoading: false });\n\n        this.setState({\n            markers: [\n                {name: 'ParyÅ¼', lat: 48.887, lng: 2.343 },\n                {name: 'Hubert StrumiÅ„ski', lat: 49.748, lng: 20.731 },\n                {name: 'Berlin', lat: 52.518, lng: 13.373  }\n            ]\n        })\n    }\n\n    showMarkers = () => {\n        return this.state.markers.map((marker, index) => {\n            return (\n                <Marker \n                    key={index} \n                    position={{ lat: marker.lat, lng: marker.lng }}\n                    onClick={this.onMarkerClick}\n                />\n            );\n        })\n    }\n\n    onMarkerClick = (props, marker, e) => {\n        this.setState({\n            selectedPlace: props,\n            activeMarker: marker,\n            showingInfoWindow: true\n        });\n    }\n\n    onClose = props => {\n        if(this.state.showingInfoWindow) {\n            this.setState({\n                showingInfoWindow: false,\n                activeMarker: null\n            });\n        }\n    };\n\n    onMapClick(t, map, coord) {\n        const { latLng } = coord;\n        const lat = latLng.lat();\n        const lng = latLng.lng();\n\n        $(\"#modalCenter\").modal('show');\n    }\n\n    render() {\n        const mapStyle = {\n            width: '70%',\n            height: '60%',\n            position: 'absolute',\n            left: '50%',\n            top: '50%',\n            '-webkit-transform': 'translate(-50%, -50%)',\n            transform: 'translate(-50%, -50%)'\n        }\n\n        let loadingScreen = (\n            <div class=\"d-flex justify-content-center\">\n                <div class=\"spinner-grow\" role=\"status\">\n                    <span class=\"sr-only\">Loading...</span>\n                </div>\n            </div>\n        )\n\n        let map = (\n            <div className=\"google-container\">\n                <Map\n                    google={this.props.google}\n                    zoom={5}\n                    style={mapStyle}\n                    initialCenter={{ lat: 50.087, lng: 14.421}}\n                    onClick={this.onMapClick}\n                >\n                    { this.showMarkers() }\n                    <InfoWindow\n                        marker={this.state.activeMarker}\n                        visible={this.state.showingInfoWindow}\n                        onClose={this.onClose}\n                    >\n                    <div className=\"alert alert-success\" role=\"alert\">\n                        <h4>{this.state.selectedPlace.name}</h4>\n                    </div>\n                    </InfoWindow>\n                </Map>\n                <ModalVertically \n                    isClickedPlace={this.state.isClickedPlace} \n                />\n            </div>\n            \n        )\n        let content = this.state.isLoading ? loadingScreen : map;\n\n        return (\n            <div>\n                { content }\n            </div>\n        );\n    }\n}\n\nexport default GoogleApiWrapper(\n    (props) => ({\n      apiKey: 'AIzaSyBgb4kpatKEjsOGsxplxFyRfw1K_wGhLTo',\n      language: props.language,\n    }\n  ))(GoogleMap);"]},"metadata":{},"sourceType":"module"}