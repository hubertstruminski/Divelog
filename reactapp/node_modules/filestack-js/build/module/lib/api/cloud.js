/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { removeEmpty } from '../utils';
// import { requestWithSource, request } from '../api/request';
import { FilestackError } from './../../filestack_error';
import { FsRequest, FsCancelToken } from '../request';
/**
 * @private
 */
export var PICKER_KEY = '__fs_picker_token';
/**
 * key for picker callback url (specifies which tab will be opened after opening picker)
 * @private
 */
export var CALLBACK_URL_KEY = 'fs-tab';
/**
 * @private
 */
var CloudClient = /** @class */ (function () {
    function CloudClient(session, options) {
        /**
         * Returns flag if token should be cached in local storage
         *
         * @private
         * @type {boolean}
         * @memberof CloudClient
         */
        this.cache = false;
        /**
         * Flag for in-app browser setup
         * (in-app browsers are not supporting new window so we need to save token to session cache)
         *
         * @private
         * @memberof CloudClient
         */
        this._isInAppBrowser = false;
        this.session = session;
        this.cloudApiUrl = session.urls.cloudApiUrl;
        if (options && options.sessionCache) {
            this.cache = options.sessionCache;
        }
    }
    Object.defineProperty(CloudClient.prototype, "token", {
        get: function () {
            if (this.cache) {
                var token = localStorage.getItem(PICKER_KEY);
                if (token)
                    return token;
            }
            if (this._isInAppBrowser) {
                return sessionStorage.getItem(PICKER_KEY);
            }
            return this._token;
        },
        set: function (key) {
            if (this.cache) {
                localStorage.setItem(PICKER_KEY, key);
            }
            if (this._isInAppBrowser) {
                sessionStorage.setItem(PICKER_KEY, key);
            }
            this._token = key;
        },
        enumerable: true,
        configurable: true
    });
    CloudClient.prototype.prefetch = function () {
        var _this = this;
        var params = {
            apikey: this.session.apikey,
        };
        return FsRequest
            .get(this.cloudApiUrl + "/prefetch", { params: params })
            .then(function (res) { return res.data; })
            .then(function (data) {
            if (data.inapp_browser) {
                _this._isInAppBrowser = true;
            }
            return data;
        });
    };
    CloudClient.prototype.list = function (clouds, cancelTokenInput) {
        var _this = this;
        var payload = {
            apikey: this.session.apikey,
            clouds: clouds,
            flow: 'web',
            token: this.token,
        };
        if (this._isInAppBrowser) {
            payload.appurl = this.currentAppUrl();
        }
        if (this.session.policy && this.session.signature) {
            payload.policy = this.session.policy;
            payload.signature = this.session.signature;
        }
        var options = {};
        if (cancelTokenInput) {
            var cancelToken = new FsCancelToken();
            cancelTokenInput.cancel = cancelToken.cancel.bind(cancelToken);
            options.cancelToken = cancelToken;
        }
        return FsRequest
            .post(this.cloudApiUrl + "/folder/list", payload, options)
            .then(function (res) {
            if (res.data && res.data.token) {
                _this.token = res.data.token;
            }
            return res.data;
        });
    };
    CloudClient.prototype.store = function (name, path, options, customSource, cancelTokenInput) {
        var _a;
        var _this = this;
        if (options === void 0) { options = {}; }
        if (customSource === void 0) { customSource = {}; }
        // Default to S3
        if (options.location === undefined) {
            options.location = 's3';
        }
        var payload = {
            apikey: this.session.apikey,
            token: this.token,
            flow: 'web',
            clouds: (_a = {},
                _a[name] = {
                    path: path,
                    store: removeEmpty(options),
                },
                _a),
        };
        if (name === 'customsource' && customSource.customSourcePath) {
            payload.clouds.customsource.customSourcePath = customSource.customSourcePath;
        }
        if (name === 'customsource' && customSource.customSourceContainer) {
            payload.clouds.customsource.customSourceContainer = customSource.customSourceContainer;
        }
        if (this.session.policy && this.session.signature) {
            payload.policy = this.session.policy;
            payload.signature = this.session.signature;
        }
        var requestOptions = {};
        if (cancelTokenInput) {
            var cancelToken = new FsCancelToken();
            cancelTokenInput.cancel = cancelToken.cancel.bind(cancelToken);
            requestOptions.cancelToken = cancelToken;
        }
        return FsRequest
            .post(this.cloudApiUrl + "/store/", payload, requestOptions)
            .then(function (res) {
            if (res.data && res.data.token) {
                _this.token = res.data.token;
            }
            if (res.data && res.data[name]) {
                return res.data[name];
            }
            return res.data;
        });
    };
    CloudClient.prototype.logout = function (name) {
        var _a;
        var payload = {
            apikey: this.session.apikey,
            flow: 'web',
            token: this.token,
        };
        if (name) {
            payload.clouds = (_a = {}, _a[name] = {}, _a);
        }
        else {
            if (this.cache) {
                // No name means logout of ALL clouds. Clear local session.
                localStorage.removeItem(PICKER_KEY);
            }
            if (this._isInAppBrowser) {
                sessionStorage.removeItem(PICKER_KEY);
            }
        }
        return FsRequest
            .post(this.cloudApiUrl + "/auth/logout", payload)
            .then(function (res) {
            if (res.data && res.data[name]) {
                return res.data[name];
            }
            return res.data;
        });
    };
    CloudClient.prototype.metadata = function (url) {
        var payload = {
            apikey: this.session.apikey,
            url: url,
        };
        if (this.session.policy && this.session.signature) {
            payload.policy = this.session.policy;
            payload.signature = this.session.signature;
        }
        return FsRequest
            .post(this.cloudApiUrl + "/metadata", payload)
            .then(function (res) { return res.data; });
    };
    // OpenTok API Endpoints
    CloudClient.prototype.tokInit = function (type) {
        if (type !== 'video' && type !== 'audio') {
            throw new FilestackError('Type must be one of video or audio.');
        }
        return FsRequest
            .post(this.cloudApiUrl + "/recording/" + type + "/init").then(function (res) { return res.data; });
    };
    CloudClient.prototype.tokStart = function (type, key, sessionId) {
        if (type !== 'video' && type !== 'audio') {
            throw new FilestackError('Type must be one of video or audio.');
        }
        var payload = {
            apikey: key,
            session_id: sessionId,
        };
        return FsRequest
            .post(this.cloudApiUrl + "/recording/" + type + "/start", payload)
            .then(function (res) { return res.data; });
    };
    CloudClient.prototype.tokStop = function (type, key, sessionId, archiveId) {
        if (type !== 'video' && type !== 'audio') {
            throw new FilestackError('Type must be one of video or audio.');
        }
        var payload = {
            apikey: key,
            session_id: sessionId,
            archive_id: archiveId,
        };
        return FsRequest
            .post(this.cloudApiUrl + "/recording/" + type + "/stop", payload)
            .then(function (res) { return res.data; });
    };
    CloudClient.prototype.currentAppUrl = function () {
        if (!window.URLSearchParams) {
            return undefined;
        }
        // set init string for clouds backend,
        // After this cloud service can make redirect back to current page url with selected tab for given cloud
        // if param exists and its value is init, backend will fill it with cloud name
        var searchParams = new URLSearchParams(window.location.search);
        searchParams.set(CALLBACK_URL_KEY, 'init');
        return window.location.protocol + "//" + window.location.host + window.location.pathname + "?" + searchParams.toString();
    };
    return CloudClient;
}());
export { CloudClient };

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvYXBpL2Nsb3VkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUVILE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFHdkMsK0RBQStEO0FBQy9ELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUV0RDs7R0FFRztBQUNILE1BQU0sQ0FBQyxJQUFNLFVBQVUsR0FBRyxtQkFBbUIsQ0FBQztBQUU5Qzs7O0dBR0c7QUFDSCxNQUFNLENBQUMsSUFBTSxnQkFBZ0IsR0FBRyxRQUFRLENBQUM7QUFFekM7O0dBRUc7QUFDSDtJQStCRSxxQkFBWSxPQUFnQixFQUFFLE9BQXVCO1FBM0JyRDs7Ozs7O1dBTUc7UUFDSyxVQUFLLEdBQVksS0FBSyxDQUFDO1FBVy9COzs7Ozs7V0FNRztRQUNLLG9CQUFlLEdBQUcsS0FBSyxDQUFDO1FBRzlCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7UUFFNUMsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLFlBQVksRUFBRTtZQUNuQyxJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUM7U0FDbkM7SUFDSCxDQUFDO0lBRUQsc0JBQUksOEJBQUs7YUFBVDtZQUNFLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtnQkFDZCxJQUFNLEtBQUssR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUMvQyxJQUFJLEtBQUs7b0JBQUUsT0FBTyxLQUFLLENBQUM7YUFDekI7WUFFRCxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7Z0JBQ3hCLE9BQU8sY0FBYyxDQUFDLE9BQU8sQ0FBQyxVQUFV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QUFlLEVBQUU7WUFDM0IsT0FBTyxTQUFTLENBQUM7U0FDbEI7UUFFRCxzQ0FBc0M7UUFDdEMsd0dBQXdHO1FBQ3hHLDhFQUE4RTtRQUM5RSxJQUFNLFlBQVksR0FBRyxJQUFJLGVBQWUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pFLFlBQVksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFM0MsT0FBVSxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsVUFBSyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsU0FBSSxZQUFZLENBQUMsUUFBUSxFQUFJLENBQUM7SUFDdEgsQ0FBQztJQUNILGtCQUFDO0FBQUQsQ0E3UUEsQUE2UUMsSUFBQSIsImZpbGUiOiJsaWIvYXBpL2Nsb3VkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxOCBieSBGaWxlc3RhY2suXG4gKiBTb21lIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgcmVtb3ZlRW1wdHkgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBTdG9yZVBhcmFtcyB9IGZyb20gJy4uL2ZpbGVsaW5rJztcbmltcG9ydCB7IENsaWVudE9wdGlvbnMsIFNlc3Npb24gfSBmcm9tICcuLi9jbGllbnQnO1xuLy8gaW1wb3J0IHsgcmVxdWVzdFdpdGhTb3VyY2UsIHJlcXVlc3QgfSBmcm9tICcuLi9hcGkvcmVxdWVzdCc7XG5pbXBvcnQgeyBGaWxlc3RhY2tFcnJvciB9IGZyb20gJy4vLi4vLi4vZmlsZXN0YWNrX2Vycm9yJztcbmltcG9ydCB7IEZzUmVxdWVzdCwgRnNDYW5jZWxUb2tlbiB9IGZyb20gJy4uL3JlcXVlc3QnO1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjb25zdCBQSUNLRVJfS0VZID0gJ19fZnNfcGlja2VyX3Rva2VuJztcblxuLyoqXG4gKiBrZXkgZm9yIHBpY2tlciBjYWxsYmFjayB1cmwgKHNwZWNpZmllcyB3aGljaCB0YWIgd2lsbCBiZSBvcGVuZWQgYWZ0ZXIgb3BlbmluZyBwaWNrZXIpXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgY29uc3QgQ0FMTEJBQ0tfVVJMX0tFWSA9ICdmcy10YWInO1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjbGFzcyBDbG91ZENsaWVudCB7XG4gIHNlc3Npb246IFNlc3Npb247XG4gIGNsb3VkQXBpVXJsOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZmxhZyBpZiB0b2tlbiBzaG91bGQgYmUgY2FjaGVkIGluIGxvY2FsIHN0b3JhZ2VcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBtZW1iZXJvZiBDbG91ZENsaWVudFxuICAgKi9cbiAgcHJpdmF0ZSBjYWNoZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBUb2tlbiByZXR1cm5lZCBmcm9tIGFwaSBmb3IgYWNjZXNzaW5nIGNsb3Vkc1xuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAbWVtYmVyb2YgQ2xvdWRDbGllbnRcbiAgICovXG4gIHByaXZhdGUgX3Rva2VuOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEZsYWcgZm9yIGluLWFwcCBicm93c2VyIHNldHVwXG4gICAqIChpbi1hcHAgYnJvd3NlcnMgYXJlIG5vdCBzdXBwb3J0aW5nIG5ldyB3aW5kb3cgc28gd2UgbmVlZCB0byBzYXZlIHRva2VuIHRvIHNlc3Npb24gY2FjaGUpXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBtZW1iZXJvZiBDbG91ZENsaWVudFxuICAgKi9cbiAgcHJpdmF0ZSBfaXNJbkFwcEJyb3dzZXIgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihzZXNzaW9uOiBTZXNzaW9uLCBvcHRpb25zPzogQ2xpZW50T3B0aW9ucykge1xuICAgIHRoaXMuc2Vzc2lvbiA9IHNlc3Npb247XG4gICAgdGhpcy5jbG91ZEFwaVVybCA9IHNlc3Npb24udXJscy5jbG91ZEFwaVVybDtcblxuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuc2Vzc2lvbkNhY2hlKSB7XG4gICAgICB0aGlzLmNhY2hlID0gb3B0aW9ucy5zZXNzaW9uQ2FjaGU7XG4gICAgfVxuICB9XG5cbiAgZ2V0IHRva2VuKCkge1xuICAgIGlmICh0aGlzLmNhY2hlKSB7XG4gICAgICBjb25zdCB0b2tlbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFBJQ0tFUl9LRVkpO1xuICAgICAgaWYgKHRva2VuKSByZXR1cm4gdG9rZW47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2lzSW5BcHBCcm93c2VyKSB7XG4gICAgICByZXR1cm4gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShQSUNLRVJfS0VZKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fdG9rZW47XG4gIH1cblxuICBzZXQgdG9rZW4oa2V5KSB7XG4gICAgaWYgKHRoaXMuY2FjaGUpIHtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFBJQ0tFUl9LRVksIGtleSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2lzSW5BcHBCcm93c2VyKSB7XG4gICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFBJQ0tFUl9LRVksIGtleSk7XG4gICAgfVxuXG4gICAgdGhpcy5fdG9rZW4gPSBrZXk7XG4gIH1cblxuICBwcmVmZXRjaCgpIHtcbiAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICBhcGlrZXk6IHRoaXMuc2Vzc2lvbi5hcGlrZXksXG4gICAgfTtcbiAgICByZXR1cm4gRnNSZXF1ZXN0XG4gICAgICAuZ2V0KGAke3RoaXMuY2xvdWRBcGlVcmx9L3ByZWZldGNoYCwgeyBwYXJhbXMgfSlcbiAgICAgIC50aGVuKHJlcyA9PiByZXMuZGF0YSlcbiAgICAgIC50aGVuKGRhdGEgPT4ge1xuICAgICAgICBpZiAoZGF0YS5pbmFwcF9icm93c2VyKSB7XG4gICAgICAgICAgdGhpcy5faXNJbkFwcEJyb3dzZXIgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9KTtcbiAgfVxuXG4gIGxpc3QoY2xvdWRzOiBhbnksIGNhbmNlbFRva2VuSW5wdXQ/OiBhbnkpIHtcbiAgICBjb25zdCBwYXlsb2FkOiBhbnkgPSB7XG4gICAgICBhcGlrZXk6IHRoaXMuc2Vzc2lvbi5hcGlrZXksXG4gICAgICBjbG91ZHMsXG4gICAgICBmbG93OiAnd2ViJyxcbiAgICAgIHRva2VuOiB0aGlzLnRva2VuLFxuICAgIH07XG5cbiAgICBpZiAodGhpcy5faXNJbkFwcEJyb3dzZXIpIHtcbiAgICAgIHBheWxvYWQuYXBwdXJsID0gdGhpcy5jdXJyZW50QXBwVXJsKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc2Vzc2lvbi5wb2xpY3kgJiYgdGhpcy5zZXNzaW9uLnNpZ25hdHVyZSkge1xuICAgICAgcGF5bG9hZC5wb2xpY3kgPSB0aGlzLnNlc3Npb24ucG9saWN5O1xuICAgICAgcGF5bG9hZC5zaWduYXR1cmUgPSB0aGlzLnNlc3Npb24uc2lnbmF0dXJlO1xuICAgIH1cblxuICAgIGxldCBvcHRpb25zOiBhbnkgPSB7fTtcblxuICAgIGlmIChjYW5jZWxUb2tlbklucHV0KSB7XG4gICAgICBjb25zdCBjYW5jZWxUb2tlbiA9IG5ldyBGc0NhbmNlbFRva2VuKCk7XG4gICAgICBjYW5jZWxUb2tlbklucHV0LmNhbmNlbCA9IGNhbmNlbFRva2VuLmNhbmNlbC5iaW5kKGNhbmNlbFRva2VuKTtcbiAgICAgIG9wdGlvbnMuY2FuY2VsVG9rZW4gPSBjYW5jZWxUb2tlbjtcbiAgICB9XG5cbiAgICByZXR1cm4gRnNSZXF1ZXN0XG4gICAgICAucG9zdChgJHt0aGlzLmNsb3VkQXBpVXJsfS9mb2xkZXIvbGlzdGAsIHBheWxvYWQsIG9wdGlvbnMpXG4gICAgICAudGhlbihyZXMgPT4ge1xuICAgICAgICBpZiAocmVzLmRhdGEgJiYgcmVzLmRhdGEudG9rZW4pIHtcbiAgICAgICAgICB0aGlzLnRva2VuID0gcmVzLmRhdGEudG9rZW47XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzLmRhdGE7XG4gICAgICB9KTtcbiAgfVxuXG4gIHN0b3JlKG5hbWU6IHN0cmluZywgcGF0aDogc3RyaW5nLCBvcHRpb25zOiBTdG9yZVBhcmFtcyA9IHt9LCBjdXN0b21Tb3VyY2U6IGFueSA9IHt9LCBjYW5jZWxUb2tlbklucHV0PzogYW55KSB7XG4gICAgLy8gRGVmYXVsdCB0byBTM1xuICAgIGlmIChvcHRpb25zLmxvY2F0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG9wdGlvbnMubG9jYXRpb24gPSAnczMnO1xuICAgIH1cblxuICAgIGNvbnN0IHBheWxvYWQ6IGFueSA9IHtcbiAgICAgIGFwaWtleTogdGhpcy5zZXNzaW9uLmFwaWtleSxcbiAgICAgIHRva2VuOiB0aGlzLnRva2VuLFxuICAgICAgZmxvdzogJ3dlYicsXG4gICAgICBjbG91ZHM6IHtcbiAgICAgICAgW25hbWVdOiB7XG4gICAgICAgICAgcGF0aCxcbiAgICAgICAgICBzdG9yZTogcmVtb3ZlRW1wdHkob3B0aW9ucyksXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH07XG5cbiAgICBpZiAobmFtZSA9PT0gJ2N1c3RvbXNvdXJjZScgJiYgY3VzdG9tU291cmNlLmN1c3RvbVNvdXJjZVBhdGgpIHtcbiAgICAgIHBheWxvYWQuY2xvdWRzLmN1c3RvbXNvdXJjZS5jdXN0b21Tb3VyY2VQYXRoID0gY3VzdG9tU291cmNlLmN1c3RvbVNvdXJjZVBhdGg7XG4gICAgfVxuXG4gICAgaWYgKG5hbWUgPT09ICdjdXN0b21zb3VyY2UnICYmIGN1c3RvbVNvdXJjZS5jdXN0b21Tb3VyY2VDb250YWluZXIpIHtcbiAgICAgIHBheWxvYWQuY2xvdWRzLmN1c3RvbXNvdXJjZS5jdXN0b21Tb3VyY2VDb250YWluZXIgPSBjdXN0b21Tb3VyY2UuY3VzdG9tU291cmNlQ29udGFpbmVyO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnNlc3Npb24ucG9saWN5ICYmIHRoaXMuc2Vzc2lvbi5zaWduYXR1cmUpIHtcbiAgICAgIHBheWxvYWQucG9saWN5ID0gdGhpcy5zZXNzaW9uLnBvbGljeTtcbiAgICAgIHBheWxvYWQuc2lnbmF0dXJlID0gdGhpcy5zZXNzaW9uLnNpZ25hdHVyZTtcbiAgICB9XG5cbiAgICBsZXQgcmVxdWVzdE9wdGlvbnM6IGFueSA9IHt9O1xuXG4gICAgaWYgKGNhbmNlbFRva2VuSW5wdXQpIHtcbiAgICAgIGNvbnN0IGNhbmNlbFRva2VuID0gbmV3IEZzQ2FuY2VsVG9rZW4oKTtcbiAgICAgIGNhbmNlbFRva2VuSW5wdXQuY2FuY2VsID0gY2FuY2VsVG9rZW4uY2FuY2VsLmJpbmQoY2FuY2VsVG9rZW4pO1xuICAgICAgcmVxdWVzdE9wdGlvbnMuY2FuY2VsVG9rZW4gPSBjYW5jZWxUb2tlbjtcbiAgICB9XG5cbiAgICByZXR1cm4gRnNSZXF1ZXN0XG4gICAgICAucG9zdChgJHt0aGlzLmNsb3VkQXBpVXJsfS9zdG9yZS9gLCBwYXlsb2FkLCByZXF1ZXN0T3B0aW9ucylcbiAgICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICAgIGlmIChyZXMuZGF0YSAmJiByZXMuZGF0YS50b2tlbikge1xuICAgICAgICAgIHRoaXMudG9rZW4gPSByZXMuZGF0YS50b2tlbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZXMuZGF0YSAmJiByZXMuZGF0YVtuYW1lXSkge1xuICAgICAgICAgIHJldHVybiByZXMuZGF0YVtuYW1lXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXMuZGF0YTtcbiAgICAgIH0pO1xuICB9XG5cbiAgbG9nb3V0KG5hbWU/OiBzdHJpbmcpIHtcbiAgICBjb25zdCBwYXlsb2FkOiBhbnkgPSB7XG4gICAgICBhcGlrZXk6IHRoaXMuc2Vzc2lvbi5hcGlrZXksXG4gICAgICBmbG93OiAnd2ViJyxcbiAgICAgIHRva2VuOiB0aGlzLnRva2VuLFxuICAgIH07XG5cbiAgICBpZiAobmFtZSkge1xuICAgICAgcGF5bG9hZC5jbG91ZHMgPSB7IFtuYW1lXToge30gfTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuY2FjaGUpIHtcbiAgICAgICAgLy8gTm8gbmFtZSBtZWFucyBsb2dvdXQgb2YgQUxMIGNsb3Vkcy4gQ2xlYXIgbG9jYWwgc2Vzc2lvbi5cbiAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oUElDS0VSX0tFWSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9pc0luQXBwQnJvd3Nlcikge1xuICAgICAgICBzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKFBJQ0tFUl9LRVkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBGc1JlcXVlc3RcbiAgICAgIC5wb3N0KGAke3RoaXMuY2xvdWRBcGlVcmx9L2F1dGgvbG9nb3V0YCwgcGF5bG9hZClcbiAgICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICAgIGlmIChyZXMuZGF0YSAmJiByZXMuZGF0YVtuYW1lXSkge1xuICAgICAgICAgIHJldHVybiByZXMuZGF0YVtuYW1lXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzLmRhdGE7XG4gICAgICB9KTtcbiAgfVxuXG4gIG1ldGFkYXRhKHVybDogc3RyaW5nKSB7XG4gICAgY29uc3QgcGF5bG9hZDogYW55ID0ge1xuICAgICAgYXBpa2V5OiB0aGlzLnNlc3Npb24uYXBpa2V5LFxuICAgICAgdXJsLFxuICAgIH07XG5cbiAgICBpZiAodGhpcy5zZXNzaW9uLnBvbGljeSAmJiB0aGlzLnNlc3Npb24uc2lnbmF0dXJlKSB7XG4gICAgICBwYXlsb2FkLnBvbGljeSA9IHRoaXMuc2Vzc2lvbi5wb2xpY3k7XG4gICAgICBwYXlsb2FkLnNpZ25hdHVyZSA9IHRoaXMuc2Vzc2lvbi5zaWduYXR1cmU7XG4gICAgfVxuXG4gICAgcmV0dXJuIEZzUmVxdWVzdFxuICAgICAgLnBvc3QoYCR7dGhpcy5jbG91ZEFwaVVybH0vbWV0YWRhdGFgLCBwYXlsb2FkKVxuICAgICAgLnRoZW4ocmVzID0+IHJlcy5kYXRhKTtcbiAgfVxuXG4gIC8vIE9wZW5Ub2sgQVBJIEVuZHBvaW50c1xuICB0b2tJbml0KHR5cGU6IHN0cmluZykge1xuICAgIGlmICh0eXBlICE9PSAndmlkZW8nICYmIHR5cGUgIT09ICdhdWRpbycpIHtcbiAgICAgIHRocm93IG5ldyBGaWxlc3RhY2tFcnJvcignVHlwZSBtdXN0IGJlIG9uZSBvZiB2aWRlbyBvciBhdWRpby4nKTtcbiAgICB9XG4gICAgcmV0dXJuIEZzUmVxdWVzdFxuICAgICAgLnBvc3QoYCR7dGhpcy5jbG91ZEFwaVVybH0vcmVjb3JkaW5nLyR7dHlwZX0vaW5pdGApLnRoZW4ocmVzID0+IHJlcy5kYXRhKTtcbiAgfVxuXG4gIHRva1N0YXJ0KHR5cGU6IHN0cmluZywga2V5OiBzdHJpbmcsIHNlc3Npb25JZDogc3RyaW5nKSB7XG4gICAgaWYgKHR5cGUgIT09ICd2aWRlbycgJiYgdHlwZSAhPT0gJ2F1ZGlvJykge1xuICAgICAgdGhyb3cgbmV3IEZpbGVzdGFja0Vycm9yKCdUeXBlIG11c3QgYmUgb25lIG9mIHZpZGVvIG9yIGF1ZGlvLicpO1xuICAgIH1cbiAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgYXBpa2V5OiBrZXksXG4gICAgICBzZXNzaW9uX2lkOiBzZXNzaW9uSWQsXG4gICAgfTtcblxuICAgIHJldHVybiBGc1JlcXVlc3RcbiAgICAgIC5wb3N0KGAke3RoaXMuY2xvdWRBcGlVcmx9L3JlY29yZGluZy8ke3R5cGV9L3N0YXJ0YCwgcGF5bG9hZClcbiAgICAgIC50aGVuKHJlcyA9PiByZXMuZGF0YSk7XG4gIH1cblxuICB0b2tTdG9wKHR5cGU6IHN0cmluZywga2V5OiBzdHJpbmcsIHNlc3Npb25JZDogc3RyaW5nLCBhcmNoaXZlSWQ6IHN0cmluZykge1xuICAgIGlmICh0eXBlICE9PSAndmlkZW8nICYmIHR5cGUgIT09ICdhdWRpbycpIHtcbiAgICAgIHRocm93IG5ldyBGaWxlc3RhY2tFcnJvcignVHlwZSBtdXN0IGJlIG9uZSBvZiB2aWRlbyBvciBhdWRpby4nKTtcbiAgICB9XG5cbiAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgYXBpa2V5OiBrZXksXG4gICAgICBzZXNzaW9uX2lkOiBzZXNzaW9uSWQsXG4gICAgICBhcmNoaXZlX2lkOiBhcmNoaXZlSWQsXG4gICAgfTtcblxuICAgIHJldHVybiBGc1JlcXVlc3RcbiAgICAgIC5wb3N0KGAke3RoaXMuY2xvdWRBcGlVcmx9L3JlY29yZGluZy8ke3R5cGV9L3N0b3BgLCBwYXlsb2FkKVxuICAgICAgLnRoZW4ocmVzID0+IHJlcy5kYXRhKTtcbiAgfVxuXG4gIHByaXZhdGUgY3VycmVudEFwcFVybCgpIHtcbiAgICBpZiAoIXdpbmRvdy5VUkxTZWFyY2hQYXJhbXMpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLy8gc2V0IGluaXQgc3RyaW5nIGZvciBjbG91ZHMgYmFja2VuZCxcbiAgICAvLyBBZnRlciB0aGlzIGNsb3VkIHNlcnZpY2UgY2FuIG1ha2UgcmVkaXJlY3QgYmFjayB0byBjdXJyZW50IHBhZ2UgdXJsIHdpdGggc2VsZWN0ZWQgdGFiIGZvciBnaXZlbiBjbG91ZFxuICAgIC8vIGlmIHBhcmFtIGV4aXN0cyBhbmQgaXRzIHZhbHVlIGlzIGluaXQsIGJhY2tlbmQgd2lsbCBmaWxsIGl0IHdpdGggY2xvdWQgbmFtZVxuICAgIGNvbnN0IHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XG4gICAgc2VhcmNoUGFyYW1zLnNldChDQUxMQkFDS19VUkxfS0VZLCAnaW5pdCcpO1xuXG4gICAgcmV0dXJuIGAke3dpbmRvdy5sb2NhdGlvbi5wcm90b2NvbH0vLyR7d2luZG93LmxvY2F0aW9uLmhvc3R9JHt3aW5kb3cubG9jYXRpb24ucGF0aG5hbWV9PyR7c2VhcmNoUGFyYW1zLnRvU3RyaW5nKCl9YDtcbiAgfVxufVxuIl19
