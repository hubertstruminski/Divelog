/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { __awaiter, __generator } from "tslib";
import { storeURL } from './store';
import { Filelink } from './../filelink';
import * as nock from 'nock';
var testHost = 'https://test.com';
var testUrl = 'testurl';
var mockGet = jest.fn().mockName('mockGet');
var mockHandle = 'mockHandle';
jest.mock('./../filelink');
var mockedSession = {
    apikey: 'fakeApikey',
    urls: {
        cdnUrl: testHost,
        fileApiUrl: 'fakeApiUrl',
        uploadApiUrl: 'fakeUploadApiUrl',
        cloudApiUrl: 'fakeCloudApiUrl',
        pickerUrl: 'fakePickerUrl',
    },
};
var responseObj = {
    filename: 'testFilename',
    handle: 'testHandle',
    url: 'testUrl',
    type: 'testMimetype',
    mimetype: 'testMimetype',
    size: 1,
};
var scope = nock(testHost);
describe('StoreURL', function () {
    beforeEach(function () {
        spyOn(Filelink.prototype, 'toString').and.returnValue(testHost + "/" + testUrl);
        mockGet.mockReturnValue(responseObj);
        scope
            .get("/" + testUrl)
            .delay(15)
            .reply(200, mockGet);
    });
    it('should call correct store method', function () { return __awaiter(void 0, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = expect;
                    return [4 /*yield*/, storeURL(mockedSession, 'http://test.com')];
                case 1:
                    _a.apply(void 0, [_b.sent()]).toEqual(responseObj);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should respect passed security and policy', function () { return __awaiter(void 0, void 0, void 0, function () {
        var fakeSecurity, res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    fakeSecurity = {
                        signature: 'fakeS',
                        policy: 'fakeP',
                    };
                    return [4 /*yield*/, storeURL(mockedSession, mockHandle, {}, null, fakeSecurity)];
                case 1:
                    res = _a.sent();
                    expect(Filelink.prototype.security).toBeCalledWith(fakeSecurity);
                    expect(res).toEqual(responseObj);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should throw error on wrong store params', function () {
        expect(function () { return storeURL(mockedSession, mockHandle, {
            // @ts-ignore
            test: 123,
        }); }).toThrowError('Invalid store params');
    });
    it('should respect token cancel', function () { return __awaiter(void 0, void 0, void 0, function () {
        var token;
        return __generator(this, function (_a) {
            token = {
                cancel: function () {
                    console.log('cancel method');
                },
            };
            // @ts-ignore
            setTimeout(function () { return token.cancel(); }, 10);
            // tslint:disable-next-line
            expect(storeURL(mockedSession, mockHandle, {}, token)).rejects.toEqual(expect.any(Error));
            return [2 /*return*/];
        });
    }); });
    it('should throw an error when missing url', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            expect(function () { return storeURL(mockedSession); }).toThrowError();
            return [2 /*return*/];
        });
    }); });
    it('should rejects on request error', function () {
        // @ts-ignore
        Filelink.prototype.toString.and.returnValue(testHost + "/" + testUrl + "/404");
        nock(testHost)
            .get("/" + testUrl + "/404")
            .reply(404);
        return expect(storeURL(mockedSession, mockHandle, {})).rejects.toEqual(expect.any(Error));
    });
    it('should rejects on wrong body structure', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            // @ts-ignore
            Filelink.prototype.toString.and.returnValue(testHost + "/" + testUrl + "/body");
            mockGet.mockReturnValue({
                test: 123,
            });
            nock(testHost)
                .get("/" + testUrl + "/body")
                .reply(200, mockGet);
            return [2 /*return*/, expect(storeURL(mockedSession, mockHandle, {})).rejects.toEqual(expect.any(Error))];
        });
    }); });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
