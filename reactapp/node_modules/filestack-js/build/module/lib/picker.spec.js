/*
 * Copyright (c) 2019 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { __awaiter, __generator } from "tslib";
import { picker } from './picker';
import * as filestack from './../index';
var mockPickerOpen = jest.fn(function () { return Promise.resolve(); });
var mockPickerCrop = jest.fn(function () { return Promise.resolve(); });
var mockPickerClose = jest.fn(function () { return Promise.resolve(); });
var mockPickerCancel = jest.fn(function () { return Promise.resolve(); });
jest.mock('filestack-loader', function () {
    return {
        loadModule: jest.fn(function () {
            return new Promise(function (resolve) {
                resolve(jest.fn().mockImplementation(function () {
                    return {
                        open: mockPickerOpen,
                        crop: mockPickerCrop,
                        close: mockPickerClose,
                        cancel: mockPickerCancel,
                    };
                }));
            });
        }),
        knownModuleIds: {
            picker: '__filestack-picker-module',
        },
    };
});
var pickerInstance;
var client;
describe('picker', function () {
    beforeAll(function () {
        var defaultApikey = 'DEFAULT_API_KEY';
        client = filestack.init(defaultApikey);
    });
    beforeEach(function () {
        pickerInstance = picker(client, {});
    });
    it('should properly open picker', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, pickerInstance.open()];
                case 1:
                    _a.sent();
                    expect(mockPickerOpen).toHaveBeenCalledTimes(1);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should properly crop picker', function () { return __awaiter(void 0, void 0, void 0, function () {
        var files;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    files = ['file1.txt', 'file2.txt'];
                    return [4 /*yield*/, pickerInstance.crop(files)];
                case 1:
                    _a.sent();
                    expect.assertions(2);
                    expect(mockPickerCrop).toHaveBeenCalledTimes(1);
                    expect(mockPickerCrop).toHaveBeenCalledWith(files);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should properly close picker', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, pickerInstance.close()];
                case 1:
                    _a.sent();
                    expect(mockPickerClose).toHaveBeenCalledTimes(1);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should properly cancel picker', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, pickerInstance.cancel()];
                case 1:
                    _a.sent();
                    expect(mockPickerCancel).toHaveBeenCalledTimes(1);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should not throw error on correct params', function () {
        return expect(function () { return picker(client, {
            onOpen: function () {
                console.log(123);
            },
            customText: {
                Upload: 'customUpload',
            },
            uploadConfig: {
                partSize: 6 * 1024 * 1024,
            },
            storeTo: {
                container: 'test',
            },
        }); }).not.toThrowError('Invalid picker params');
    });
    it('should throw error on invalid options', function () {
        return expect(function () { return picker(client, {
            // @ts-ignore
            onOpen: 'test',
            customText: {
                Upload: 'customUpload',
                // @ts-ignore
                asd: {},
            },
        }); }).toThrowError('Invalid picker params');
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcGlja2VyLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHOztBQUVILE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDbEMsT0FBTyxLQUFLLFNBQVMsTUFBTSxZQUFZLENBQUM7QUFFeEMsSUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxjQUFNLE9BQUEsT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFqQixDQUFpQixDQUFDLENBQUM7QUFFeEQsSUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxjQUFNLE9BQUEsT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFqQixDQUFpQixDQUFDLENBQUM7QUFDeEQsSUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxjQUFNLE9BQUEsT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFqQixDQUFpQixDQUFDLENBQUM7QUFDekQsSUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGNBQU0sT0FBQSxPQUFPLENBQUMsT0FBTyxFQUFFLEVBQWpCLENBQWlCLENBQUMsQ0FBQztBQUUxRCxJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFO0lBQzVCLE9BQU87UUFDTCxVQUFVLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQztZQUNsQixPQUFPLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTztnQkFDekIsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQztvQkFDbkMsT0FBTzt3QkFDTCxJQUFJLEVBQUUsY0FBYzt3QkFDcEIsSUFBSSxFQUFFLGNBQWM7d0JBQ3BCLEtBQUssRUFBRSxlQUFlO3dCQUN0QixNQUFNLEVBQUUsZ0JBQWdCO3FCQUN6QixDQUFDO2dCQUNKLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDTixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FB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Q0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoibGliL3BpY2tlci5zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxOSBieSBGaWxlc3RhY2suXG4gKiBTb21lIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgcGlja2VyIH0gZnJvbSAnLi9waWNrZXInO1xuaW1wb3J0ICogYXMgZmlsZXN0YWNrIGZyb20gJy4vLi4vaW5kZXgnO1xuXG5jb25zdCBtb2NrUGlja2VyT3BlbiA9IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkpO1xuXG5jb25zdCBtb2NrUGlja2VyQ3JvcCA9IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkpO1xuY29uc3QgbW9ja1BpY2tlckNsb3NlID0gamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoKSk7XG5jb25zdCBtb2NrUGlja2VyQ2FuY2VsID0gamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoKSk7XG5cbmplc3QubW9jaygnZmlsZXN0YWNrLWxvYWRlcicsICgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBsb2FkTW9kdWxlOiBqZXN0LmZuKCgpID0+IHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICByZXNvbHZlKGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBvcGVuOiBtb2NrUGlja2VyT3BlbixcbiAgICAgICAgICAgIGNyb3A6IG1vY2tQaWNrZXJDcm9wLFxuICAgICAgICAgICAgY2xvc2U6IG1vY2tQaWNrZXJDbG9zZSxcbiAgICAgICAgICAgIGNhbmNlbDogbW9ja1BpY2tlckNhbmNlbCxcbiAgICAgICAgICB9O1xuICAgICAgICB9KSk7XG4gICAgICB9KTtcbiAgICB9KSxcbiAgICBrbm93bk1vZHVsZUlkczoge1xuICAgICAgcGlja2VyOiAnX19maWxlc3RhY2stcGlja2VyLW1vZHVsZScsXG4gICAgfSxcbiAgfTtcbn0pO1xuXG5sZXQgcGlja2VySW5zdGFuY2U7XG5sZXQgY2xpZW50O1xuXG5kZXNjcmliZSgncGlja2VyJywgKCkgPT4ge1xuICBiZWZvcmVBbGwoKCkgPT4ge1xuICAgIGNvbnN0IGRlZmF1bHRBcGlrZXkgPSAnREVGQVVMVF9BUElfS0VZJztcbiAgICBjbGllbnQgPSBmaWxlc3RhY2suaW5pdChkZWZhdWx0QXBpa2V5KTtcbiAgfSk7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgcGlja2VySW5zdGFuY2UgPSBwaWNrZXIoY2xpZW50LCB7fSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcHJvcGVybHkgb3BlbiBwaWNrZXInLCBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgcGlja2VySW5zdGFuY2Uub3BlbigpO1xuICAgIGV4cGVjdChtb2NrUGlja2VyT3BlbikudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHByb3Blcmx5IGNyb3AgcGlja2VyJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGZpbGVzID0gWydmaWxlMS50eHQnLCAnZmlsZTIudHh0J107XG5cbiAgICBhd2FpdCBwaWNrZXJJbnN0YW5jZS5jcm9wKGZpbGVzKTtcbiAgICBleHBlY3QuYXNzZXJ0aW9ucygyKTtcbiAgICBleHBlY3QobW9ja1BpY2tlckNyb3ApLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICBleHBlY3QobW9ja1BpY2tlckNyb3ApLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGZpbGVzKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBwcm9wZXJseSBjbG9zZSBwaWNrZXInLCBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgcGlja2VySW5zdGFuY2UuY2xvc2UoKTtcbiAgICBleHBlY3QobW9ja1BpY2tlckNsb3NlKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcHJvcGVybHkgY2FuY2VsIHBpY2tlcicsIGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBwaWNrZXJJbnN0YW5jZS5jYW5jZWwoKTtcbiAgICBleHBlY3QobW9ja1BpY2tlckNhbmNlbCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIG5vdCB0aHJvdyBlcnJvciBvbiBjb3JyZWN0IHBhcmFtcycsICgpID0+IHtcbiAgICByZXR1cm4gZXhwZWN0KCgpID0+IHBpY2tlcihjbGllbnQsIHtcbiAgICAgIG9uT3BlbjogKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygxMjMpO1xuICAgICAgfSxcbiAgICAgIGN1c3RvbVRleHQ6IHtcbiAgICAgICAgVXBsb2FkOiAnY3VzdG9tVXBsb2FkJyxcbiAgICAgIH0sXG4gICAgICB1cGxvYWRDb25maWc6IHtcbiAgICAgICAgcGFydFNpemU6IDYgKiAxMDI0ICogMTAyNCxcbiAgICAgIH0sXG4gICAgICBzdG9yZVRvOiB7XG4gICAgICAgIGNvbnRhaW5lcjogJ3Rlc3QnLFxuICAgICAgfSxcbiAgICB9KSkubm90LnRvVGhyb3dFcnJvcignSW52YWxpZCBwaWNrZXIgcGFyYW1zJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgdGhyb3cgZXJyb3Igb24gaW52YWxpZCBvcHRpb25zJywgKCkgPT4ge1xuICAgIHJldHVybiBleHBlY3QoKCkgPT4gcGlja2VyKGNsaWVudCwge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgb25PcGVuOiAndGVzdCcsXG4gICAgICBjdXN0b21UZXh0OiB7XG4gICAgICAgIFVwbG9hZDogJ2N1c3RvbVVwbG9hZCcsXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgYXNkOiB7fSxcbiAgICAgIH0sXG4gICAgfSkpLnRvVGhyb3dFcnJvcignSW52YWxpZCBwaWNrZXIgcGFyYW1zJyk7XG4gIH0pO1xufSk7XG4iXX0=
