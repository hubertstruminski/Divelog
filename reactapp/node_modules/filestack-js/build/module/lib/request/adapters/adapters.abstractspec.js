/*
 * Copyright (c) 2018 by Filestack
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { __awaiter, __generator } from "tslib";
/* istanbul ignore file */
import * as nock from 'nock';
import * as zlib from 'zlib';
import { Readable } from 'stream';
import { FsHttpMethod } from '../types';
import { FsCancelToken } from '../token';
import { FsRequestError, FsRequestErrorCode } from '../error';
export var adaptersHttpAbstract = function (adapter, adapterName) {
    describe("Request/Adapters/" + adapterName, function () {
        var scope;
        var url = 'https://somewrongdom.moc';
        beforeEach(function () {
            nock.cleanAll();
            scope = null;
        });
        beforeEach(function () {
            scope = nock(url).defaultReplyHeaders({
                'access-control-allow-origin': function (req) { return req.headers['origin']; },
                'access-control-allow-methods': function (req) { return req.headers['access-control-request-method']; },
                'access-control-allow-headers': function (req) { return req.headers['access-control-request-headers']; },
            });
            if (adapterName === 'xhr') {
                scope.options(/.*/).reply(200);
            }
        });
        describe('request basic', function () {
            it('should make correct request (https)', function () { return __awaiter(void 0, void 0, void 0, function () {
                var options, requestAdapter, res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            options = {
                                url: url,
                                method: FsHttpMethod.GET,
                            };
                            scope.get('/').reply(200, 'ok', { 'Content-Type': 'text/plain' });
                            requestAdapter = new adapter();
                            return [4 /*yield*/, requestAdapter.request(options)];
                        case 1:
                            res = _a.sent();
                            expect(res.status).toEqual(200);
                            expect(res.data).toEqual('ok');
                            scope.done();
                            return [2 /*return*/];
                    }
                });
            }); });
            it('should make correct request (http)', function () { return __awaiter(void 0, void 0, void 0, function () {
                var httpUrl, scopeHttp, options, requestAdapter, res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            httpUrl = url.replace('https', 'http');
                            scopeHttp = nock(httpUrl).defaultReplyHeaders({
                                'access-control-allow-origin': function (req) { return req.headers['origin']; },
                                'access-control-allow-methods': function (req) { return req.headers['access-control-request-method']; },
                                'access-control-allow-headers': function (req) { return req.headers['access-control-request-headers']; },
                            });
                            if (adapterName === 'xhr') {
                                scopeHttp.options(/.*/).reply(200);
                            }
                            options = {
                                url: httpUrl,
                                method: FsHttpMethod.GET,
                            };
                            scopeHttp.get('/').reply(200, 'ok', { 'Content-Type': 'text/plain' });
                            requestAdapter = new adapter();
                            return [4 /*yield*/, requestAdapter.request(options)];
                        case 1:
                            res = _a.sent();
                            expect(res.status).toEqual(200);
                            expect(res.data).toEqual('ok');
                            scopeHttp.done();
                            return [2 /*return*/];
                    }
                });
            }); });
            it('should add https protocol if no protocol is provided', function () { return __awaiter(void 0, void 0, void 0, function () {
                var options, requestAdapter, res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            options = {
                                url: url.replace('https://', ''),
                                method: FsHttpMethod.GET,
                            };
                            scope.get('/').reply(200, 'ok', { 'Content-Type': 'text/plain' });
                            requestAdapter = new adapter();
                            return [4 /*yield*/, requestAdapter.request(options)];
                        case 1:
                            res = _a.sent();
                            expect(res.status).toEqual(200);
                            expect(res.data).toEqual('ok');
                            scope.done();
                            return [2 /*return*/];
                    }
                });
            }); });
            it('should handle string as data param', function () { return __awaiter(void 0, void 0, void 0, function () {
                var msg, mock, options, requestAdapter, res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            msg = 'Some test stream data';
                            mock = jest
                                .fn()
                                .mockName('bufferData')
                                .mockReturnValue(msg);
                            options = {
                                url: url,
                                method: FsHttpMethod.POST,
                                data: msg,
                            };
                            scope.post('/').reply(200, function (_, data) {
                                return mock(data);
                            }, { 'Content-Type': 'text/plain' });
                            requestAdapter = new adapter();
                            return [4 /*yield*/, requestAdapter.request(options)];
                        case 1:
                            res = _a.sent();
                            expect(res.status).toEqual(200);
                            expect(res.data).toEqual(msg);
                            expect(mock).toHaveBeenLastCalledWith(msg);
                            scope.done();
                            return [2 /*return*/];
                    }
                });
            }); });
            // gzip support is handled by the browser on xhr side
            if (adapterName !== 'xhr') {
                it('should handle deflate response', function () { return __awaiter(void 0, void 0, void 0, function () {
                    var options, data, requestAdapter, res;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                options = {
                                    url: url,
                                    method: FsHttpMethod.GET,
                                };
                                data = zlib.gzipSync(Buffer.from('ok', 'utf-8'));
                                scope.get('/').reply(200, data, { 'Content-encoding': 'gzip, deflate', 'Content-type': 'text/plain' });
                                requestAdapter = new adapter();
                                return [4 /*yield*/, requestAdapter.request(options)];
                            case 1:
                                res = _a.sent();
                                expect(res.status).toEqual(200);
                                expect(res.data).toEqual('ok');
                                scope.done();
                                return [2 /*return*/];
                        }
                    });
                }); });
                it('should handle 204 gzip request', function () { return __awaiter(void 0, void 0, void 0, function () {
                    var options, requestAdapter, res;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                options = {
                                    url: url,
                                    method: FsHttpMethod.GET,
                                };
                                scope.get('/').reply(204, '', { 'Content-encoding': 'gzip, deflate', 'Content-type': 'text/plain' });
                                requestAdapter = new adapter();
                                return [4 /*yield*/, requestAdapter.request(options)];
                            case 1:
                                res = _a.sent();
                                expect(res.status).toEqual(204);
                                expect(res.data).toEqual(null);
                                scope.done();
                                return [2 /*return*/];
                        }
                    });
                }); });
                it('should handle Buffer as data param', function () { return __awaiter(void 0, void 0, void 0, function () {
                    var msg, mock, options, requestAdapter, res;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                msg = 'Some test stream data';
                                mock = jest
                                    .fn()
                                    .mockName('bufferData')
                                    .mockReturnValue('ok');
                                options = {
                                    url: url,
                                    method: FsHttpMethod.POST,
                                    data: Buffer.from(msg, 'utf-8'),
                                };
                                scope.post('/').reply(200, function (_, data) {
                                    return mock(data);
                                }, { 'Content-type': 'text/plain' });
                                requestAdapter = new adapter();
                                return [4 /*yield*/, requestAdapter.request(options)];
                            case 1:
                                res = _a.sent();
                                expect(res.status).toEqual(200);
                                expect(mock).toHaveBeenLastCalledWith(msg);
                                scope.done();
                                return [2 /*return*/];
                        }
                    });
                }); });
                it('should throw error when data type is unsupported', function () {
                    var options = {
                        url: url,
                        method: FsHttpMethod.POST,
                        data: Readable.from(['test']),
                    };
                    var requestAdapter = new adapter();
                    return expect(requestAdapter.request(options)).rejects.toEqual(expect.any(FsRequestError));
                });
            }
            it('should make request with auth', function () { return __awaiter(void 0, void 0, void 0, function () {
                var auth, options, requestAdapter, res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            auth = {
                                username: 'test',
                                password: 'test',
                            };
                            options = {
                                url: url,
                                method: FsHttpMethod.GET,
                                auth: auth,
                            };
                            scope.options('/').reply(200, 'ok');
                            scope
                                .get('/')
                                .basicAuth({ user: auth.username, pass: auth.password })
                                .reply(200, 'ok', { 'access-control-allow-origin': '*' });
                            requestAdapter = new adapter();
                            return [4 /*yield*/, requestAdapter.request(options)];
                        case 1:
                            res = _a.sent();
                            expect(res.status).toEqual(200);
                            return [2 /*return*/];
                    }
                });
            }); });
            it('should throw an error on empty username', function () { return __awaiter(void 0, void 0, void 0, function () {
                var auth, options, requestAdapter;
                return __generator(this, function (_a) {
                    auth = {
                        username: null,
                        password: 'test',
                    };
                    options = {
                        url: url,
                        method: FsHttpMethod.GET,
                        auth: auth,
                    };
                    requestAdapter = new adapter();
                    return [2 /*return*/, expect(requestAdapter.request(options)).rejects.toEqual(expect.any(FsRequestError))];
                });
            }); });
            it('should throw an error on empty password', function () { return __awaiter(void 0, void 0, void 0, function () {
                var auth, options, requestAdapter;
                return __generator(this, function (_a) {
                    auth = {
                        username: 'test',
                        password: null,
                    };
                    options = {
                        url: url,
                        method: FsHttpMethod.GET,
                        auth: auth,
                    };
                    requestAdapter = new adapter();
                    return [2 /*return*/, expect(requestAdapter.request(options)).rejects.toEqual(expect.any(FsRequestError))];
                });
            }); });
            it('should overwrite auth header if auth data is provided', function () { return __awaiter(void 0, void 0, void 0, function () {
                var auth, options, requestAdapter, res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            auth = {
                                username: 'test',
                                password: 'test',
                            };
                            options = {
                                url: url,
                                method: FsHttpMethod.GET,
                                auth: auth,
                                headers: {
                                    Authorization: 'test123',
                                },
                            };
                            scope.options('/').reply(200, 'ok');
                            scope
                                .get('/')
                                .basicAuth({ user: auth.username, pass: auth.password })
                                .reply(200, 'ok');
                            requestAdapter = new adapter();
                            return [4 /*yield*/, requestAdapter.request(options)];
                        case 1:
                            res = _a.sent();
                            expect(res.status).toEqual(200);
                            return [2 /*return*/];
                    }
                });
            }); });
            it('should contain default headers', function () { return __awaiter(void 0, void 0, void 0, function () {
                var mock, options, requestAdapter, res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            mock = jest
                                .fn()
                                .mockName('default/headers')
                                .mockReturnValue('ok');
                            options = {
                                url: url,
                                method: FsHttpMethod.GET,
                            };
                            scope.get('/').reply(200, function (_, data) {
                                return mock(this.req.headers);
                            });
                            requestAdapter = new adapter();
                            return [4 /*yield*/, requestAdapter.request(options)];
                        case 1:
                            res = _a.sent();
                            expect(res.status).toEqual(200);
                            expect(mock).toHaveBeenCalledWith(expect.objectContaining({ 'filestack-source': expect.any(String), 'filestack-trace-id': expect.any(String), 'filestack-trace-span': expect.any(String) }));
                            return [2 /*return*/];
                    }
                });
            }); });
            it('should omit default headers', function () { return __awaiter(void 0, void 0, void 0, function () {
                var mock, options, requestAdapter, res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            mock = jest
                                .fn()
                                .mockName('default/headers')
                                .mockReturnValue('ok');
                            options = {
                                url: url,
                                method: FsHttpMethod.GET,
                                filestackHeaders: false,
                            };
                            scope.get('/').reply(200, function (_, data) {
                                return mock(this.req.headers);
                            });
                            requestAdapter = new adapter();
                            return [4 /*yield*/, requestAdapter.request(options)];
                        case 1:
                            res = _a.sent();
                            expect(res.status).toEqual(200);
                            expect(mock).toHaveBeenCalledWith(expect.not.objectContaining({ 'filestack-source': expect.any(String), 'filestack-trace-id': expect.any(String), 'filestack-trace-span': expect.any(String) }));
                            return [2 /*return*/];
                    }
                });
            }); });
            it('should skip undefined headers', function () { return __awaiter(void 0, void 0, void 0, function () {
                var mock, options, requestAdapter, res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            mock = jest
                                .fn()
                                .mockName('undefined/headers')
                                .mockReturnValue('ok');
                            options = {
                                url: url,
                                method: FsHttpMethod.GET,
                                headers: {
                                    test: undefined,
                                },
                            };
                            scope.get('/').reply(200, function (_, data) {
                                return mock(this.req.headers);
                            });
                            requestAdapter = new adapter();
                            return [4 /*yield*/, requestAdapter.request(options)];
                        case 1:
                            res = _a.sent();
                            expect(res.status).toEqual(200);
                            expect(mock).toHaveBeenCalledWith(expect.not.objectContaining({ test: undefined }));
                            scope.done();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        describe('redirects ', function () {
            // xhr redirects are handled by the browser
            if (adapterName !== 'xhr') {
                it('should follow 302 redirect', function () { return __awaiter(void 0, void 0, void 0, function () {
                    var options, response, requestAdapter, res;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                options = {
                                    url: url,
                                    method: FsHttpMethod.GET,
                                };
                                response = { test: 123 };
                                scope.get('/').reply(302, 'ok', {
                                    location: url + "/resp",
                                });
                                scope.get('/resp').reply(200, response, {
                                    'Content-type': 'application/json',
                                });
                                requestAdapter = new adapter();
                                return [4 /*yield*/, requestAdapter.request(options)];
                            case 1:
                                res = _a.sent();
                                expect(res.status).toEqual(200);
                                expect(res.data).toEqual(response);
                                scope.done();
                                return [2 /*return*/];
                        }
                    });
                }); });
                it('should throw error when no location is provided', function () { return __awaiter(void 0, void 0, void 0, function () {
                    var options, requestAdapter, err_1;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                options = {
                                    url: url,
                                    method: FsHttpMethod.GET,
                                };
                                scope.get('/').reply(302, 'ok', { location: '' });
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                requestAdapter = new adapter();
                                return [4 /*yield*/, requestAdapter.request(options)];
                            case 2:
                                _a.sent();
                                // return error in try will not emit error
                                expect(false).toEqual(true);
                                return [3 /*break*/, 4];
                            case 3:
                                err_1 = _a.sent();
                                expect(err_1).toEqual(expect.any(FsRequestError));
                                expect(err_1.code).toEqual(FsRequestErrorCode.REDIRECT);
                                return [3 /*break*/, 4];
                            case 4:
                                scope.done();
                                return [2 /*return*/];
                        }
                    });
                }); });
                it('should throw error (REDIRECT) on max redirects', function () { return __awaiter(void 0, void 0, void 0, function () {
                    var options, requestAdapter, err_2;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                options = {
                                    url: url,
                                    method: FsHttpMethod.GET,
                                };
                                if (adapterName === 'xhr') {
                                    scope.options('/').reply(200, 'ok');
                                }
                                scope
                                    .get('/')
                                    .reply(302, 'ok', {
                                    location: url + "/a",
                                })
                                    .get('/a')
                                    .reply(301, 'ok', {
                                    location: url + "/b",
                                })
                                    .get('/b')
                                    .reply(302, 'ok', {
                                    location: url + "/c",
                                })
                                    .get('/c')
                                    .reply(301, 'ok', {
                                    location: url + "/d",
                                })
                                    .get('/d')
                                    .reply(302, 'ok', {
                                    location: url + "/e",
                                })
                                    .get('/e')
                                    .reply(301, 'ok', {
                                    location: url + "/f",
                                })
                                    .get('/f')
                                    .reply(302, 'ok', {
                                    location: url + "/g",
                                })
                                    .get('/g')
                                    .reply(301, 'ok', {
                                    location: url + "/h",
                                })
                                    .get('/h')
                                    .reply(302, 'ok', {
                                    location: url + "/i",
                                })
                                    .get('/i')
                                    .reply(301, 'ok', {
                                    location: url + "/j",
                                })
                                    .get('/j')
                                    .reply(302, 'ok', {
                                    location: url + "/k",
                                });
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                requestAdapter = new adapter();
                                return [4 /*yield*/, requestAdapter.request(options)];
                            case 2:
                                _a.sent();
                                // return error in try will not emit error
                                expect(false).toEqual(true);
                                return [3 /*break*/, 4];
                            case 3:
                                err_2 = _a.sent();
                                expect(err_2).toEqual(expect.any(FsRequestError));
                                expect(err_2.code).toEqual(FsRequestErrorCode.REDIRECT);
                                return [3 /*break*/, 4];
                            case 4:
                                scope.done();
                                return [2 /*return*/];
                        }
                    });
                }); });
                it('should throw error on redirect loop', function () { return __awaiter(void 0, void 0, void 0, function () {
                    var options, requestAdapter, err_3;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                options = {
                                    url: url,
                                    method: FsHttpMethod.GET,
                                };
                                scope
                                    .get('/')
                                    .reply(302, 'ok', { location: url + "/a" })
                                    .get('/a')
                                    .reply(302, 'ok', { location: url + "/a" })
                                    .get('/a')
                                    .reply(200, 'ok');
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                requestAdapter = new adapter();
                                return [4 /*yield*/, requestAdapter.request(options)];
                            case 2:
                                _a.sent();
                                // return error in try will not emit error
                                expect(false).toEqual(true);
                                return [3 /*break*/, 4];
                            case 3:
                                err_3 = _a.sent();
                                expect(err_3).toEqual(expect.any(FsRequestError));
                                expect(err_3.code).toEqual(FsRequestErrorCode.REDIRECT);
                                return [3 /*break*/, 4];
                            case 4: return [2 /*return*/];
                        }
                    });
                }); });
            }
        });
        if (adapterName === 'xhr') {
            describe('request form', function () {
                it('Should send form data', function () { return __awaiter(void 0, void 0, void 0, function () {
                    var form, options, resp, requestAdapter, res;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                form = new FormData();
                                options = {
                                    url: url,
                                    method: FsHttpMethod.POST,
                                    data: form,
                                };
                                resp = { form: 'ok' };
                                scope.post('/').reply(200, resp, { 'Content-type': 'application/json' });
                                requestAdapter = new adapter();
                                return [4 /*yield*/, requestAdapter.request(options)];
                            case 1:
                                res = _a.sent();
                                expect(res.status).toEqual(200);
                                expect(res.data).toEqual(resp);
                                scope.done();
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
        }
        describe('4xx and 5xx errors handling', function () {
            it('should handle 4xx response', function () { return __awaiter(void 0, void 0, void 0, function () {
                var options, errorResp, requestAdapter, err_4;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            options = {
                                url: url,
                                method: FsHttpMethod.GET,
                            };
                            errorResp = { test: 123 };
                            scope.get('/').reply(404, errorResp, {
                                'Content-type': 'application/json',
                            });
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            requestAdapter = new adapter();
                            return [4 /*yield*/, requestAdapter.request(options)];
                        case 2:
                            _a.sent();
                            expect(false).toEqual(true);
                            return [3 /*break*/, 4];
                        case 3:
                            err_4 = _a.sent();
                            expect(err_4).toEqual(expect.any(FsRequestError));
                            expect(err_4.code).toEqual(FsRequestErrorCode.REQUEST);
                            expect(err_4.response.status).toEqual(404);
                            expect(err_4.response.data).toEqual(errorResp);
                            return [3 /*break*/, 4];
                        case 4:
                            scope.done();
                            return [2 /*return*/];
                    }
                });
            }); });
            it('should handle 5xx response', function () { return __awaiter(void 0, void 0, void 0, function () {
                var options, errorResp, requestAdapter, err_5;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            options = {
                                url: url,
                                method: FsHttpMethod.GET,
                            };
                            errorResp = { test: 123 };
                            scope.get('/').reply(501, errorResp, {
                                'Content-type': 'application/json',
                            });
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            requestAdapter = new adapter();
                            return [4 /*yield*/, requestAdapter.request(options)];
                        case 2:
                            _a.sent();
                            expect(false).toEqual(true);
                            return [3 /*break*/, 4];
                        case 3:
                            err_5 = _a.sent();
                            expect(err_5).toEqual(expect.any(FsRequestError));
                            expect(err_5.code).toEqual(FsRequestErrorCode.SERVER);
                            expect(err_5.response.status).toEqual(501);
                            expect(err_5.response.data).toEqual(errorResp);
                            return [3 /*break*/, 4];
                        case 4:
                            scope.done();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        if (adapterName === 'xhr') {
            describe('progress event', function () {
                it('should handle upload progress', function () { return __awaiter(void 0, void 0, void 0, function () {
                    var progressSpy, buf, options, requestAdapter, res;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                progressSpy = jest
                                    .fn()
                                    .mockName('bufferData')
                                    .mockReturnThis();
                                buf = Buffer.alloc(1024);
                                buf.fill('a');
                                options = {
                                    url: url + "/progress",
                                    method: FsHttpMethod.POST,
                                    onProgress: progressSpy,
                                    data: buf,
                                };
                                scope.options('/progress').reply(200, 'ok', {
                                    'Content-type': 'application/json',
                                });
                                scope.post('/progress').reply(200, 'ok', {
                                    'Content-type': 'application/json',
                                });
                                requestAdapter = new adapter();
                                return [4 /*yield*/, requestAdapter.request(options)];
                            case 1:
                                res = _a.sent();
                                // for jsdom we cannot check progress event correctly
                                expect(progressSpy).toHaveBeenCalled();
                                return [2 /*return*/];
                        }
                    });
                }); });
            });
        }
        describe('cancelToken', function () {
            it('Should throw abort request when token will be called', function () { return __awaiter(void 0, void 0, void 0, function () {
                var token, options, requestAdapter, err_6;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            token = new FsCancelToken();
                            options = {
                                url: url,
                                method: FsHttpMethod.GET,
                                cancelToken: token,
                            };
                            scope
                                .get('/')
                                .delay(2000)
                                .reply(200, 'ok', {
                                'Content-type': 'application/json',
                            });
                            setTimeout(function () {
                                token.cancel();
                            }, 100);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            requestAdapter = new adapter();
                            return [4 /*yield*/, requestAdapter.request(options)];
                        case 2:
                            _a.sent();
                            // return error in try will not emit error
                            expect(false).toEqual(true);
                            return [3 /*break*/, 4];
                        case 3:
                            err_6 = _a.sent();
                            expect(err_6).toEqual(expect.any(FsRequestError));
                            expect(err_6.code).toEqual(FsRequestErrorCode.ABORTED);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            }); });
            it('Should not throw undefined error when cancel token will be called after request finished', function () { return __awaiter(void 0, void 0, void 0, function () {
                var token, options, requestAdapter, res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            token = new FsCancelToken();
                            options = {
                                url: url,
                                method: FsHttpMethod.GET,
                                cancelToken: token,
                            };
                            scope.get('/').reply(200, 'ok', {
                                'Content-type': 'text/plain',
                            });
                            requestAdapter = new adapter();
                            return [4 /*yield*/, requestAdapter.request(options)];
                        case 1:
                            res = _a.sent();
                            token.cancel();
                            expect(res.status).toEqual(200);
                            expect(res.data).toEqual('ok');
                            scope.done();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        describe('Network errors', function () {
            it('should throw an error on domain not found', function () { return __awaiter(void 0, void 0, void 0, function () {
                var options, requestAdapter;
                return __generator(this, function (_a) {
                    options = {
                        url: 'https://some-badd-url.er',
                        method: FsHttpMethod.GET,
                    };
                    requestAdapter = new adapter();
                    return [2 /*return*/, expect(requestAdapter.request(options)).rejects.toEqual(expect.any(FsRequestError))];
                });
            }); });
            it('Should throw an FilestackError on socket abort with FsRequestErrorCode.TIMEOUTED code', function () { return __awaiter(void 0, void 0, void 0, function () {
                var options, requestAdapter, err_7;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            options = {
                                url: url,
                                method: FsHttpMethod.GET,
                                timeout: 50,
                            };
                            scope
                                .get('/')
                                .delay(2000)
                                .reply(200, 'ok', {
                                'Content-type': 'application/json',
                            });
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            requestAdapter = new adapter();
                            return [4 /*yield*/, requestAdapter.request(options)];
                        case 2:
                            _a.sent();
                            // return error in try will not emit error
                            expect(false).toEqual(true);
                            return [3 /*break*/, 4];
                        case 3:
                            err_7 = _a.sent();
                            expect(err_7).toEqual(expect.any(FsRequestError));
                            expect(err_7.code).toEqual(FsRequestErrorCode.TIMEOUT);
                            return [3 /*break*/, 4];
                        case 4:
                            scope.done();
                            return [2 /*return*/];
                    }
                });
            }); });
            it('Should throw an FilestackError on response ECONNREFUSED error with FsRequestErrorCode.NETWORK code', function () { return __awaiter(void 0, void 0, void 0, function () {
                var options, requestAdapter, err_8;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            options = {
                                url: url,
                                method: FsHttpMethod.GET,
                            };
                            scope.get('/').replyWithError({ code: 'ECONNREFUSED' });
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            requestAdapter = new adapter();
                            return [4 /*yield*/, requestAdapter.request(options)];
                        case 2:
                            _a.sent();
                            // return error in try will not emit error
                            expect(false).toEqual(true);
                            return [3 /*break*/, 4];
                        case 3:
                            err_8 = _a.sent();
                            expect(err_8).toEqual(expect.any(FsRequestError));
                            expect(err_8.code).toEqual(FsRequestErrorCode.NETWORK);
                            return [3 /*break*/, 4];
                        case 4:
                            scope.done();
                            return [2 /*return*/];
                    }
                });
            }); });
            it('Should throw an FilestackError on response ECONNRESET error with FsRequestErrorCode.NETWORK code', function () { return __awaiter(void 0, void 0, void 0, function () {
                var options, requestAdapter, err_9;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            options = {
                                url: url,
                                method: FsHttpMethod.GET,
                            };
                            scope.get('/').replyWithError({ code: 'ECONNRESET' });
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            requestAdapter = new adapter();
                            return [4 /*yield*/, requestAdapter.request(options)];
                        case 2:
                            _a.sent();
                            // return error in try will not emit error
                            expect(false).toEqual(true);
                            return [3 /*break*/, 4];
                        case 3:
                            err_9 = _a.sent();
                            expect(err_9).toEqual(expect.any(FsRequestError));
                            expect(err_9.code).toEqual(FsRequestErrorCode.NETWORK);
                            return [3 /*break*/, 4];
                        case 4:
                            scope.done();
                            return [2 /*return*/];
                    }
                });
            }); });
            it('Should throw an FilestackError on response ENOTFOUND error with FsRequestErrorCode.NETWORK code', function () { return __awaiter(void 0, void 0, void 0, function () {
                var options, requestAdapter, err_10;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            options = {
                                url: url,
                                method: FsHttpMethod.GET,
                            };
                            scope.get('/').replyWithError({ code: 'ENOTFOUND' });
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            requestAdapter = new adapter();
                            return [4 /*yield*/, requestAdapter.request(options)];
                        case 2:
                            _a.sent();
                            // return error in try will not emit error
                            expect(false).toEqual(true);
                            return [3 /*break*/, 4];
                        case 3:
                            err_10 = _a.sent();
                            expect(err_10).toEqual(expect.any(FsRequestError));
                            expect(err_10.code).toEqual(FsRequestErrorCode.NETWORK);
                            return [3 /*break*/, 4];
                        case 4:
                            scope.done();
                            return [2 /*return*/];
                    }
                });
            }); });
            it('Should abort request on timeout', function () { return __awaiter(void 0, void 0, void 0, function () {
                var options, requestAdapter, err_11;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            options = {
                                url: url,
                                method: FsHttpMethod.GET,
                                timeout: 1000,
                            };
                            scope
                                .get('/')
                                .delay(2000)
                                .reply(200, 'ok');
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            requestAdapter = new adapter();
                            return [4 /*yield*/, requestAdapter.request(options)];
                        case 2:
                            _a.sent();
                            // return error in try will not emit error
                            expect(false).toEqual(true);
                            return [3 /*break*/, 4];
                        case 3:
                            err_11 = _a.sent();
                            expect(err_11).toEqual(expect.any(FsRequestError));
                            expect(err_11.code).toEqual(FsRequestErrorCode.TIMEOUT);
                            return [3 /*break*/, 4];
                        case 4:
                            scope.done();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
    });
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcmVxdWVzdC9hZGFwdGVycy9hZGFwdGVycy5hYnN0cmFjdHNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHOztBQUVILDBCQUEwQjtBQUMxQixPQUFPLEtBQUssSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUM3QixPQUFPLEtBQUssSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUM3QixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxZQUFZLEVBQW9CLE1BQU0sVUFBVSxDQUFDO0FBQzFELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDekMsT0FBTyxFQUFFLGNBQWMsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUU5RCxNQUFNLENBQUMsSUFBTSxvQkFBb0IsR0FBRyxVQUFDLE9BQVksRUFBRSxXQUFtQjtJQUNwRSxRQUFRLENBQUMsc0JBQW9CLFdBQWEsRUFBRTtRQUMxQyxJQUFJLEtBQUssQ0FBQztRQUNWLElBQU0sR0FBRyxHQUFHLDBCQUEwQixDQUFDO1FBRXZDLFVBQVUsQ0FBQztZQUNULElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNoQixLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ2YsQ0FBQyxDQUFDLENBQUM7UUFFSCxVQUFVLENBQUM7WUFDVCxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLG1CQUFtQixDQUFDO2dCQUNwQyw2QkFBNkIsRUFBRSxVQUFBLEdBQUcsSUFBSSxPQUFBLEdBQUcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQXJCLENBQXFCO2dCQUMzRCw4QkFBOEIsRUFBRSxVQUFBLEdBQUcsSUFBSSxPQUFBLEdBQUcsQ0FBQyxPQUFPLENBQUMsK0JBQStCLENBQUMsRUFBNUMsQ0FBNEM7Z0JBQ25GLDhCQUE4QixFQUFFLFVBQUEsR0FBRyxJQUFJLE9BQUEsR0FBRyxD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NEJBQ2hELE1BQU0sQ0FBQyxNQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDOzs7NEJBR3ZELEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQzs7OztpQkFDZCxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDIiwiZmlsZSI6ImxpYi9yZXF1ZXN0L2FkYXB0ZXJzL2FkYXB0ZXJzLmFic3RyYWN0c3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTggYnkgRmlsZXN0YWNrXG4gKiBTb21lIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyogaXN0YW5idWwgaWdub3JlIGZpbGUgKi9cbmltcG9ydCAqIGFzIG5vY2sgZnJvbSAnbm9jayc7XG5pbXBvcnQgKiBhcyB6bGliIGZyb20gJ3psaWInO1xuaW1wb3J0IHsgUmVhZGFibGUgfSBmcm9tICdzdHJlYW0nO1xuaW1wb3J0IHsgRnNIdHRwTWV0aG9kLCBGc1JlcXVlc3RPcHRpb25zIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgRnNDYW5jZWxUb2tlbiB9IGZyb20gJy4uL3Rva2VuJztcbmltcG9ydCB7IEZzUmVxdWVzdEVycm9yLCBGc1JlcXVlc3RFcnJvckNvZGUgfSBmcm9tICcuLi9lcnJvcic7XG5cbmV4cG9ydCBjb25zdCBhZGFwdGVyc0h0dHBBYnN0cmFjdCA9IChhZGFwdGVyOiBhbnksIGFkYXB0ZXJOYW1lOiBzdHJpbmcpID0+IHtcbiAgZGVzY3JpYmUoYFJlcXVlc3QvQWRhcHRlcnMvJHthZGFwdGVyTmFtZX1gLCAoKSA9PiB7XG4gICAgbGV0IHNjb3BlO1xuICAgIGNvbnN0IHVybCA9ICdodHRwczovL3NvbWV3cm9uZ2RvbS5tb2MnO1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBub2NrLmNsZWFuQWxsKCk7XG4gICAgICBzY29wZSA9IG51bGw7XG4gICAgfSk7XG5cbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIHNjb3BlID0gbm9jayh1cmwpLmRlZmF1bHRSZXBseUhlYWRlcnMoe1xuICAgICAgICAnYWNjZXNzLWNvbnRyb2wtYWxsb3ctb3JpZ2luJzogcmVxID0+IHJlcS5oZWFkZXJzWydvcmlnaW4nXSxcbiAgICAgICAgJ2FjY2Vzcy1jb250cm9sLWFsbG93LW1ldGhvZHMnOiByZXEgPT4gcmVxLmhlYWRlcnNbJ2FjY2Vzcy1jb250cm9sLXJlcXVlc3QtbWV0aG9kJ10sXG4gICAgICAgICdhY2Nlc3MtY29udHJvbC1hbGxvdy1oZWFkZXJzJzogcmVxID0+IHJlcS5oZWFkZXJzWydhY2Nlc3MtY29udHJvbC1yZXF1ZXN0LWhlYWRlcnMnXSxcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoYWRhcHRlck5hbWUgPT09ICd4aHInKSB7XG4gICAgICAgIHNjb3BlLm9wdGlvbnMoLy4qLykucmVwbHkoMjAwKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdyZXF1ZXN0IGJhc2ljJywgKCkgPT4ge1xuICAgICAgaXQoJ3Nob3VsZCBtYWtlIGNvcnJlY3QgcmVxdWVzdCAoaHR0cHMpJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgIG1ldGhvZDogRnNIdHRwTWV0aG9kLkdFVCxcbiAgICAgICAgfTtcbiAgICAgICAgc2NvcGUuZ2V0KCcvJykucmVwbHkoMjAwLCAnb2snLCB7ICdDb250ZW50LVR5cGUnOiAndGV4dC9wbGFpbicgfSk7XG5cbiAgICAgICAgY29uc3QgcmVxdWVzdEFkYXB0ZXIgPSBuZXcgYWRhcHRlcigpO1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCByZXF1ZXN0QWRhcHRlci5yZXF1ZXN0KG9wdGlvbnMpO1xuXG4gICAgICAgIGV4cGVjdChyZXMuc3RhdHVzKS50b0VxdWFsKDIwMCk7XG4gICAgICAgIGV4cGVjdChyZXMuZGF0YSkudG9FcXVhbCgnb2snKTtcbiAgICAgICAgc2NvcGUuZG9uZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgbWFrZSBjb3JyZWN0IHJlcXVlc3QgKGh0dHApJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBodHRwVXJsID0gdXJsLnJlcGxhY2UoJ2h0dHBzJywgJ2h0dHAnKTtcblxuICAgICAgICBjb25zdCBzY29wZUh0dHAgPSBub2NrKGh0dHBVcmwpLmRlZmF1bHRSZXBseUhlYWRlcnMoe1xuICAgICAgICAgICdhY2Nlc3MtY29udHJvbC1hbGxvdy1vcmlnaW4nOiByZXEgPT4gcmVxLmhlYWRlcnNbJ29yaWdpbiddLFxuICAgICAgICAgICdhY2Nlc3MtY29udHJvbC1hbGxvdy1tZXRob2RzJzogcmVxID0+IHJlcS5oZWFkZXJzWydhY2Nlc3MtY29udHJvbC1yZXF1ZXN0LW1ldGhvZCddLFxuICAgICAgICAgICdhY2Nlc3MtY29udHJvbC1hbGxvdy1oZWFkZXJzJzogcmVxID0+IHJlcS5oZWFkZXJzWydhY2Nlc3MtY29udHJvbC1yZXF1ZXN0LWhlYWRlcnMnXSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGFkYXB0ZXJOYW1lID09PSAneGhyJykge1xuICAgICAgICAgIHNjb3BlSHR0cC5vcHRpb25zKC8uKi8pLnJlcGx5KDIwMCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgIHVybDogaHR0cFVybCxcbiAgICAgICAgICBtZXRob2Q6IEZzSHR0cE1ldGhvZC5HRVQsXG4gICAgICAgIH07XG5cbiAgICAgICAgc2NvcGVIdHRwLmdldCgnLycpLnJlcGx5KDIwMCwgJ29rJywgeyAnQ29udGVudC1UeXBlJzogJ3RleHQvcGxhaW4nIH0pO1xuXG4gICAgICAgIGNvbnN0IHJlcXVlc3RBZGFwdGVyID0gbmV3IGFkYXB0ZXIoKTtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgcmVxdWVzdEFkYXB0ZXIucmVxdWVzdChvcHRpb25zKTtcbiAgICAgICAgZXhwZWN0KHJlcy5zdGF0dXMpLnRvRXF1YWwoMjAwKTtcbiAgICAgICAgZXhwZWN0KHJlcy5kYXRhKS50b0VxdWFsKCdvaycpO1xuICAgICAgICBzY29wZUh0dHAuZG9uZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgYWRkIGh0dHBzIHByb3RvY29sIGlmIG5vIHByb3RvY29sIGlzIHByb3ZpZGVkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgIHVybDogdXJsLnJlcGxhY2UoJ2h0dHBzOi8vJywgJycpLFxuICAgICAgICAgIG1ldGhvZDogRnNIdHRwTWV0aG9kLkdFVCxcbiAgICAgICAgfTtcblxuICAgICAgICBzY29wZS5nZXQoJy8nKS5yZXBseSgyMDAsICdvaycsIHsgJ0NvbnRlbnQtVHlwZSc6ICd0ZXh0L3BsYWluJyB9KTtcblxuICAgICAgICBjb25zdCByZXF1ZXN0QWRhcHRlciA9IG5ldyBhZGFwdGVyKCk7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHJlcXVlc3RBZGFwdGVyLnJlcXVlc3Qob3B0aW9ucyk7XG4gICAgICAgIGV4cGVjdChyZXMuc3RhdHVzKS50b0VxdWFsKDIwMCk7XG4gICAgICAgIGV4cGVjdChyZXMuZGF0YSkudG9FcXVhbCgnb2snKTtcbiAgICAgICAgc2NvcGUuZG9uZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgaGFuZGxlIHN0cmluZyBhcyBkYXRhIHBhcmFtJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBtc2cgPSAnU29tZSB0ZXN0IHN0cmVhbSBkYXRhJztcbiAgICAgICAgY29uc3QgbW9jayA9IGplc3RcbiAgICAgICAgICAuZm4oKVxuICAgICAgICAgIC5tb2NrTmFtZSgnYnVmZmVyRGF0YScpXG4gICAgICAgICAgLm1vY2tSZXR1cm5WYWx1ZShtc2cpO1xuXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgbWV0aG9kOiBGc0h0dHBNZXRob2QuUE9TVCxcbiAgICAgICAgICBkYXRhOiBtc2csXG4gICAgICAgIH07XG5cbiAgICAgICAgc2NvcGUucG9zdCgnLycpLnJlcGx5KDIwMCwgZnVuY3Rpb24oXywgZGF0YSkge1xuICAgICAgICAgIHJldHVybiBtb2NrKGRhdGEpO1xuICAgICAgICB9LCB7ICdDb250ZW50LVR5cGUnOiAndGV4dC9wbGFpbicgfSk7XG5cbiAgICAgICAgY29uc3QgcmVxdWVzdEFkYXB0ZXIgPSBuZXcgYWRhcHRlcigpO1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCByZXF1ZXN0QWRhcHRlci5yZXF1ZXN0KG9wdGlvbnMpO1xuICAgICAgICBleHBlY3QocmVzLnN0YXR1cykudG9FcXVhbCgyMDApO1xuICAgICAgICBleHBlY3QocmVzLmRhdGEpLnRvRXF1YWwobXNnKTtcblxuICAgICAgICBleHBlY3QobW9jaykudG9IYXZlQmVlbkxhc3RDYWxsZWRXaXRoKG1zZyk7XG5cbiAgICAgICAgc2NvcGUuZG9uZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIGd6aXAgc3VwcG9ydCBpcyBoYW5kbGVkIGJ5IHRoZSBicm93c2VyIG9uIHhociBzaWRlXG4gICAgICBpZiAoYWRhcHRlck5hbWUgIT09ICd4aHInKSB7XG4gICAgICAgIGl0KCdzaG91bGQgaGFuZGxlIGRlZmxhdGUgcmVzcG9uc2UnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgbWV0aG9kOiBGc0h0dHBNZXRob2QuR0VULFxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBjb25zdCBkYXRhID0gemxpYi5nemlwU3luYyhCdWZmZXIuZnJvbSgnb2snLCAndXRmLTgnKSk7XG4gICAgICAgICAgc2NvcGUuZ2V0KCcvJykucmVwbHkoMjAwLCBkYXRhLCB7ICdDb250ZW50LWVuY29kaW5nJzogJ2d6aXAsIGRlZmxhdGUnLCAnQ29udGVudC10eXBlJzogJ3RleHQvcGxhaW4nIH0pO1xuXG4gICAgICAgICAgY29uc3QgcmVxdWVzdEFkYXB0ZXIgPSBuZXcgYWRhcHRlcigpO1xuICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHJlcXVlc3RBZGFwdGVyLnJlcXVlc3Qob3B0aW9ucyk7XG4gICAgICAgICAgZXhwZWN0KHJlcy5zdGF0dXMpLnRvRXF1YWwoMjAwKTtcbiAgICAgICAgICBleHBlY3QocmVzLmRhdGEpLnRvRXF1YWwoJ29rJyk7XG4gICAgICAgICAgc2NvcGUuZG9uZSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGhhbmRsZSAyMDQgZ3ppcCByZXF1ZXN0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICAgIG1ldGhvZDogRnNIdHRwTWV0aG9kLkdFVCxcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgc2NvcGUuZ2V0KCcvJykucmVwbHkoMjA0LCAnJywgeyAnQ29udGVudC1lbmNvZGluZyc6ICdnemlwLCBkZWZsYXRlJywgJ0NvbnRlbnQtdHlwZSc6ICd0ZXh0L3BsYWluJyB9KTtcblxuICAgICAgICAgIGNvbnN0IHJlcXVlc3RBZGFwdGVyID0gbmV3IGFkYXB0ZXIoKTtcbiAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCByZXF1ZXN0QWRhcHRlci5yZXF1ZXN0KG9wdGlvbnMpO1xuICAgICAgICAgIGV4cGVjdChyZXMuc3RhdHVzKS50b0VxdWFsKDIwNCk7XG4gICAgICAgICAgZXhwZWN0KHJlcy5kYXRhKS50b0VxdWFsKG51bGwpO1xuXG4gICAgICAgICAgc2NvcGUuZG9uZSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGhhbmRsZSBCdWZmZXIgYXMgZGF0YSBwYXJhbScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICBjb25zdCBtc2cgPSAnU29tZSB0ZXN0IHN0cmVhbSBkYXRhJztcblxuICAgICAgICAgIGNvbnN0IG1vY2sgPSBqZXN0XG4gICAgICAgICAgICAuZm4oKVxuICAgICAgICAgICAgLm1vY2tOYW1lKCdidWZmZXJEYXRhJylcbiAgICAgICAgICAgIC5tb2NrUmV0dXJuVmFsdWUoJ29rJyk7XG5cbiAgICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICBtZXRob2Q6IEZzSHR0cE1ldGhvZC5QT1NULFxuICAgICAgICAgICAgZGF0YTogQnVmZmVyLmZyb20obXNnLCAndXRmLTgnKSxcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgc2NvcGUucG9zdCgnLycpLnJlcGx5KDIwMCwgZnVuY3Rpb24oXywgZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIG1vY2soZGF0YSk7XG4gICAgICAgICAgfSwgeyAnQ29udGVudC10eXBlJzogJ3RleHQvcGxhaW4nIH0pO1xuXG4gICAgICAgICAgY29uc3QgcmVxdWVzdEFkYXB0ZXIgPSBuZXcgYWRhcHRlcigpO1xuICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHJlcXVlc3RBZGFwdGVyLnJlcXVlc3Qob3B0aW9ucyk7XG4gICAgICAgICAgZXhwZWN0KHJlcy5zdGF0dXMpLnRvRXF1YWwoMjAwKTtcbiAgICAgICAgICBleHBlY3QobW9jaykudG9IYXZlQmVlbkxhc3RDYWxsZWRXaXRoKG1zZyk7XG5cbiAgICAgICAgICBzY29wZS5kb25lKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgdGhyb3cgZXJyb3Igd2hlbiBkYXRhIHR5cGUgaXMgdW5zdXBwb3J0ZWQnLCAoKSA9PiB7XG4gICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgbWV0aG9kOiBGc0h0dHBNZXRob2QuUE9TVCxcbiAgICAgICAgICAgIGRhdGE6IFJlYWRhYmxlLmZyb20oWyd0ZXN0J10pLFxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBjb25zdCByZXF1ZXN0QWRhcHRlciA9IG5ldyBhZGFwdGVyKCk7XG5cbiAgICAgICAgICByZXR1cm4gZXhwZWN0KHJlcXVlc3RBZGFwdGVyLnJlcXVlc3Qob3B0aW9ucykpLnJlamVjdHMudG9FcXVhbChleHBlY3QuYW55KEZzUmVxdWVzdEVycm9yKSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpdCgnc2hvdWxkIG1ha2UgcmVxdWVzdCB3aXRoIGF1dGgnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGF1dGggPSB7XG4gICAgICAgICAgdXNlcm5hbWU6ICd0ZXN0JyxcbiAgICAgICAgICBwYXNzd29yZDogJ3Rlc3QnLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgbWV0aG9kOiBGc0h0dHBNZXRob2QuR0VULFxuICAgICAgICAgIGF1dGgsXG4gICAgICAgIH07XG5cbiAgICAgICAgc2NvcGUub3B0aW9ucygnLycpLnJlcGx5KDIwMCwgJ29rJyk7XG5cbiAgICAgICAgc2NvcGVcbiAgICAgICAgICAuZ2V0KCcvJylcbiAgICAgICAgICAuYmFzaWNBdXRoKHsgdXNlcjogYXV0aC51c2VybmFtZSwgcGFzczogYXV0aC5wYXNzd29yZCB9KVxuICAgICAgICAgIC5yZXBseSgyMDAsICdvaycsIHsgJ2FjY2Vzcy1jb250cm9sLWFsbG93LW9yaWdpbic6ICcqJyB9KTtcblxuICAgICAgICBjb25zdCByZXF1ZXN0QWRhcHRlciA9IG5ldyBhZGFwdGVyKCk7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHJlcXVlc3RBZGFwdGVyLnJlcXVlc3Qob3B0aW9ucyk7XG5cbiAgICAgICAgZXhwZWN0KHJlcy5zdGF0dXMpLnRvRXF1YWwoMjAwKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIHRocm93IGFuIGVycm9yIG9uIGVtcHR5IHVzZXJuYW1lJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBhdXRoID0ge1xuICAgICAgICAgIHVzZXJuYW1lOiBudWxsLFxuICAgICAgICAgIHBhc3N3b3JkOiAndGVzdCcsXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICBtZXRob2Q6IEZzSHR0cE1ldGhvZC5HRVQsXG4gICAgICAgICAgYXV0aCxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCByZXF1ZXN0QWRhcHRlciA9IG5ldyBhZGFwdGVyKCk7XG4gICAgICAgIHJldHVybiBleHBlY3QocmVxdWVzdEFkYXB0ZXIucmVxdWVzdChvcHRpb25zKSkucmVqZWN0cy50b0VxdWFsKGV4cGVjdC5hbnkoRnNSZXF1ZXN0RXJyb3IpKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIHRocm93IGFuIGVycm9yIG9uIGVtcHR5IHBhc3N3b3JkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBhdXRoID0ge1xuICAgICAgICAgIHVzZXJuYW1lOiAndGVzdCcsXG4gICAgICAgICAgcGFzc3dvcmQ6IG51bGwsXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICBtZXRob2Q6IEZzSHR0cE1ldGhvZC5HRVQsXG4gICAgICAgICAgYXV0aCxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCByZXF1ZXN0QWRhcHRlciA9IG5ldyBhZGFwdGVyKCk7XG4gICAgICAgIHJldHVybiBleHBlY3QocmVxdWVzdEFkYXB0ZXIucmVxdWVzdChvcHRpb25zKSkucmVqZWN0cy50b0VxdWFsKGV4cGVjdC5hbnkoRnNSZXF1ZXN0RXJyb3IpKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIG92ZXJ3cml0ZSBhdXRoIGhlYWRlciBpZiBhdXRoIGRhdGEgaXMgcHJvdmlkZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGF1dGggPSB7XG4gICAgICAgICAgdXNlcm5hbWU6ICd0ZXN0JyxcbiAgICAgICAgICBwYXNzd29yZDogJ3Rlc3QnLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgbWV0aG9kOiBGc0h0dHBNZXRob2QuR0VULFxuICAgICAgICAgIGF1dGgsXG4gICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogJ3Rlc3QxMjMnLFxuICAgICAgICAgIH0sXG4gICAgICAgIH07XG5cbiAgICAgICAgc2NvcGUub3B0aW9ucygnLycpLnJlcGx5KDIwMCwgJ29rJyk7XG5cbiAgICAgICAgc2NvcGVcbiAgICAgICAgICAuZ2V0KCcvJylcbiAgICAgICAgICAuYmFzaWNBdXRoKHsgdXNlcjogYXV0aC51c2VybmFtZSwgcGFzczogYXV0aC5wYXNzd29yZCB9KVxuICAgICAgICAgIC5yZXBseSgyMDAsICdvaycpO1xuXG4gICAgICAgIGNvbnN0IHJlcXVlc3RBZGFwdGVyID0gbmV3IGFkYXB0ZXIoKTtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgcmVxdWVzdEFkYXB0ZXIucmVxdWVzdChvcHRpb25zKTtcblxuICAgICAgICBleHBlY3QocmVzLnN0YXR1cykudG9FcXVhbCgyMDApO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgY29udGFpbiBkZWZhdWx0IGhlYWRlcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG1vY2sgPSBqZXN0XG4gICAgICAgICAgLmZuKClcbiAgICAgICAgICAubW9ja05hbWUoJ2RlZmF1bHQvaGVhZGVycycpXG4gICAgICAgICAgLm1vY2tSZXR1cm5WYWx1ZSgnb2snKTtcblxuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgIG1ldGhvZDogRnNIdHRwTWV0aG9kLkdFVCxcbiAgICAgICAgfTtcblxuICAgICAgICBzY29wZS5nZXQoJy8nKS5yZXBseSgyMDAsIGZ1bmN0aW9uKF8sIGRhdGEpIHtcbiAgICAgICAgICByZXR1cm4gbW9jayh0aGlzLnJlcS5oZWFkZXJzKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgcmVxdWVzdEFkYXB0ZXIgPSBuZXcgYWRhcHRlcigpO1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCByZXF1ZXN0QWRhcHRlci5yZXF1ZXN0KG9wdGlvbnMpO1xuXG4gICAgICAgIGV4cGVjdChyZXMuc3RhdHVzKS50b0VxdWFsKDIwMCk7XG4gICAgICAgIGV4cGVjdChtb2NrKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7ICdmaWxlc3RhY2stc291cmNlJzogZXhwZWN0LmFueShTdHJpbmcpLCAnZmlsZXN0YWNrLXRyYWNlLWlkJzogZXhwZWN0LmFueShTdHJpbmcpLCAnZmlsZXN0YWNrLXRyYWNlLXNwYW4nOiBleHBlY3QuYW55KFN0cmluZykgfSlcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIG9taXQgZGVmYXVsdCBoZWFkZXJzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBtb2NrID0gamVzdFxuICAgICAgICAgIC5mbigpXG4gICAgICAgICAgLm1vY2tOYW1lKCdkZWZhdWx0L2hlYWRlcnMnKVxuICAgICAgICAgIC5tb2NrUmV0dXJuVmFsdWUoJ29rJyk7XG5cbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICBtZXRob2Q6IEZzSHR0cE1ldGhvZC5HRVQsXG4gICAgICAgICAgZmlsZXN0YWNrSGVhZGVyczogZmFsc2UsXG4gICAgICAgIH07XG5cbiAgICAgICAgc2NvcGUuZ2V0KCcvJykucmVwbHkoMjAwLCBmdW5jdGlvbihfLCBkYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIG1vY2sodGhpcy5yZXEuaGVhZGVycyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHJlcXVlc3RBZGFwdGVyID0gbmV3IGFkYXB0ZXIoKTtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgcmVxdWVzdEFkYXB0ZXIucmVxdWVzdChvcHRpb25zKTtcblxuICAgICAgICBleHBlY3QocmVzLnN0YXR1cykudG9FcXVhbCgyMDApO1xuICAgICAgICBleHBlY3QobW9jaykudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgICAgZXhwZWN0Lm5vdC5vYmplY3RDb250YWluaW5nKHsgJ2ZpbGVzdGFjay1zb3VyY2UnOiBleHBlY3QuYW55KFN0cmluZyksICdmaWxlc3RhY2stdHJhY2UtaWQnOiBleHBlY3QuYW55KFN0cmluZyksICdmaWxlc3RhY2stdHJhY2Utc3Bhbic6IGV4cGVjdC5hbnkoU3RyaW5nKSB9KVxuICAgICAgICApO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgc2tpcCB1bmRlZmluZWQgaGVhZGVycycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgbW9jayA9IGplc3RcbiAgICAgICAgICAuZm4oKVxuICAgICAgICAgIC5tb2NrTmFtZSgndW5kZWZpbmVkL2hlYWRlcnMnKVxuICAgICAgICAgIC5tb2NrUmV0dXJuVmFsdWUoJ29rJyk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgbWV0aG9kOiBGc0h0dHBNZXRob2QuR0VULFxuICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgIHRlc3Q6IHVuZGVmaW5lZCxcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuXG4gICAgICAgIHNjb3BlLmdldCgnLycpLnJlcGx5KDIwMCwgZnVuY3Rpb24oXywgZGF0YSkge1xuICAgICAgICAgIHJldHVybiBtb2NrKHRoaXMucmVxLmhlYWRlcnMpO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCByZXF1ZXN0QWRhcHRlciA9IG5ldyBhZGFwdGVyKCk7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHJlcXVlc3RBZGFwdGVyLnJlcXVlc3Qob3B0aW9ucyk7XG4gICAgICAgIGV4cGVjdChyZXMuc3RhdHVzKS50b0VxdWFsKDIwMCk7XG4gICAgICAgIGV4cGVjdChtb2NrKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChleHBlY3Qubm90Lm9iamVjdENvbnRhaW5pbmcoeyB0ZXN0OiB1bmRlZmluZWQgfSkpO1xuXG4gICAgICAgIHNjb3BlLmRvbmUoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ3JlZGlyZWN0cyAnLCAoKSA9PiB7XG4gICAgICAvLyB4aHIgcmVkaXJlY3RzIGFyZSBoYW5kbGVkIGJ5IHRoZSBicm93c2VyXG4gICAgICBpZiAoYWRhcHRlck5hbWUgIT09ICd4aHInKSB7XG4gICAgICAgIGl0KCdzaG91bGQgZm9sbG93IDMwMiByZWRpcmVjdCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICBtZXRob2Q6IEZzSHR0cE1ldGhvZC5HRVQsXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geyB0ZXN0OiAxMjMgfTtcblxuICAgICAgICAgIHNjb3BlLmdldCgnLycpLnJlcGx5KDMwMiwgJ29rJywge1xuICAgICAgICAgICAgbG9jYXRpb246IGAke3VybH0vcmVzcGAsXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc2NvcGUuZ2V0KCcvcmVzcCcpLnJlcGx5KDIwMCwgcmVzcG9uc2UsIHtcbiAgICAgICAgICAgICdDb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBjb25zdCByZXF1ZXN0QWRhcHRlciA9IG5ldyBhZGFwdGVyKCk7XG4gICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgcmVxdWVzdEFkYXB0ZXIucmVxdWVzdChvcHRpb25zKTtcbiAgICAgICAgICBleHBlY3QocmVzLnN0YXR1cykudG9FcXVhbCgyMDApO1xuICAgICAgICAgIGV4cGVjdChyZXMuZGF0YSkudG9FcXVhbChyZXNwb25zZSk7XG5cbiAgICAgICAgICBzY29wZS5kb25lKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgdGhyb3cgZXJyb3Igd2hlbiBubyBsb2NhdGlvbiBpcyBwcm92aWRlZCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICBtZXRob2Q6IEZzSHR0cE1ldGhvZC5HRVQsXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHNjb3BlLmdldCgnLycpLnJlcGx5KDMwMiwgJ29rJywgeyBsb2NhdGlvbjogJycgfSk7XG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdEFkYXB0ZXIgPSBuZXcgYWRhcHRlcigpO1xuICAgICAgICAgICAgYXdhaXQgcmVxdWVzdEFkYXB0ZXIucmVxdWVzdChvcHRpb25zKTtcblxuICAgICAgICAgICAgLy8gcmV0dXJuIGVycm9yIGluIHRyeSB3aWxsIG5vdCBlbWl0IGVycm9yXG4gICAgICAgICAgICBleHBlY3QoZmFsc2UpLnRvRXF1YWwodHJ1ZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBleHBlY3QoZXJyKS50b0VxdWFsKGV4cGVjdC5hbnkoRnNSZXF1ZXN0RXJyb3IpKTtcbiAgICAgICAgICAgIGV4cGVjdChlcnIuY29kZSkudG9FcXVhbChGc1JlcXVlc3RFcnJvckNvZGUuUkVESVJFQ1QpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzY29wZS5kb25lKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgdGhyb3cgZXJyb3IgKFJFRElSRUNUKSBvbiBtYXggcmVkaXJlY3RzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICAgIG1ldGhvZDogRnNIdHRwTWV0aG9kLkdFVCxcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgaWYgKGFkYXB0ZXJOYW1lID09PSAneGhyJykge1xuICAgICAgICAgICAgc2NvcGUub3B0aW9ucygnLycpLnJlcGx5KDIwMCwgJ29rJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2NvcGVcbiAgICAgICAgICAgIC5nZXQoJy8nKVxuICAgICAgICAgICAgLnJlcGx5KDMwMiwgJ29rJywge1xuICAgICAgICAgICAgICBsb2NhdGlvbjogYCR7dXJsfS9hYCxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZ2V0KCcvYScpXG4gICAgICAgICAgICAucmVwbHkoMzAxLCAnb2snLCB7XG4gICAgICAgICAgICAgIGxvY2F0aW9uOiBgJHt1cmx9L2JgLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5nZXQoJy9iJylcbiAgICAgICAgICAgIC5yZXBseSgzMDIsICdvaycsIHtcbiAgICAgICAgICAgICAgbG9jYXRpb246IGAke3VybH0vY2AsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmdldCgnL2MnKVxuICAgICAgICAgICAgLnJlcGx5KDMwMSwgJ29rJywge1xuICAgICAgICAgICAgICBsb2NhdGlvbjogYCR7dXJsfS9kYCxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZ2V0KCcvZCcpXG4gICAgICAgICAgICAucmVwbHkoMzAyLCAnb2snLCB7XG4gICAgICAgICAgICAgIGxvY2F0aW9uOiBgJHt1cmx9L2VgLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5nZXQoJy9lJylcbiAgICAgICAgICAgIC5yZXBseSgzMDEsICdvaycsIHtcbiAgICAgICAgICAgICAgbG9jYXRpb246IGAke3VybH0vZmAsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmdldCgnL2YnKVxuICAgICAgICAgICAgLnJlcGx5KDMwMiwgJ29rJywge1xuICAgICAgICAgICAgICBsb2NhdGlvbjogYCR7dXJsfS9nYCxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZ2V0KCcvZycpXG4gICAgICAgICAgICAucmVwbHkoMzAxLCAnb2snLCB7XG4gICAgICAgICAgICAgIGxvY2F0aW9uOiBgJHt1cmx9L2hgLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5nZXQoJy9oJylcbiAgICAgICAgICAgIC5yZXBseSgzMDIsICdvaycsIHtcbiAgICAgICAgICAgICAgbG9jYXRpb246IGAke3VybH0vaWAsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmdldCgnL2knKVxuICAgICAgICAgICAgLnJlcGx5KDMwMSwgJ29rJywge1xuICAgICAgICAgICAgICBsb2NhdGlvbjogYCR7dXJsfS9qYCxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZ2V0KCcvaicpXG4gICAgICAgICAgICAucmVwbHkoMzAyLCAnb2snLCB7XG4gICAgICAgICAgICAgIGxvY2F0aW9uOiBgJHt1cmx9L2tgLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdEFkYXB0ZXIgPSBuZXcgYWRhcHRlcigpO1xuICAgICAgICAgICAgYXdhaXQgcmVxdWVzdEFkYXB0ZXIucmVxdWVzdChvcHRpb25zKTtcblxuICAgICAgICAgICAgLy8gcmV0dXJuIGVycm9yIGluIHRyeSB3aWxsIG5vdCBlbWl0IGVycm9yXG4gICAgICAgICAgICBleHBlY3QoZmFsc2UpLnRvRXF1YWwodHJ1ZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBleHBlY3QoZXJyKS50b0VxdWFsKGV4cGVjdC5hbnkoRnNSZXF1ZXN0RXJyb3IpKTtcbiAgICAgICAgICAgIGV4cGVjdChlcnIuY29kZSkudG9FcXVhbChGc1JlcXVlc3RFcnJvckNvZGUuUkVESVJFQ1QpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNjb3BlLmRvbmUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCB0aHJvdyBlcnJvciBvbiByZWRpcmVjdCBsb29wJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICAgIG1ldGhvZDogRnNIdHRwTWV0aG9kLkdFVCxcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgc2NvcGVcbiAgICAgICAgICAgIC5nZXQoJy8nKVxuICAgICAgICAgICAgLnJlcGx5KDMwMiwgJ29rJywgeyBsb2NhdGlvbjogYCR7dXJsfS9hYCB9KVxuICAgICAgICAgICAgLmdldCgnL2EnKVxuICAgICAgICAgICAgLnJlcGx5KDMwMiwgJ29rJywgeyBsb2NhdGlvbjogYCR7dXJsfS9hYCB9KVxuICAgICAgICAgICAgLmdldCgnL2EnKVxuICAgICAgICAgICAgLnJlcGx5KDIwMCwgJ29rJyk7XG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdEFkYXB0ZXIgPSBuZXcgYWRhcHRlcigpO1xuICAgICAgICAgICAgYXdhaXQgcmVxdWVzdEFkYXB0ZXIucmVxdWVzdChvcHRpb25zKTtcblxuICAgICAgICAgICAgLy8gcmV0dXJuIGVycm9yIGluIHRyeSB3aWxsIG5vdCBlbWl0IGVycm9yXG4gICAgICAgICAgICBleHBlY3QoZmFsc2UpLnRvRXF1YWwodHJ1ZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBleHBlY3QoZXJyKS50b0VxdWFsKGV4cGVjdC5hbnkoRnNSZXF1ZXN0RXJyb3IpKTtcbiAgICAgICAgICAgIGV4cGVjdChlcnIuY29kZSkudG9FcXVhbChGc1JlcXVlc3RFcnJvckNvZGUuUkVESVJFQ1QpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoYWRhcHRlck5hbWUgPT09ICd4aHInKSB7XG4gICAgICBkZXNjcmliZSgncmVxdWVzdCBmb3JtJywgKCkgPT4ge1xuICAgICAgICBpdCgnU2hvdWxkIHNlbmQgZm9ybSBkYXRhJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGZvcm0gPSBuZXcgRm9ybURhdGEoKTtcblxuICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICAgIG1ldGhvZDogRnNIdHRwTWV0aG9kLlBPU1QsXG4gICAgICAgICAgICBkYXRhOiBmb3JtLFxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBjb25zdCByZXNwID0geyBmb3JtOiAnb2snIH07XG5cbiAgICAgICAgICBzY29wZS5wb3N0KCcvJykucmVwbHkoMjAwLCByZXNwLCB7ICdDb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSk7XG5cbiAgICAgICAgICBjb25zdCByZXF1ZXN0QWRhcHRlciA9IG5ldyBhZGFwdGVyKCk7XG4gICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgcmVxdWVzdEFkYXB0ZXIucmVxdWVzdChvcHRpb25zKTtcblxuICAgICAgICAgIGV4cGVjdChyZXMuc3RhdHVzKS50b0VxdWFsKDIwMCk7XG4gICAgICAgICAgZXhwZWN0KHJlcy5kYXRhKS50b0VxdWFsKHJlc3ApO1xuXG4gICAgICAgICAgc2NvcGUuZG9uZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGRlc2NyaWJlKCc0eHggYW5kIDV4eCBlcnJvcnMgaGFuZGxpbmcnLCAoKSA9PiB7XG4gICAgICBpdCgnc2hvdWxkIGhhbmRsZSA0eHggcmVzcG9uc2UnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgbWV0aG9kOiBGc0h0dHBNZXRob2QuR0VULFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGVycm9yUmVzcCA9IHsgdGVzdDogMTIzIH07XG5cbiAgICAgICAgc2NvcGUuZ2V0KCcvJykucmVwbHkoNDA0LCBlcnJvclJlc3AsIHtcbiAgICAgICAgICAnQ29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICB9KTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHJlcXVlc3RBZGFwdGVyID0gbmV3IGFkYXB0ZXIoKTtcbiAgICAgICAgICBhd2FpdCByZXF1ZXN0QWRhcHRlci5yZXF1ZXN0KG9wdGlvbnMpO1xuICAgICAgICAgIGV4cGVjdChmYWxzZSkudG9FcXVhbCh0cnVlKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgZXhwZWN0KGVycikudG9FcXVhbChleHBlY3QuYW55KEZzUmVxdWVzdEVycm9yKSk7XG4gICAgICAgICAgZXhwZWN0KGVyci5jb2RlKS50b0VxdWFsKEZzUmVxdWVzdEVycm9yQ29kZS5SRVFVRVNUKTtcbiAgICAgICAgICBleHBlY3QoZXJyLnJlc3BvbnNlLnN0YXR1cykudG9FcXVhbCg0MDQpO1xuICAgICAgICAgIGV4cGVjdChlcnIucmVzcG9uc2UuZGF0YSkudG9FcXVhbChlcnJvclJlc3ApO1xuICAgICAgICB9XG5cbiAgICAgICAgc2NvcGUuZG9uZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgaGFuZGxlIDV4eCByZXNwb25zZScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICBtZXRob2Q6IEZzSHR0cE1ldGhvZC5HRVQsXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgZXJyb3JSZXNwID0geyB0ZXN0OiAxMjMgfTtcblxuICAgICAgICBzY29wZS5nZXQoJy8nKS5yZXBseSg1MDEsIGVycm9yUmVzcCwge1xuICAgICAgICAgICdDb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgcmVxdWVzdEFkYXB0ZXIgPSBuZXcgYWRhcHRlcigpO1xuICAgICAgICAgIGF3YWl0IHJlcXVlc3RBZGFwdGVyLnJlcXVlc3Qob3B0aW9ucyk7XG4gICAgICAgICAgZXhwZWN0KGZhbHNlKS50b0VxdWFsKHRydWUpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBleHBlY3QoZXJyKS50b0VxdWFsKGV4cGVjdC5hbnkoRnNSZXF1ZXN0RXJyb3IpKTtcbiAgICAgICAgICBleHBlY3QoZXJyLmNvZGUpLnRvRXF1YWwoRnNSZXF1ZXN0RXJyb3JDb2RlLlNFUlZFUik7XG4gICAgICAgICAgZXhwZWN0KGVyci5yZXNwb25zZS5zdGF0dXMpLnRvRXF1YWwoNTAxKTtcbiAgICAgICAgICBleHBlY3QoZXJyLnJlc3BvbnNlLmRhdGEpLnRvRXF1YWwoZXJyb3JSZXNwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNjb3BlLmRvbmUoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaWYgKGFkYXB0ZXJOYW1lID09PSAneGhyJykge1xuICAgICAgZGVzY3JpYmUoJ3Byb2dyZXNzIGV2ZW50JywgKCkgPT4ge1xuICAgICAgICBpdCgnc2hvdWxkIGhhbmRsZSB1cGxvYWQgcHJvZ3Jlc3MnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgY29uc3QgcHJvZ3Jlc3NTcHkgPSBqZXN0XG4gICAgICAgICAgICAuZm4oKVxuICAgICAgICAgICAgLm1vY2tOYW1lKCdidWZmZXJEYXRhJylcbiAgICAgICAgICAgIC5tb2NrUmV0dXJuVGhpcygpO1xuICAgICAgICAgIGNvbnN0IGJ1ZiA9IEJ1ZmZlci5hbGxvYygxMDI0KTtcbiAgICAgICAgICBidWYuZmlsbCgnYScpO1xuXG4gICAgICAgICAgY29uc3Qgb3B0aW9uczogRnNSZXF1ZXN0T3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVybDogYCR7dXJsfS9wcm9ncmVzc2AsXG4gICAgICAgICAgICBtZXRob2Q6IEZzSHR0cE1ldGhvZC5QT1NULFxuICAgICAgICAgICAgb25Qcm9ncmVzczogcHJvZ3Jlc3NTcHksXG4gICAgICAgICAgICBkYXRhOiBidWYsXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHNjb3BlLm9wdGlvbnMoJy9wcm9ncmVzcycpLnJlcGx5KDIwMCwgJ29rJywge1xuICAgICAgICAgICAgJ0NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHNjb3BlLnBvc3QoJy9wcm9ncmVzcycpLnJlcGx5KDIwMCwgJ29rJywge1xuICAgICAgICAgICAgJ0NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGNvbnN0IHJlcXVlc3RBZGFwdGVyID0gbmV3IGFkYXB0ZXIoKTtcbiAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCByZXF1ZXN0QWRhcHRlci5yZXF1ZXN0KG9wdGlvbnMpO1xuICAgICAgICAgIC8vIGZvciBqc2RvbSB3ZSBjYW5ub3QgY2hlY2sgcHJvZ3Jlc3MgZXZlbnQgY29ycmVjdGx5XG4gICAgICAgICAgZXhwZWN0KHByb2dyZXNzU3B5KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZGVzY3JpYmUoJ2NhbmNlbFRva2VuJywgKCkgPT4ge1xuICAgICAgaXQoJ1Nob3VsZCB0aHJvdyBhYm9ydCByZXF1ZXN0IHdoZW4gdG9rZW4gd2lsbCBiZSBjYWxsZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRva2VuID0gbmV3IEZzQ2FuY2VsVG9rZW4oKTtcblxuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgIG1ldGhvZDogRnNIdHRwTWV0aG9kLkdFVCxcbiAgICAgICAgICBjYW5jZWxUb2tlbjogdG9rZW4sXG4gICAgICAgIH07XG5cbiAgICAgICAgc2NvcGVcbiAgICAgICAgICAuZ2V0KCcvJylcbiAgICAgICAgICAuZGVsYXkoMjAwMClcbiAgICAgICAgICAucmVwbHkoMjAwLCAnb2snLCB7XG4gICAgICAgICAgICAnQ29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRva2VuLmNhbmNlbCgpO1xuICAgICAgICB9LCAxMDApO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgcmVxdWVzdEFkYXB0ZXIgPSBuZXcgYWRhcHRlcigpO1xuICAgICAgICAgIGF3YWl0IHJlcXVlc3RBZGFwdGVyLnJlcXVlc3Qob3B0aW9ucyk7XG5cbiAgICAgICAgICAvLyByZXR1cm4gZXJyb3IgaW4gdHJ5IHdpbGwgbm90IGVtaXQgZXJyb3JcbiAgICAgICAgICBleHBlY3QoZmFsc2UpLnRvRXF1YWwodHJ1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGV4cGVjdChlcnIpLnRvRXF1YWwoZXhwZWN0LmFueShGc1JlcXVlc3RFcnJvcikpO1xuICAgICAgICAgIGV4cGVjdChlcnIuY29kZSkudG9FcXVhbChGc1JlcXVlc3RFcnJvckNvZGUuQUJPUlRFRCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpdCgnU2hvdWxkIG5vdCB0aHJvdyB1bmRlZmluZWQgZXJyb3Igd2hlbiBjYW5jZWwgdG9rZW4gd2lsbCBiZSBjYWxsZWQgYWZ0ZXIgcmVxdWVzdCBmaW5pc2hlZCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSBuZXcgRnNDYW5jZWxUb2tlbigpO1xuXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgbWV0aG9kOiBGc0h0dHBNZXRob2QuR0VULFxuICAgICAgICAgIGNhbmNlbFRva2VuOiB0b2tlbixcbiAgICAgICAgfTtcblxuICAgICAgICBzY29wZS5nZXQoJy8nKS5yZXBseSgyMDAsICdvaycsIHtcbiAgICAgICAgICAnQ29udGVudC10eXBlJzogJ3RleHQvcGxhaW4nLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCByZXF1ZXN0QWRhcHRlciA9IG5ldyBhZGFwdGVyKCk7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHJlcXVlc3RBZGFwdGVyLnJlcXVlc3Qob3B0aW9ucyk7XG4gICAgICAgIHRva2VuLmNhbmNlbCgpO1xuXG4gICAgICAgIGV4cGVjdChyZXMuc3RhdHVzKS50b0VxdWFsKDIwMCk7XG4gICAgICAgIGV4cGVjdChyZXMuZGF0YSkudG9FcXVhbCgnb2snKTtcblxuICAgICAgICBzY29wZS5kb25lKCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdOZXR3b3JrIGVycm9ycycsICgpID0+IHtcbiAgICAgIGl0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3Igb24gZG9tYWluIG5vdCBmb3VuZCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICB1cmw6ICdodHRwczovL3NvbWUtYmFkZC11cmwuZXInLFxuICAgICAgICAgIG1ldGhvZDogRnNIdHRwTWV0aG9kLkdFVCxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCByZXF1ZXN0QWRhcHRlciA9IG5ldyBhZGFwdGVyKCk7XG4gICAgICAgIHJldHVybiBleHBlY3QocmVxdWVzdEFkYXB0ZXIucmVxdWVzdChvcHRpb25zKSkucmVqZWN0cy50b0VxdWFsKGV4cGVjdC5hbnkoRnNSZXF1ZXN0RXJyb3IpKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnU2hvdWxkIHRocm93IGFuIEZpbGVzdGFja0Vycm9yIG9uIHNvY2tldCBhYm9ydCB3aXRoIEZzUmVxdWVzdEVycm9yQ29kZS5USU1FT1VURUQgY29kZScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICBtZXRob2Q6IEZzSHR0cE1ldGhvZC5HRVQsXG4gICAgICAgICAgdGltZW91dDogNTAsXG4gICAgICAgIH07XG5cbiAgICAgICAgc2NvcGVcbiAgICAgICAgICAuZ2V0KCcvJylcbiAgICAgICAgICAuZGVsYXkoMjAwMClcbiAgICAgICAgICAucmVwbHkoMjAwLCAnb2snLCB7XG4gICAgICAgICAgICAnQ29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgcmVxdWVzdEFkYXB0ZXIgPSBuZXcgYWRhcHRlcigpO1xuICAgICAgICAgIGF3YWl0IHJlcXVlc3RBZGFwdGVyLnJlcXVlc3Qob3B0aW9ucyk7XG5cbiAgICAgICAgICAvLyByZXR1cm4gZXJyb3IgaW4gdHJ5IHdpbGwgbm90IGVtaXQgZXJyb3JcbiAgICAgICAgICBleHBlY3QoZmFsc2UpLnRvRXF1YWwodHJ1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGV4cGVjdChlcnIpLnRvRXF1YWwoZXhwZWN0LmFueShGc1JlcXVlc3RFcnJvcikpO1xuICAgICAgICAgIGV4cGVjdChlcnIuY29kZSkudG9FcXVhbChGc1JlcXVlc3RFcnJvckNvZGUuVElNRU9VVCk7XG4gICAgICAgIH1cblxuICAgICAgICBzY29wZS5kb25lKCk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ1Nob3VsZCB0aHJvdyBhbiBGaWxlc3RhY2tFcnJvciBvbiByZXNwb25zZSBFQ09OTlJFRlVTRUQgZXJyb3Igd2l0aCBGc1JlcXVlc3RFcnJvckNvZGUuTkVUV09SSyBjb2RlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgIG1ldGhvZDogRnNIdHRwTWV0aG9kLkdFVCxcbiAgICAgICAgfTtcblxuICAgICAgICBzY29wZS5nZXQoJy8nKS5yZXBseVdpdGhFcnJvcih7IGNvZGU6ICdFQ09OTlJFRlVTRUQnIH0pO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgcmVxdWVzdEFkYXB0ZXIgPSBuZXcgYWRhcHRlcigpO1xuICAgICAgICAgIGF3YWl0IHJlcXVlc3RBZGFwdGVyLnJlcXVlc3Qob3B0aW9ucyk7XG5cbiAgICAgICAgICAvLyByZXR1cm4gZXJyb3IgaW4gdHJ5IHdpbGwgbm90IGVtaXQgZXJyb3JcbiAgICAgICAgICBleHBlY3QoZmFsc2UpLnRvRXF1YWwodHJ1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGV4cGVjdChlcnIpLnRvRXF1YWwoZXhwZWN0LmFueShGc1JlcXVlc3RFcnJvcikpO1xuICAgICAgICAgIGV4cGVjdChlcnIuY29kZSkudG9FcXVhbChGc1JlcXVlc3RFcnJvckNvZGUuTkVUV09SSyk7XG4gICAgICAgIH1cblxuICAgICAgICBzY29wZS5kb25lKCk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ1Nob3VsZCB0aHJvdyBhbiBGaWxlc3RhY2tFcnJvciBvbiByZXNwb25zZSBFQ09OTlJFU0VUIGVycm9yIHdpdGggRnNSZXF1ZXN0RXJyb3JDb2RlLk5FVFdPUksgY29kZScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICBtZXRob2Q6IEZzSHR0cE1ldGhvZC5HRVQsXG4gICAgICAgIH07XG5cbiAgICAgICAgc2NvcGUuZ2V0KCcvJykucmVwbHlXaXRoRXJyb3IoeyBjb2RlOiAnRUNPTk5SRVNFVCcgfSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCByZXF1ZXN0QWRhcHRlciA9IG5ldyBhZGFwdGVyKCk7XG4gICAgICAgICAgYXdhaXQgcmVxdWVzdEFkYXB0ZXIucmVxdWVzdChvcHRpb25zKTtcblxuICAgICAgICAgIC8vIHJldHVybiBlcnJvciBpbiB0cnkgd2lsbCBub3QgZW1pdCBlcnJvclxuICAgICAgICAgIGV4cGVjdChmYWxzZSkudG9FcXVhbCh0cnVlKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgZXhwZWN0KGVycikudG9FcXVhbChleHBlY3QuYW55KEZzUmVxdWVzdEVycm9yKSk7XG4gICAgICAgICAgZXhwZWN0KGVyci5jb2RlKS50b0VxdWFsKEZzUmVxdWVzdEVycm9yQ29kZS5ORVRXT1JLKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNjb3BlLmRvbmUoKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnU2hvdWxkIHRocm93IGFuIEZpbGVzdGFja0Vycm9yIG9uIHJlc3BvbnNlIEVOT1RGT1VORCBlcnJvciB3aXRoIEZzUmVxdWVzdEVycm9yQ29kZS5ORVRXT1JLIGNvZGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgbWV0aG9kOiBGc0h0dHBNZXRob2QuR0VULFxuICAgICAgICB9O1xuXG4gICAgICAgIHNjb3BlLmdldCgnLycpLnJlcGx5V2l0aEVycm9yKHsgY29kZTogJ0VOT1RGT1VORCcgfSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCByZXF1ZXN0QWRhcHRlciA9IG5ldyBhZGFwdGVyKCk7XG4gICAgICAgICAgYXdhaXQgcmVxdWVzdEFkYXB0ZXIucmVxdWVzdChvcHRpb25zKTtcblxuICAgICAgICAgIC8vIHJldHVybiBlcnJvciBpbiB0cnkgd2lsbCBub3QgZW1pdCBlcnJvclxuICAgICAgICAgIGV4cGVjdChmYWxzZSkudG9FcXVhbCh0cnVlKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgZXhwZWN0KGVycikudG9FcXVhbChleHBlY3QuYW55KEZzUmVxdWVzdEVycm9yKSk7XG4gICAgICAgICAgZXhwZWN0KGVyci5jb2RlKS50b0VxdWFsKEZzUmVxdWVzdEVycm9yQ29kZS5ORVRXT1JLKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNjb3BlLmRvbmUoKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnU2hvdWxkIGFib3J0IHJlcXVlc3Qgb24gdGltZW91dCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICBtZXRob2Q6IEZzSHR0cE1ldGhvZC5HRVQsXG4gICAgICAgICAgdGltZW91dDogMTAwMCxcbiAgICAgICAgfTtcblxuICAgICAgICBzY29wZVxuICAgICAgICAgIC5nZXQoJy8nKVxuICAgICAgICAgIC5kZWxheSgyMDAwKVxuICAgICAgICAgIC5yZXBseSgyMDAsICdvaycpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgcmVxdWVzdEFkYXB0ZXIgPSBuZXcgYWRhcHRlcigpO1xuICAgICAgICAgIGF3YWl0IHJlcXVlc3RBZGFwdGVyLnJlcXVlc3Qob3B0aW9ucyk7XG5cbiAgICAgICAgICAvLyByZXR1cm4gZXJyb3IgaW4gdHJ5IHdpbGwgbm90IGVtaXQgZXJyb3JcbiAgICAgICAgICBleHBlY3QoZmFsc2UpLnRvRXF1YWwodHJ1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGV4cGVjdChlcnIpLnRvRXF1YWwoZXhwZWN0LmFueShGc1JlcXVlc3RFcnJvcikpO1xuICAgICAgICAgIGV4cGVjdChlcnIuY29kZSkudG9FcXVhbChGc1JlcXVlc3RFcnJvckNvZGUuVElNRU9VVCk7XG4gICAgICAgIH1cblxuICAgICAgICBzY29wZS5kb25lKCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59O1xuIl19
