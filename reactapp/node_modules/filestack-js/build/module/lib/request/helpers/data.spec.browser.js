/*
 * Copyright (c) 2018 by Filestack
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { prepareData, parseResponse } from './data';
describe('Request/Helpers/Data', function () {
    describe('prepare data', function () {
        it('should return empty data', function () {
            var data = { url: 'https://filestack.com', data: {} };
            expect(prepareData(data)).toEqual(data);
        });
        it('should return ArrayBuffer', function () {
            var data = { url: 'https://filestack.com', data: new ArrayBuffer(10) };
            expect(prepareData(data)).toEqual(data);
        });
        it('should return url params', function () {
            var data = { url: 'https://filestack.com', data: new URLSearchParams('q=search&id=1') };
            expect(prepareData(data)).toEqual(data);
        });
    });
    describe('parse response', function () {
        it('should return equal response data', function () {
            var response = {
                status: 200,
                statusText: 'ok',
                headers: {},
                data: [],
                config: {
                    url: 'https://filestack.com',
                },
            };
            expect(parseResponse(response)).toEqual(response);
        });
        it('should return response with application/json and data stringify', function () {
            var response = {
                status: 200,
                statusText: 'ok',
                headers: {
                    'content-type': 'application/json',
                },
                data: JSON.stringify({ a: 1 }),
                config: {
                    url: 'https://filestack.com',
                },
            };
            expect(parseResponse(response)).toEqual(response);
        });
        it('should return response with application/json and json data ', function () {
            var response = {
                status: 200,
                statusText: 'ok',
                headers: {
                    'content-type': 'application/json',
                },
                data: { a: 1 },
                config: {
                    url: 'https://filestack.com',
                },
            };
            expect(parseResponse(response)).toEqual(response);
        });
        it('should return text/plain response with ArrayBuffer ', function () {
            var response = {
                status: 200,
                statusText: 'ok',
                headers: {
                    'content-type': 'text/plain',
                },
                data: new ArrayBuffer(10),
                config: {
                    url: 'https://filestack.com',
                },
            };
            expect(parseResponse(response)).toEqual(response);
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcmVxdWVzdC9oZWxwZXJzL2RhdGEuc3BlYy5icm93c2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUVILE9BQU8sRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRXBELFFBQVEsQ0FBQyxzQkFBc0IsRUFBRTtJQUMvQixRQUFRLENBQUMsY0FBYyxFQUFFO1FBQ3ZCLEVBQUUsQ0FBQywwQkFBMEIsRUFBRTtZQUM3QixJQUFNLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSx1QkFBdUIsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUM7WUFDeEQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxQyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQywyQkFBMkIsRUFBRTtZQUM5QixJQUFNLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSx1QkFBdUIsRUFBRSxJQUFJLEVBQUUsSUFBSSxXQUFXLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUN6RSxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFDLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDBCQUEwQixFQUFFO1lBQzdCLElBQU0sSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLHVCQUF1QixFQUFFLElBQUksRUFBRSxJQUFJLGVBQWUsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDO1lBQzFGLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRTtRQUN6QixFQUFFLENBQUMsbUNBQW1DLEVBQUU7WUFDdEMsSUFBTSxRQUFRLEdBQUc7Z0JBQ2YsTUFBTSxFQUFFLEdBQUc7Z0JBQ1gsVUFBVSxFQUFFLElBQUk7Z0JBQ2hCLE9BQU8sRUFBRSxFQUFFO2dCQUNYLElBQUksRUFBRSxFQUFFO2dCQUNSLE1BQU0sRUFBRTtvQkFDTixHQUFHLEVBQUUsdUJBQXVCO2lCQUM3QjthQUNGLENBQUM7WUFDRixNQUFNLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3BELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLGlFQUFpRSxFQUFFO1lBQ3BFLElBQU0sUUFBUSxHQUFHO2dCQUNmLE1BQU0sRUFBRSxHQUFHO2dCQUNYLFVBQVUsRUFBRSxJQUFJO2dCQUNoQixPQUFPLEVBQUU7b0JBQ1AsY0FBYyxFQUFFLGtCQUFrQjtpQkFDbkM7Z0JBQ0QsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7Z0JBQzlCLE1BQU0sRUFBRTtvQkFDTixHQUFHLEVBQUUsdUJBQXVCO2lCQUM3QjthQUNGLENBQUM7WUFDRixNQUFNLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3BELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDZEQUE2RCxFQUFFO1lBQ2hFLElBQU0sUUFBUSxHQUFHO2dCQUNmLE1BQU0sRUFBRSxHQUFHO2dCQUNYLFVBQVUsRUFBRSxJQUFJO2dCQUNoQixPQUFPLEVBQUU7b0JBQ1AsY0FBYyxFQUFFLGtCQUFrQjtpQkFDbkM7Z0JBQ0QsSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtnQkFDZCxNQUFNLEVBQUU7b0JBQ04sR0FBRyxFQUFFLHVCQUF1QjtpQkFDN0I7YUFDRixDQUFDO1lBQ0YsTUFBTSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNwRCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxxREFBcUQsRUFBRTtZQUN4RCxJQUFNLFFBQVEsR0FBRztnQkFDZixNQUFNLEVBQUUsR0FBRztnQkFDWCxVQUFVLEVBQUUsSUFBSTtnQkFDaEIsT0FBTyxFQUFFO29CQUNQLGNBQWMsRUFBRSxZQUFZO2lCQUM3QjtnQkFDRCxJQUFJLEVBQUUsSUFBSSxXQUFXLENBQUMsRUFBRSxDQUFDO2dCQUN6QixNQUFNLEVBQUU7b0JBQ04sR0FBRyxFQUFFLHVCQUF1QjtpQkFDN0I7YUFDRixDQUFDO1lBQ0YsTUFBTSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNwRCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoibGliL3JlcXVlc3QvaGVscGVycy9kYXRhLnNwZWMuYnJvd3Nlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTggYnkgRmlsZXN0YWNrXG4gKiBTb21lIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHsgcHJlcGFyZURhdGEsIHBhcnNlUmVzcG9uc2UgfSBmcm9tICcuL2RhdGEnO1xuXG5kZXNjcmliZSgnUmVxdWVzdC9IZWxwZXJzL0RhdGEnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdwcmVwYXJlIGRhdGEnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gZW1wdHkgZGF0YScsICgpID0+IHtcbiAgICAgIGNvbnN0IGRhdGEgPSB7IHVybDogJ2h0dHBzOi8vZmlsZXN0YWNrLmNvbScsIGRhdGE6IHt9IH07XG4gICAgICBleHBlY3QocHJlcGFyZURhdGEoZGF0YSkpLnRvRXF1YWwoZGF0YSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiBBcnJheUJ1ZmZlcicsICgpID0+IHtcbiAgICAgIGNvbnN0IGRhdGEgPSB7IHVybDogJ2h0dHBzOi8vZmlsZXN0YWNrLmNvbScsIGRhdGE6IG5ldyBBcnJheUJ1ZmZlcigxMCkgfTtcbiAgICAgIGV4cGVjdChwcmVwYXJlRGF0YShkYXRhKSkudG9FcXVhbChkYXRhKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIHVybCBwYXJhbXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBkYXRhID0geyB1cmw6ICdodHRwczovL2ZpbGVzdGFjay5jb20nLCBkYXRhOiBuZXcgVVJMU2VhcmNoUGFyYW1zKCdxPXNlYXJjaCZpZD0xJykgfTtcbiAgICAgIGV4cGVjdChwcmVwYXJlRGF0YShkYXRhKSkudG9FcXVhbChkYXRhKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3BhcnNlIHJlc3BvbnNlJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIGVxdWFsIHJlc3BvbnNlIGRhdGEnLCAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICAgIHN0YXR1c1RleHQ6ICdvaycsXG4gICAgICAgIGhlYWRlcnM6IHt9LFxuICAgICAgICBkYXRhOiBbXSxcbiAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgdXJsOiAnaHR0cHM6Ly9maWxlc3RhY2suY29tJyxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgICBleHBlY3QocGFyc2VSZXNwb25zZShyZXNwb25zZSkpLnRvRXF1YWwocmVzcG9uc2UpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gcmVzcG9uc2Ugd2l0aCBhcHBsaWNhdGlvbi9qc29uIGFuZCBkYXRhIHN0cmluZ2lmeScsICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICBzdGF0dXM6IDIwMCxcbiAgICAgICAgc3RhdHVzVGV4dDogJ29rJyxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIH0sXG4gICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHsgYTogMSB9KSxcbiAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgdXJsOiAnaHR0cHM6Ly9maWxlc3RhY2suY29tJyxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgICBleHBlY3QocGFyc2VSZXNwb25zZShyZXNwb25zZSkpLnRvRXF1YWwocmVzcG9uc2UpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gcmVzcG9uc2Ugd2l0aCBhcHBsaWNhdGlvbi9qc29uIGFuZCBqc29uIGRhdGEgJywgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICBzdGF0dXNUZXh0OiAnb2snLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgfSxcbiAgICAgICAgZGF0YTogeyBhOiAxIH0sXG4gICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgIHVybDogJ2h0dHBzOi8vZmlsZXN0YWNrLmNvbScsXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgICAgZXhwZWN0KHBhcnNlUmVzcG9uc2UocmVzcG9uc2UpKS50b0VxdWFsKHJlc3BvbnNlKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIHRleHQvcGxhaW4gcmVzcG9uc2Ugd2l0aCBBcnJheUJ1ZmZlciAnLCAoKSA9PiB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICAgIHN0YXR1c1RleHQ6ICdvaycsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnY29udGVudC10eXBlJzogJ3RleHQvcGxhaW4nLFxuICAgICAgICB9LFxuICAgICAgICBkYXRhOiBuZXcgQXJyYXlCdWZmZXIoMTApLFxuICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICB1cmw6ICdodHRwczovL2ZpbGVzdGFjay5jb20nLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICAgIGV4cGVjdChwYXJzZVJlc3BvbnNlKHJlc3BvbnNlKSkudG9FcXVhbChyZXNwb25zZSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=
