"use strict";
/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var preview_1 = require("./preview");
var mockAppendChild = jest.fn();
var defaultSession = {
    'apikey': 'TEST_API_KEY',
    'urls': {
        'fileApiUrl': 'https://www.filestackapi.com/api/file',
        'uploadApiUrl': 'https://upload.filestackapi.com',
        'cloudApiUrl': 'https://cloud.filestackapi.com',
        'cdnUrl': 'https://cdn.filestackcontent.com',
        'pickerUrl': 'https://static.filestackapi.com/picker/1.4.4/picker.js',
    },
};
describe('api:upload:preview', function () {
    beforeEach(function () {
        spyOn(window, 'open').and.returnValue(true);
        spyOn(document, 'createElement').and.returnValue({
            src: '',
            width: '',
            height: '',
        });
        spyOn(document, 'getElementById').and.callFake(function (id) {
            var obj;
            if (id === 'testId') {
                obj = { appendChild: mockAppendChild };
            }
            return obj;
        });
    });
    describe('preview', function () {
        it('should open a proper url with preview of a file', function () {
            var handle = 'testHandle';
            preview_1.preview(defaultSession, handle);
            expect(window.open).toBeCalledTimes(1);
            expect(window.open).toBeCalledWith('https://cdn.filestackcontent.com/preview/testHandle', 'testHandle');
        });
        it('should open a proper url with preview of a file with src handle', function () {
            var handle = 'src://test123/test.jpg';
            preview_1.preview(defaultSession, handle);
            expect(window.open).toBeCalledTimes(1);
            expect(window.open).toBeCalledWith('https://cdn.filestackcontent.com/TEST_API_KEY/preview/src://test123/test.jpg', 'src://test123/test.jpg');
        });
        it('should open iframe inside provided options.id', function () {
            var handle = 'src://test123/test.jpg';
            var options = {
                id: 'testId',
                css: 'customCss',
            };
            preview_1.preview(defaultSession, handle, options);
            var expected = { 'height': '100%', 'width': '100%', 'src': 'https://cdn.filestackcontent.com/TEST_API_KEY/preview=css:%22customCss%22/src://test123/test.jpg' };
            expect(mockAppendChild).toBeCalledTimes(1);
            expect(mockAppendChild).toBeCalledWith(expected);
        });
        it('should throw an error when handle is not provided', function () {
            expect(function () { preview_1.preview(defaultSession); }).toThrow('A valid Filestack handle or storage alias is required for preview');
        });
        it('should throw an error when id provided and dom element not found', function () {
            var handle = 'src://test123/test.jpg';
            var options = {
                id: 'testId2',
            };
            expect(function () { preview_1.preview(defaultSession, handle, options); }).toThrow('DOM Element with id "testId2" not found.');
        });
        it('should throw an error on invalid preview params', function () {
            var handle = 'src://test123/test.jpg';
            var options = {
                id: {},
                test: 123,
            };
            // @ts-ignore
            expect(function () { preview_1.preview(defaultSession, handle, options); }).toThrow('Invalid preview params');
        });
    });
    describe('getUrl', function () {
        it('should be able to get url with security', function () {
            var handle = 'TEST_HANDLE';
            var options = {
                id: 'testId2',
            };
            var security = {
                policy: 'eyJleHBpcnkiOjE1MjM1OTU2MDAsImNhbGwiOlsicmVhZCIsImNvbnZlcnQiXSwiaGFuZGxlIjoiYmZUTkNpZ1JMcTBRTU9yc0ZLemIifQ==',
                signature: 'ab1624c9f219ca0118f1af43d21ee87a09a07645c15c9fdbb7447818739c2b8b',
            };
            var result = preview_1.getUrl(defaultSession, handle, options, security);
            var expected = 'https://cdn.filestackcontent.com/preview/security=policy:eyJleHBpcnkiOjE1MjM1OTU2MDAsImNhbGwiOlsicmVhZCIsImNvbnZlcnQiXSwiaGFuZGxlIjoiYmZUTkNpZ1JMcTBRTU9yc0ZLemIifQ==,signature:ab1624c9f219ca0118f1af43d21ee87a09a07645c15c9fdbb7447818739c2b8b/TEST_HANDLE';
            expect(result).toBe(expected);
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvYXBpL3ByZXZpZXcuc3BlYy5icm93c2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7O0FBRUgscUNBQTRDO0FBRTVDLElBQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztBQUVsQyxJQUFNLGNBQWMsR0FBRztJQUNyQixRQUFRLEVBQUUsY0FBYztJQUN4QixNQUFNLEVBQUU7UUFDTixZQUFZLEVBQUUsdUNBQXVDO1FBQ3JELGNBQWMsRUFBRSxpQ0FBaUM7UUFDakQsYUFBYSxFQUFFLGdDQUFnQztRQUMvQyxRQUFRLEVBQUUsa0NBQWtDO1FBQzVDLFdBQVcsRUFBRSx3REFBd0Q7S0FDdEU7Q0FDRixDQUFDO0FBRUYsUUFBUSxDQUFDLG9CQUFvQixFQUFFO0lBQzdCLFVBQVUsQ0FBQztRQUNULEtBQUssQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUU1QyxLQUFLLENBQUMsUUFBUSxFQUFFLGVBQWUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUM7WUFDL0MsR0FBRyxFQUFFLEVBQUU7WUFDUCxLQUFLLEVBQUUsRUFBRTtZQUNULE1BQU0sRUFBRSxFQUFFO1NBQ1gsQ0FBQyxDQUFDO1FBRUgsS0FBSyxDQUFDLFFBQVEsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsVUFBQyxFQUFFO1lBQ2hELElBQUksR0FBRyxDQUFDO1lBRVIsSUFBSSxFQUFFLEtBQUssUUFBUSxFQUFFO2dCQUNuQixHQUFHLEdBQUcsRUFBRSxXQUFXLEVBQUUsZUFBZSxFQUFFLENBQUM7YUFDeEM7WUFFRCxPQUFPLEdBQUcsQ0FBQztRQUNiLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsU0FBUyxFQUFFO1FBQ2xCLEVBQUUsQ0FBQyxpREFB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UyxFQUFFLGtFQUFrRTthQUM5RSxDQUFDO1lBRUYsSUFBTSxNQUFNLEdBQUcsZ0JBQU0sQ0FBQyxjQUFjLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztZQUNqRSxJQUFNLFFBQVEsR0FBRyw4UEFBOFAsQ0FBQztZQUNoUixNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2hDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJsaWIvYXBpL3ByZXZpZXcuc3BlYy5icm93c2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxOCBieSBGaWxlc3RhY2suXG4gKiBTb21lIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgJ0xpY2Vuc2UnKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAnQVMgSVMnIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBwcmV2aWV3LCBnZXRVcmwgfSBmcm9tICcuL3ByZXZpZXcnO1xuXG5jb25zdCBtb2NrQXBwZW5kQ2hpbGQgPSBqZXN0LmZuKCk7XG5cbmNvbnN0IGRlZmF1bHRTZXNzaW9uID0ge1xuICAnYXBpa2V5JzogJ1RFU1RfQVBJX0tFWScsXG4gICd1cmxzJzoge1xuICAgICdmaWxlQXBpVXJsJzogJ2h0dHBzOi8vd3d3LmZpbGVzdGFja2FwaS5jb20vYXBpL2ZpbGUnLFxuICAgICd1cGxvYWRBcGlVcmwnOiAnaHR0cHM6Ly91cGxvYWQuZmlsZXN0YWNrYXBpLmNvbScsXG4gICAgJ2Nsb3VkQXBpVXJsJzogJ2h0dHBzOi8vY2xvdWQuZmlsZXN0YWNrYXBpLmNvbScsXG4gICAgJ2NkblVybCc6ICdodHRwczovL2Nkbi5maWxlc3RhY2tjb250ZW50LmNvbScsXG4gICAgJ3BpY2tlclVybCc6ICdodHRwczovL3N0YXRpYy5maWxlc3RhY2thcGkuY29tL3BpY2tlci8xLjQuNC9waWNrZXIuanMnLFxuICB9LFxufTtcblxuZGVzY3JpYmUoJ2FwaTp1cGxvYWQ6cHJldmlldycsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgc3B5T24od2luZG93LCAnb3BlbicpLmFuZC5yZXR1cm5WYWx1ZSh0cnVlKTtcblxuICAgIHNweU9uKGRvY3VtZW50LCAnY3JlYXRlRWxlbWVudCcpLmFuZC5yZXR1cm5WYWx1ZSh7XG4gICAgICBzcmM6ICcnLFxuICAgICAgd2lkdGg6ICcnLFxuICAgICAgaGVpZ2h0OiAnJyxcbiAgICB9KTtcblxuICAgIHNweU9uKGRvY3VtZW50LCAnZ2V0RWxlbWVudEJ5SWQnKS5hbmQuY2FsbEZha2UoKGlkKSA9PiB7XG4gICAgICBsZXQgb2JqO1xuXG4gICAgICBpZiAoaWQgPT09ICd0ZXN0SWQnKSB7XG4gICAgICAgIG9iaiA9IHsgYXBwZW5kQ2hpbGQ6IG1vY2tBcHBlbmRDaGlsZCB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgncHJldmlldycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIG9wZW4gYSBwcm9wZXIgdXJsIHdpdGggcHJldmlldyBvZiBhIGZpbGUnLCAoKSA9PiB7XG4gICAgICBjb25zdCBoYW5kbGUgPSAndGVzdEhhbmRsZSc7XG4gICAgICBwcmV2aWV3KGRlZmF1bHRTZXNzaW9uLCBoYW5kbGUpO1xuICAgICAgZXhwZWN0KHdpbmRvdy5vcGVuKS50b0JlQ2FsbGVkVGltZXMoMSk7XG4gICAgICBleHBlY3Qod2luZG93Lm9wZW4pLnRvQmVDYWxsZWRXaXRoKCdodHRwczovL2Nkbi5maWxlc3RhY2tjb250ZW50LmNvbS9wcmV2aWV3L3Rlc3RIYW5kbGUnLCAndGVzdEhhbmRsZScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBvcGVuIGEgcHJvcGVyIHVybCB3aXRoIHByZXZpZXcgb2YgYSBmaWxlIHdpdGggc3JjIGhhbmRsZScsICgpID0+IHtcbiAgICAgIGNvbnN0IGhhbmRsZSA9ICdzcmM6Ly90ZXN0MTIzL3Rlc3QuanBnJztcbiAgICAgIHByZXZpZXcoZGVmYXVsdFNlc3Npb24sIGhhbmRsZSk7XG5cbiAgICAgIGV4cGVjdCh3aW5kb3cub3BlbikudG9CZUNhbGxlZFRpbWVzKDEpO1xuICAgICAgZXhwZWN0KHdpbmRvdy5vcGVuKS50b0JlQ2FsbGVkV2l0aCgnaHR0cHM6Ly9jZG4uZmlsZXN0YWNrY29udGVudC5jb20vVEVTVF9BUElfS0VZL3ByZXZpZXcvc3JjOi8vdGVzdDEyMy90ZXN0LmpwZycsICdzcmM6Ly90ZXN0MTIzL3Rlc3QuanBnJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIG9wZW4gaWZyYW1lIGluc2lkZSBwcm92aWRlZCBvcHRpb25zLmlkJywgKCkgPT4ge1xuICAgICAgY29uc3QgaGFuZGxlID0gJ3NyYzovL3Rlc3QxMjMvdGVzdC5qcGcnO1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgaWQ6ICd0ZXN0SWQnLFxuICAgICAgICBjc3M6ICdjdXN0b21Dc3MnLFxuICAgICAgfTtcblxuICAgICAgcHJldmlldyhkZWZhdWx0U2Vzc2lvbiwgaGFuZGxlLCBvcHRpb25zKTtcbiAgICAgIGNvbnN0IGV4cGVjdGVkID0geyAnaGVpZ2h0JzogJzEwMCUnLCAnd2lkdGgnOiAnMTAwJScsICdzcmMnOiAnaHR0cHM6Ly9jZG4uZmlsZXN0YWNrY29udGVudC5jb20vVEVTVF9BUElfS0VZL3ByZXZpZXc9Y3NzOiUyMmN1c3RvbUNzcyUyMi9zcmM6Ly90ZXN0MTIzL3Rlc3QuanBnJyB9O1xuICAgICAgZXhwZWN0KG1vY2tBcHBlbmRDaGlsZCkudG9CZUNhbGxlZFRpbWVzKDEpO1xuICAgICAgZXhwZWN0KG1vY2tBcHBlbmRDaGlsZCkudG9CZUNhbGxlZFdpdGgoZXhwZWN0ZWQpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB0aHJvdyBhbiBlcnJvciB3aGVuIGhhbmRsZSBpcyBub3QgcHJvdmlkZWQnLCAoKSA9PiB7XG4gICAgICBleHBlY3QoKCkgPT4geyBwcmV2aWV3KGRlZmF1bHRTZXNzaW9uKTsgfSkudG9UaHJvdygnQSB2YWxpZCBGaWxlc3RhY2sgaGFuZGxlIG9yIHN0b3JhZ2UgYWxpYXMgaXMgcmVxdWlyZWQgZm9yIHByZXZpZXcnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3Igd2hlbiBpZCBwcm92aWRlZCBhbmQgZG9tIGVsZW1lbnQgbm90IGZvdW5kJywgKCkgPT4ge1xuICAgICAgY29uc3QgaGFuZGxlID0gJ3NyYzovL3Rlc3QxMjMvdGVzdC5qcGcnO1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgaWQ6ICd0ZXN0SWQyJyxcbiAgICAgIH07XG4gICAgICBleHBlY3QoKCkgPT4geyBwcmV2aWV3KGRlZmF1bHRTZXNzaW9uLCBoYW5kbGUsIG9wdGlvbnMpOyB9KS50b1Rocm93KCdET00gRWxlbWVudCB3aXRoIGlkIFwidGVzdElkMlwiIG5vdCBmb3VuZC4nKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3Igb24gaW52YWxpZCBwcmV2aWV3IHBhcmFtcycsICgpID0+IHtcbiAgICAgIGNvbnN0IGhhbmRsZSA9ICdzcmM6Ly90ZXN0MTIzL3Rlc3QuanBnJztcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIGlkOiB7fSxcbiAgICAgICAgdGVzdDogMTIzLFxuICAgICAgfTtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGV4cGVjdCgoKSA9PiB7IHByZXZpZXcoZGVmYXVsdFNlc3Npb24sIGhhbmRsZSwgb3B0aW9ucyk7IH0pLnRvVGhyb3coJ0ludmFsaWQgcHJldmlldyBwYXJhbXMnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2dldFVybCcsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGJlIGFibGUgdG8gZ2V0IHVybCB3aXRoIHNlY3VyaXR5JywgKCkgPT4ge1xuICAgICAgY29uc3QgaGFuZGxlID0gJ1RFU1RfSEFORExFJztcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIGlkOiAndGVzdElkMicsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBzZWN1cml0eSA9IHtcbiAgICAgICAgcG9saWN5OiAnZXlKbGVIQnBjbmtpT2pFMU1qTTFPVFUyTURBc0ltTmhiR3dpT2xzaWNtVmhaQ0lzSW1OdmJuWmxjblFpWFN3aWFHRnVaR3hsSWpvaVltWlVUa05wWjFKTWNUQlJUVTl5YzBaTGVtSWlmUT09JyxcbiAgICAgICAgc2lnbmF0dXJlOiAnYWIxNjI0YzlmMjE5Y2EwMTE4ZjFhZjQzZDIxZWU4N2EwOWEwNzY0NWMxNWM5ZmRiYjc0NDc4MTg3MzljMmI4YicsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBnZXRVcmwoZGVmYXVsdFNlc3Npb24sIGhhbmRsZSwgb3B0aW9ucywgc2VjdXJpdHkpO1xuICAgICAgY29uc3QgZXhwZWN0ZWQgPSAnaHR0cHM6Ly9jZG4uZmlsZXN0YWNrY29udGVudC5jb20vcHJldmlldy9zZWN1cml0eT1wb2xpY3k6ZXlKbGVIQnBjbmtpT2pFMU1qTTFPVFUyTURBc0ltTmhiR3dpT2xzaWNtVmhaQ0lzSW1OdmJuWmxjblFpWFN3aWFHRnVaR3hsSWpvaVltWlVUa05wWjFKTWNUQlJUVTl5YzBaTGVtSWlmUT09LHNpZ25hdHVyZTphYjE2MjRjOWYyMTljYTAxMThmMWFmNDNkMjFlZTg3YTA5YTA3NjQ1YzE1YzlmZGJiNzQ0NzgxODczOWMyYjhiL1RFU1RfSEFORExFJztcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoZXhwZWN0ZWQpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19
