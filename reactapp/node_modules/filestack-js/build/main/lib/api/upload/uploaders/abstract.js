"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/*
 * Copyright (c) 2019 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var debug_1 = require("debug");
var EventEmitter = require("eventemitter3");
var utils_1 = require("./../../../utils");
var filestack_error_1 = require("./../../../../filestack_error");
// regular part size
exports.DEFAULT_PART_SIZE = 6 * 1024 * 1024;
// Minimum part size for upload by multipart
exports.MIN_PART_SIZE = 5 * 1024 * 1024;
// when mode is set to fallback or intelligent, this part size is required
exports.INTELLIGENT_CHUNK_SIZE = 8 * 1024 * 1024;
// Mobile Chunk size for ii
exports.INTELLIGENT_MOBILE_CHUNK_SIZE = 1024 * 1024;
// minimum intelligent chunk size
exports.MIN_CHUNK_SIZE = 32 * 1024;
exports.DEFAULT_STORE_LOCATION = 's3';
var debug = debug_1.default('fs:upload:abstract');
var UploaderAbstract = /** @class */ (function (_super) {
    tslib_1.__extends(UploaderAbstract, _super);
    function UploaderAbstract(storeOptions, concurrency) {
        if (concurrency === void 0) { concurrency = 3; }
        var _this = _super.call(this) || this;
        _this.storeOptions = storeOptions;
        _this.concurrency = concurrency;
        // Parts size options
        _this.partSize = exports.DEFAULT_PART_SIZE;
        // chunk size for ii uploads
        _this.intelligentChunkSize = utils_1.isMobile() ? exports.INTELLIGENT_MOBILE_CHUNK_SIZE : exports.INTELLIGENT_CHUNK_SIZE;
        _this.timeout = 30 * 1000;
        _this.uploadMode = "default" /* DEFAULT */;
        _this.isModeLocked = false; // if account does not support ii in fallback mode we should abort
        _this.integrityCheck = true;
        return _this;
    }
    UploaderAbstract.prototype.setSecurity = function (security) {
        debug('Set security %O', security);
        this.security = security;
    };
    UploaderAbstract.prototype.setApikey = function (apikey) {
        debug("Set apikey to " + apikey);
        this.apikey = apikey;
    };
    UploaderAbstract.prototype.setTimeout = function (timeout) {
        debug("Set request timeout to " + timeout);
        this.timeout = timeout;
    };
    UploaderAbstract.prototype.setRetryConfig = function (cfg) {
        this.retryConfig = cfg;
    };
    UploaderAbstract.prototype.setUrl = function (url) {
        this.url = url;
    };
    /**
     * Set state of checking file integrity
     * @param state
     */
    UploaderAbstract.prototype.setIntegrityCheck = function (state) {
        this.integrityCheck = state;
    };
    /**
     * Sets upload mode
     *
     * @param {UploadMode} mode
     * @param {boolean} [lock=false]
     * @returns
     * @memberof MultipartUploader
     */
    UploaderAbstract.prototype.setUploadMode = function (mode, lock) {
        if (lock === void 0) { lock = false; }
        // this shouldnt happend but for safety reasons if will stay
        /* istanbul ignore next */
        if (this.isModeLocked === true) {
            debug("Cannot switch mode to " + mode + ". Locked! Probably mode is not supported at this apikey");
            return;
        }
        this.isModeLocked = lock;
        debug("Set upload mode to " + mode);
        this.uploadMode = mode;
    };
    /**
     * Set upload part size
     * if part size is smaller than minimum 5mb it will throw error
     *
     * @param {number} size
     * @returns {void}
     * @memberof S3Uploader
     */
    UploaderAbstract.prototype.setPartSize = function (size) {
        if (this.uploadMode !== "default" /* DEFAULT */) {
            debug('Cannot set part size because upload mode is other than default. ');
            return;
        }
        debug("Set part size to " + size);
        if (size < exports.MIN_PART_SIZE) {
            throw new filestack_error_1.FilestackError('Minimum part size is 5MB');
        }
        this.partSize = size;
    };
    /**
     * Returns current part size
     */
    UploaderAbstract.prototype.getPartSize = function () {
        return this.partSize;
    };
    /**
     * Set start part size for ii
     *
     * @param {number} size
     * @memberof S3Uploader
     */
    UploaderAbstract.prototype.setIntelligentChunkSize = function (size) {
        debug("Set inteligent chunk size to " + size);
        if (size < exports.MIN_CHUNK_SIZE) {
            throw new filestack_error_1.FilestackError("Minimum intelligent chunk size is " + exports.MIN_CHUNK_SIZE);
        }
        this.intelligentChunkSize = size;
    };
    /**
     * Returns intelligent chunk size
     */
    UploaderAbstract.prototype.getIntelligentChunkSize = function () {
        return this.intelligentChunkSize;
    };
    /**
     * Returns filestack upload url
     *
     * @private
     * @returns
     * @memberof MultipartUploader
     */
    UploaderAbstract.prototype.getUrl = function () {
        if (!this.url) {
            throw new filestack_error_1.FilestackError('Upload url not set');
        }
        return this.url;
    };
    return UploaderAbstract;
}(EventEmitter));
exports.UploaderAbstract = UploaderAbstract;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
