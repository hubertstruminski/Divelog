"use strict";
/*
 * Copyright (c) 2019 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var picker_1 = require("./picker");
var filestack = require("./../index");
var mockPickerOpen = jest.fn(function () { return Promise.resolve(); });
var mockPickerCrop = jest.fn(function () { return Promise.resolve(); });
var mockPickerClose = jest.fn(function () { return Promise.resolve(); });
var mockPickerCancel = jest.fn(function () { return Promise.resolve(); });
jest.mock('filestack-loader', function () {
    return {
        loadModule: jest.fn(function () {
            return new Promise(function (resolve) {
                resolve(jest.fn().mockImplementation(function () {
                    return {
                        open: mockPickerOpen,
                        crop: mockPickerCrop,
                        close: mockPickerClose,
                        cancel: mockPickerCancel,
                    };
                }));
            });
        }),
        knownModuleIds: {
            picker: '__filestack-picker-module',
        },
    };
});
var pickerInstance;
var client;
describe('picker', function () {
    beforeAll(function () {
        var defaultApikey = 'DEFAULT_API_KEY';
        client = filestack.init(defaultApikey);
    });
    beforeEach(function () {
        pickerInstance = picker_1.picker(client, {});
    });
    it('should properly open picker', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, pickerInstance.open()];
                case 1:
                    _a.sent();
                    expect(mockPickerOpen).toHaveBeenCalledTimes(1);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should properly crop picker', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var files;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    files = ['file1.txt', 'file2.txt'];
                    return [4 /*yield*/, pickerInstance.crop(files)];
                case 1:
                    _a.sent();
                    expect.assertions(2);
                    expect(mockPickerCrop).toHaveBeenCalledTimes(1);
                    expect(mockPickerCrop).toHaveBeenCalledWith(files);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should properly close picker', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, pickerInstance.close()];
                case 1:
                    _a.sent();
                    expect(mockPickerClose).toHaveBeenCalledTimes(1);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should properly cancel picker', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, pickerInstance.cancel()];
                case 1:
                    _a.sent();
                    expect(mockPickerCancel).toHaveBeenCalledTimes(1);
                    return [2 /*return*/];
            }
        });
    }); });
    it('should not throw error on correct params', function () {
        return expect(function () { return picker_1.picker(client, {
            onOpen: function () {
                console.log(123);
            },
            customText: {
                Upload: 'customUpload',
            },
            uploadConfig: {
                partSize: 6 * 1024 * 1024,
            },
            storeTo: {
                container: 'test',
            },
        }); }).not.toThrowError('Invalid picker params');
    });
    it('should throw error on invalid options', function () {
        return expect(function () { return picker_1.picker(client, {
            // @ts-ignore
            onOpen: 'test',
            customText: {
                Upload: 'customUpload',
                // @ts-ignore
                asd: {},
            },
        }); }).toThrowError('Invalid picker params');
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvcGlja2VyLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRzs7O0FBRUgsbUNBQWtDO0FBQ2xDLHNDQUF3QztBQUV4QyxJQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGNBQU0sT0FBQSxPQUFPLENBQUMsT0FBTyxFQUFFLEVBQWpCLENBQWlCLENBQUMsQ0FBQztBQUV4RCxJQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGNBQU0sT0FBQSxPQUFPLENBQUMsT0FBTyxFQUFFLEVBQWpCLENBQWlCLENBQUMsQ0FBQztBQUN4RCxJQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGNBQU0sT0FBQSxPQUFPLENBQUMsT0FBTyxFQUFFLEVBQWpCLENBQWlCLENBQUMsQ0FBQztBQUN6RCxJQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsY0FBTSxPQUFBLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBakIsQ0FBaUIsQ0FBQyxDQUFDO0FBRTFELElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUU7SUFDNUIsT0FBTztRQUNMLFVBQVUsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDO1lBQ2xCLE9BQU8sSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPO2dCQUN6QixPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDO29CQUNuQyxPQUFPO3dCQUNMLElBQUksRUFBRSxjQUFjO3dCQUNwQixJQUFJLEVBQUUsY0FBYzt3QkFDcEIsS0FBSyxFQUFFLGVBQWU7d0JBQ3RCLE1BQU0sRUFBRSxnQkFBZ0I7cUJBQ3pCLENBQUM7Z0JBQ0osQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNOLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDO1FBQ0YsY0FBYyxFQUFFO1lBQ2QsTUFBTSxFQUFFLDJCQUEyQjtTQUNwQztLQUNGLENBQUM7QUFDSixDQUFDLENBQUMsQ0FBQztBQUVILElBQUksY0FBYyxDQUFDO0FBQ25CLElBQUksTUFBTSxDQUFDO0FBRVgsUUFBUSxDQUFDLFFBQVEsRUFBRTtJQUNqQixTQUFTLENBQUM7UUFDUixJQUFNLGFBQWEsR0FBRyxpQkFBaUIsQ0FBQztRQUN4QyxNQUFNLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN6QyxDQUFDLENBQUMsQ0FBQztJQUVILFVBQVUsQ0FBQztRQUNULGNBQWMsR0FBRyxlQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3RDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDZCQUE2QixFQUFFOzs7d0JBQ2hDLHFCQUFNLGNBQWMsQ0FBQyxJQUFJLEVBQUUsRUFBQTs7b0JBQTNCLFNBQTJCLENBQUM7b0JBQzVCLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7OztTQUNqRCxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsNkJBQTZCLEVBQUU7Ozs7O29CQUMxQixLQUFLLEdBQUcsQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7b0JBRXpDLHFCQUFNLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUE7O29CQUFoQyxTQUFnQyxDQUFDO29CQUNqQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNyQixNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ2hELE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQzs7OztTQUNwRCxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsOEJBQThCLEVBQUU7Ozt3QkFDakMscUJBQU0sY0FBYyxDQUFDLEtBQUssRUFBRSxFQUFBOztvQkFBNUIsU0FBNEIsQ0FBQztvQkFDN0IsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFDOzs7O1NBQ2xELENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywrQkFBK0IsRUFBRTs7O3dCQUNsQyxxQkFBTSxjQUFjLENBQUMsTUFBTSxFQUFFLEVBQUE7O29CQUE3QixTQUE2QixDQUFDO29CQUM5QixNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7OztTQUNuRCxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsMENBQTBDLEVBQUU7UUFDN0MsT0FBTyxNQUFNLENBQUMsY0FBTSxPQUFBLGVBQU0sQ0FBQyxNQUFNLEVBQUU7WUFDakMsTUFBTSxFQUFFO2dCQUNOLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDbkIsQ0FBQztZQUNELFVBQVUsRUFBRTtnQkFDVixNQUFNLEVBQUUsY0FBYzthQUN2QjtZQUNELFlBQVksRUFBRTtnQkFDWixRQUFRLEVBQUUsQ0FBQyxHQUFHLElBQUksR0FBRyxJQUFJO2FBQzFCO1lBQ0QsT0FBTyxFQUFFO2dCQUNQLFNBQVMsRUFBRSxNQUFNO2FBQ2xCO1NBQ0YsQ0FBQyxFQWJrQixDQWFsQixDQUFDLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0lBQ2hELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHVDQUF1QyxFQUFFO1FBQzFDLE9BQU8sTUFBTSxDQUFDLGNBQU0sT0FBQSxlQUFNLENBQUMsTUFBTSxFQUFFO1lBQ2pDLGFBQWE7WUFDYixNQUFNLEVBQUUsTUFBTTtZQUNkLFVBQVUsRUFBRTtnQkFDVixNQUFNLEVBQUUsY0FBYztnQkFDdEIsYUFBYTtnQkFDYixHQUFHLEVBQUUsRUFBRTthQUNSO1NBQ0YsQ0FBQyxFQVJrQixDQVFsQixDQUFDLENBQUMsWUFBWSxDQUFDLHVCQUF1QixDQUFDLENBQUM7SUFDNUMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJsaWIvcGlja2VyLnNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE5IGJ5IEZpbGVzdGFjay5cbiAqIFNvbWUgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQgeyBwaWNrZXIgfSBmcm9tICcuL3BpY2tlcic7XG5pbXBvcnQgKiBhcyBmaWxlc3RhY2sgZnJvbSAnLi8uLi9pbmRleCc7XG5cbmNvbnN0IG1vY2tQaWNrZXJPcGVuID0gamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoKSk7XG5cbmNvbnN0IG1vY2tQaWNrZXJDcm9wID0gamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoKSk7XG5jb25zdCBtb2NrUGlja2VyQ2xvc2UgPSBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSgpKTtcbmNvbnN0IG1vY2tQaWNrZXJDYW5jZWwgPSBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSgpKTtcblxuamVzdC5tb2NrKCdmaWxlc3RhY2stbG9hZGVyJywgKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIGxvYWRNb2R1bGU6IGplc3QuZm4oKCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIHJlc29sdmUoamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9wZW46IG1vY2tQaWNrZXJPcGVuLFxuICAgICAgICAgICAgY3JvcDogbW9ja1BpY2tlckNyb3AsXG4gICAgICAgICAgICBjbG9zZTogbW9ja1BpY2tlckNsb3NlLFxuICAgICAgICAgICAgY2FuY2VsOiBtb2NrUGlja2VyQ2FuY2VsLFxuICAgICAgICAgIH07XG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuICAgIH0pLFxuICAgIGtub3duTW9kdWxlSWRzOiB7XG4gICAgICBwaWNrZXI6ICdfX2ZpbGVzdGFjay1waWNrZXItbW9kdWxlJyxcbiAgICB9LFxuICB9O1xufSk7XG5cbmxldCBwaWNrZXJJbnN0YW5jZTtcbmxldCBjbGllbnQ7XG5cbmRlc2NyaWJlKCdwaWNrZXInLCAoKSA9PiB7XG4gIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgY29uc3QgZGVmYXVsdEFwaWtleSA9ICdERUZBVUxUX0FQSV9LRVknO1xuICAgIGNsaWVudCA9IGZpbGVzdGFjay5pbml0KGRlZmF1bHRBcGlrZXkpO1xuICB9KTtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBwaWNrZXJJbnN0YW5jZSA9IHBpY2tlcihjbGllbnQsIHt9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBwcm9wZXJseSBvcGVuIHBpY2tlcicsIGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBwaWNrZXJJbnN0YW5jZS5vcGVuKCk7XG4gICAgZXhwZWN0KG1vY2tQaWNrZXJPcGVuKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcHJvcGVybHkgY3JvcCBwaWNrZXInLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZmlsZXMgPSBbJ2ZpbGUxLnR4dCcsICdmaWxlMi50eHQnXTtcblxuICAgIGF3YWl0IHBpY2tlckluc3RhbmNlLmNyb3AoZmlsZXMpO1xuICAgIGV4cGVjdC5hc3NlcnRpb25zKDIpO1xuICAgIGV4cGVjdChtb2NrUGlja2VyQ3JvcCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAgIGV4cGVjdChtb2NrUGlja2VyQ3JvcCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoZmlsZXMpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHByb3Blcmx5IGNsb3NlIHBpY2tlcicsIGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBwaWNrZXJJbnN0YW5jZS5jbG9zZSgpO1xuICAgIGV4cGVjdChtb2NrUGlja2VyQ2xvc2UpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBwcm9wZXJseSBjYW5jZWwgcGlja2VyJywgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IHBpY2tlckluc3RhbmNlLmNhbmNlbCgpO1xuICAgIGV4cGVjdChtb2NrUGlja2VyQ2FuY2VsKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgbm90IHRocm93IGVycm9yIG9uIGNvcnJlY3QgcGFyYW1zJywgKCkgPT4ge1xuICAgIHJldHVybiBleHBlY3QoKCkgPT4gcGlja2VyKGNsaWVudCwge1xuICAgICAgb25PcGVuOiAoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKDEyMyk7XG4gICAgICB9LFxuICAgICAgY3VzdG9tVGV4dDoge1xuICAgICAgICBVcGxvYWQ6ICdjdXN0b21VcGxvYWQnLFxuICAgICAgfSxcbiAgICAgIHVwbG9hZENvbmZpZzoge1xuICAgICAgICBwYXJ0U2l6ZTogNiAqIDEwMjQgKiAxMDI0LFxuICAgICAgfSxcbiAgICAgIHN0b3JlVG86IHtcbiAgICAgICAgY29udGFpbmVyOiAndGVzdCcsXG4gICAgICB9LFxuICAgIH0pKS5ub3QudG9UaHJvd0Vycm9yKCdJbnZhbGlkIHBpY2tlciBwYXJhbXMnKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCB0aHJvdyBlcnJvciBvbiBpbnZhbGlkIG9wdGlvbnMnLCAoKSA9PiB7XG4gICAgcmV0dXJuIGV4cGVjdCgoKSA9PiBwaWNrZXIoY2xpZW50LCB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBvbk9wZW46ICd0ZXN0JyxcbiAgICAgIGN1c3RvbVRleHQ6IHtcbiAgICAgICAgVXBsb2FkOiAnY3VzdG9tVXBsb2FkJyxcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBhc2Q6IHt9LFxuICAgICAgfSxcbiAgICB9KSkudG9UaHJvd0Vycm9yKCdJbnZhbGlkIHBpY2tlciBwYXJhbXMnKTtcbiAgfSk7XG59KTtcbiJdfQ==
