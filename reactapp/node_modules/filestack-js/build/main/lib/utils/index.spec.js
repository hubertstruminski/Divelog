"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2019 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var index_1 = require("./index");
var config_1 = require("../../config");
var v = require('../../../../package.json').version;
describe('utils:index', function () {
    describe('resolveCdnUrl', function () {
        var session = {
            apikey: 'TEST_API_KEY',
            cname: 'example.com',
            urls: config_1.config.urls,
        };
        it('should properly resolve cdn url with hashed handle', function () {
            var handle = '5aYkEQJSQCmYShsoCnZN';
            var result = index_1.resolveCdnUrl(session, handle);
            expect(result).toEqual('https://cdn.filestackcontent.com');
        });
        it('should properly resolve cdn url with src handle', function () {
            var handle = 'src://test123/test.jpg';
            var result = index_1.resolveCdnUrl(session, handle);
            expect(result).toEqual('https://cdn.filestackcontent.com/TEST_API_KEY');
        });
        it('should properly resolve cdn url with hashed handle', function () {
            var handle = 'https://static1.squarespace.com/static/544eb3cce4b0ef091773611f/t/59ba7ce1bd10f00dcdc80a5f/1505394087367/DSC_0527.jpg';
            var result = index_1.resolveCdnUrl(session, handle);
            expect(result).toEqual('https://cdn.filestackcontent.com/TEST_API_KEY');
        });
        it('should throw an error when using src handle or url without apikey', function () {
            var handle = 'src://test123/test.jpg';
            session.apikey = '';
            expect(function () { index_1.resolveCdnUrl(session, handle); }).toThrow('Api key is required when storage alias is provided');
        });
    });
    describe('resolveHost', function () {
        var hosts = config_1.config.urls;
        var checkHosts = function (hosts, expected) {
            Object.keys(hosts).forEach(function (k) {
                expect(hosts[k].indexOf(expected) > -1).toBeTruthy();
            });
        };
        it('should return proper host', function () {
            var cname = 'example.com';
            var result = index_1.resolveHost(hosts, cname);
            checkHosts(result, cname);
        });
        it('should return hosts when cname is an empty string', function () {
            var cname = '';
            var result = index_1.resolveHost(hosts, cname);
            checkHosts(result, cname);
        });
    });
    describe('removeEmpty', function () {
        it('should remove empty options from an object', function () {
            var testOb = { test1: true, test2: undefined, test3: false };
            expect(index_1.removeEmpty(testOb)).toEqual({ test1: true, test3: false });
        });
    });
    describe('uniqueTime', function () {
        it('should return unique times', function () {
            expect(index_1.uniqueTime()).not.toEqual(index_1.uniqueTime());
        });
    });
    describe('uniqueId', function () {
        it('should get different ids each time', function () {
            expect(index_1.uniqueId()).not.toEqual(index_1.uniqueId());
        });
        it('should return id with given length', function () {
            expect(index_1.uniqueId(12).length).toEqual(12);
            expect(index_1.uniqueId(4).length).toEqual(4);
        });
    });
    describe('md5', function () {
        it('should return correct md5 value', function () {
            expect(index_1.md5(Buffer.from('test'))).toEqual('CY9rzUYh03PK3k6DJie09g==');
        });
    });
    describe('getVersion', function () {
        it('should return correct version from package json', function () {
            expect(index_1.getVersion()).toEqual("JS-" + v);
        });
    });
    describe('b64', function () {
        it('should return correct b65 value', function () {
            expect(index_1.b64('testtext')).toEqual('dGVzdHRleHQ=');
        });
        it('should escape chars to make b64 url safe string - char "/"', function () {
            expect(index_1.b64('*0eijATh#"I$PR)s<uTa}{t>E"LC:L', true)).toEqual('KjBlaWpBVGgjIkkkUFIpczx1VGF9e3Q-RSJMQzpM');
        });
        it('should escape chars to make b64 url safe string - char ""', function () {
            expect(index_1.b64('W{wpB@ckYD0O@&?!||9PS)7^+F*H8N', true)).toEqual('V3t3cEJAY2tZRDBPQCY_IXx8OVBTKTdeK0YqSDhO');
        });
    });
    describe('sanitizeName', function () {
        it('should sanitize file name with extension', function () {
            expect(index_1.sanitizeName('a\\{%`"~[]#|^<>1.jpg')).toEqual('a-------------1.jpg');
        });
        it('should sanitize file name without extension', function () {
            expect(index_1.sanitizeName('123qwe')).toEqual('123qwe');
        });
        it('should return undefined on empty string', function () {
            expect(index_1.sanitizeName('')).toEqual('undefined');
        });
        it('should respect sanitize options as boolean', function () {
            expect(index_1.sanitizeName('[]#|.jpg', false)).toEqual('[]#|.jpg');
        });
        it('should respect sanitize options with provided options', function () {
            expect(index_1.sanitizeName('[]#|.jpg', {
                exclude: ['[', ']'],
                replacement: '_',
            })).toEqual('__#|.jpg');
        });
    });
    describe('filterObject', function () {
        it('should filter object', function () {
            expect(index_1.filterObject({
                test: 1,
                test2: 2,
                test3: 3,
            }, ['test', 'test2'])).toEqual({
                test: 1,
                test2: 2,
            });
        });
        it('should result the same object on empty requirements', function () {
            expect(index_1.filterObject({
                test: 1,
                test2: 2,
                test3: 3,
            }, [])).toEqual({
                test: 1,
                test2: 2,
                test3: 3,
            });
        });
        it('should not throw on empty filtered object', function () {
            expect(index_1.filterObject({}, ['test'])).toEqual({});
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
