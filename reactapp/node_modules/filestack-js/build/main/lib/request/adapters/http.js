"use strict";
/*
 * Copyright (c) 2018 by Filestack
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var url = require("url");
var zlib = require("zlib");
var debug_1 = require("debug");
var utils_1 = require("../../utils");
var utils = require("../utils");
var helpers_1 = require("./../helpers");
var error_1 = require("../error");
var HTTPS_REGEXP = /https:?/;
var MAX_REDIRECTS = 10;
var CANCEL_CLEAR = "FsCleanMemory";
var debug = debug_1.default('fs:request:http');
var HttpAdapter = /** @class */ (function () {
    function HttpAdapter() {
        this.redirectHoops = 0;
        this.redirectPaths = [];
    }
    HttpAdapter.prototype.request = function (config) {
        var _this = this;
        // if this option is unspecified set it by default
        if (typeof config.filestackHeaders === 'undefined') {
            config.filestackHeaders = true;
        }
        config.headers = helpers_1.normalizeHeaders(config.headers);
        var _a = helpers_1.prepareData(config), data = _a.data, headers = _a.headers;
        headers = helpers_1.set(headers, 'user-agent', "filestack-request/" + utils_1.getVersion());
        // for now we are not using streams
        if (data) {
            debug('Request data %O', data);
            if (!Buffer.isBuffer(data)) {
                if (!utils.isString(data)) {
                    return Promise.reject(new error_1.FsRequestError('Data must be a string, JSON or a Buffer', config));
                }
                data = Buffer.from(data, 'utf-8');
            }
            headers = helpers_1.set(headers, 'content-length', data.length, true);
        }
        // HTTP basic authentication
        var auth;
        if (config.auth) {
            if (!config.auth.username || config.auth.username.length === 0) {
                return Promise.reject(new error_1.FsRequestError("Basic auth: username is required " + config.auth, config));
            }
            auth = config.auth.username + ":" + config.auth.password;
        }
        // Parse url
        var parsed = url.parse(config.url);
        // try to add default https protocol
        if (!parsed.protocol) {
            parsed = url.parse("https://" + config.url);
        }
        /* istanbul ignore next: just be sure that the host is parsed correctly, not needed to test */
        if (!parsed.host) {
            return Promise.reject(new error_1.FsRequestError("Cannot parse provided url " + config.url, config));
        }
        // normalize auth header
        if (auth && headers.Authorization) {
            delete headers.Authorization;
        }
        var isHttpsRequest = HTTPS_REGEXP.test(parsed.protocol);
        var agent = isHttpsRequest ? require('https') : require('http');
        var options = {
            path: helpers_1.combineURL(parsed.path, config.params),
            host: parsed.host,
            port: parsed.port,
            protocol: parsed.protocol,
            method: config.method.toUpperCase(),
            headers: headers,
            agent: new agent.Agent(),
            auth: auth,
        };
        debug('Starting %s request with options %O', isHttpsRequest ? 'https' : 'http', options);
        return new Promise(function (resolve, reject) {
            var req = agent.request(options, function (res) {
                /* istanbul ignore next: just be sure that response will not be called after request is aborted */
                if (!req || req.aborted) {
                    return reject(new error_1.FsRequestError('Request aborted', config));
                }
                var stream = res;
                debug('Response statusCode: %d, Response Headers: %O', res.statusCode, res.headers);
                var compressHeaders = res.headers['content-encoding'];
                if (compressHeaders && compressHeaders.length && ['gzip', 'compress', 'deflate'].some(function (v) { return compressHeaders.indexOf(v) > -1; })) {
                    // add the unzipper to the body stream processing pipeline
                    stream = res.statusCode === 204 ? stream : stream.pipe(zlib.createUnzip());
                    // remove the content-encoding in order to not confuse downstream operations
                    delete res.headers['content-encoding'];
                }
                var response = {
                    status: res.statusCode,
                    statusText: res.statusMessage,
                    headers: res.headers,
                    config: config,
                    data: {},
                };
                // we need to follow redirect so make same request with new location
                if ([301, 302].indexOf(res.statusCode) > -1) {
                    debug('Redirect received %s', res.statusCode);
                    if (_this.redirectHoops >= MAX_REDIRECTS) {
                        return reject(new error_1.FsRequestError("Max redirects (" + _this.redirectHoops + ") reached. Exiting", config, response, error_1.FsRequestErrorCode.REDIRECT));
                    }
                    var url_1 = res.headers['location'];
                    if (!url_1 || url_1.length === 0) {
                        return reject(new error_1.FsRequestError("Redirect header location not found", config, response, error_1.FsRequestErrorCode.REDIRECT));
                    }
                    if (_this.redirectPaths.indexOf(url_1) > -1) {
                        return reject(new error_1.FsRequestError("Redirect loop detected at url " + url_1, config, response, error_1.FsRequestErrorCode.REDIRECT));
                    }
                    _this.redirectPaths.push(url_1);
                    _this.redirectHoops++;
                    // free resources
                    res = undefined;
                    req = undefined;
                    debug('Redirecting request to %s (hoop-count: %d)', url_1, _this.redirectHoops);
                    // clear cancel token to avoid memory leak
                    if (config.cancelToken) {
                        config.cancelToken.cancel(CANCEL_CLEAR);
                    }
                    return resolve(_this.request(Object.assign({}, config, { url: url_1 })));
                }
                var responseBuffer = [];
                stream.on('data', function (chunk) { return responseBuffer.push(chunk); });
                /* istanbul ignore next: its hard to test socket events with jest and nock - tested manually */
                stream.on('error', function (err) {
                    res = undefined;
                    req = undefined;
                    responseBuffer = undefined;
                    debug('Request error: Aborted %O', err);
                    if (req.aborted) {
                        return;
                    }
                    return reject(new error_1.FsRequestError(err.message, config, null, error_1.FsRequestErrorCode.NETWORK));
                });
                stream.on('end', function () {
                    // check if there is any response data inside
                    if (res.statusCode !== 204) {
                        // prepare response
                        response.data = Buffer.concat(responseBuffer);
                        response = helpers_1.parseResponse(response);
                    }
                    else {
                        response.data = null;
                    }
                    // free resources
                    res = undefined;
                    req = undefined;
                    responseBuffer = undefined;
                    if (500 <= response.status && response.status <= 599) {
                        // server error throw
                        debug('Server error(5xx) - %O', response);
                        return reject(new error_1.FsRequestError("Server error " + url, config, response, error_1.FsRequestErrorCode.SERVER));
                    }
                    else if (400 <= response.status && response.status <= 499) {
                        debug('Request error(4xx) - %O', response);
                        return reject(new error_1.FsRequestError("Request error " + url, config, response, error_1.FsRequestErrorCode.REQUEST));
                    }
                    debug('Request ends: %O', response);
                    return resolve(response);
                });
            });
            if (config.cancelToken) {
                config.cancelToken
                    .getSource()
                    .then(function (reason) {
                    // do nothing if promise is resolved by system
                    if (reason && reason.message === CANCEL_CLEAR) {
                        return;
                    }
                    /* istanbul ignore next: if request is done cancel token should not throw any error */
                    if (req) {
                        req.abort();
                        req = null;
                    }
                    debug('Request canceled by user %s, config: %O', reason, config);
                    return reject(new error_1.FsRequestError("Request aborted. Reason: " + reason, config, null, error_1.FsRequestErrorCode.ABORTED));
                })
                    /* istanbul ignore next: only for safety */
                    .catch(function () { });
            }
            if (config.timeout) {
                req.setTimeout(config.timeout, function () {
                    req.abort();
                    return reject(new error_1.FsRequestError('Request timeout', config, null, error_1.FsRequestErrorCode.TIMEOUT));
                });
            }
            req.on('error', function (err) {
                if (!req || req.aborted) {
                    return;
                }
                debug('Request error: %s - %O', err, err.code);
                return reject(new error_1.FsRequestError("Request error: " + err.code, config, null, error_1.FsRequestErrorCode.NETWORK));
            });
            req.end(data);
        });
    };
    return HttpAdapter;
}());
exports.HttpAdapter = HttpAdapter;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
