"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2018 by Filestack
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var debug_1 = require("debug");
var utils = require("../utils");
var types_1 = require("../types");
var error_1 = require("../error");
var helpers_1 = require("./../helpers");
var debug = debug_1.default('fs:request:xhr');
var CANCEL_CLEAR = "FsCleanMemory";
var XhrAdapter = /** @class */ (function () {
    function XhrAdapter() {
    }
    XhrAdapter.prototype.request = function (config) {
        // if this option is unspecified set it by default
        if (typeof config.filestackHeaders === 'undefined') {
            config.filestackHeaders = true;
        }
        config = helpers_1.prepareData(config);
        config.headers = config.headers || {};
        var data = config.data, headers = config.headers;
        // if data is type of form let browser to set proper content type
        if (utils.isFormData(data)) {
            delete headers['Content-Type'];
        }
        var request = new XMLHttpRequest();
        // HTTP basic authentication
        if (config.auth) {
            if (!config.auth.username || config.auth.username.length === 0 || !config.auth.password || config.auth.password.length === 0) {
                return Promise.reject(new error_1.FsRequestError("Basic auth: username and password are required " + config.auth, config));
            }
            headers.Authorization = 'Basic ' + btoa(unescape(encodeURIComponent(config.auth.username + ":" + config.auth.password)));
            debug('Set request authorization to %s', config.auth.username + config.auth.password);
        }
        var url = config.url.trim();
        if (!/^http(s)?:\/\//.test(url)) {
            url = "https://" + url;
        }
        url = helpers_1.combineURL(url, config.params);
        debug('Starting request to %s with options %O', url, config);
        request.open(config.method.toUpperCase(), url, true);
        request.timeout = config.timeout;
        return new Promise(function (resolve, reject) {
            request.onreadystatechange = function () {
                if (!request || request.readyState !== 4) {
                    return;
                }
                if (request.status === 0 && !request.responseURL) {
                    return;
                }
                // Prepare the response
                var responseHeaders = helpers_1.parse(request.getAllResponseHeaders());
                var responseData = request.response;
                var response = {
                    data: responseData,
                    status: request.status,
                    statusText: request.statusText,
                    headers: responseHeaders,
                    config: config,
                };
                request = null;
                response = helpers_1.parseResponse(response);
                if (500 <= response.status && response.status <= 599) {
                    // server error throw
                    debug('Server error(5xx) - %O', response);
                    return reject(new error_1.FsRequestError("Server error " + url, config, response, error_1.FsRequestErrorCode.SERVER));
                }
                else if (400 <= response.status && response.status <= 499) {
                    debug('Request error(4xx) - %O', response);
                    return reject(new error_1.FsRequestError("Request error " + url, config, response, error_1.FsRequestErrorCode.REQUEST));
                }
                // clear cancel token to avoid memory leak
                if (config.cancelToken) {
                    config.cancelToken.cancel(CANCEL_CLEAR);
                }
                return resolve(response);
            };
            // Handle browser request cancellation (as opposed to a manual cancellation)
            request.onabort = function handleAbort() {
                /* istanbul ignore next: just to be sure that abort was not called twice */
                if (!request) {
                    return;
                }
                request = null;
                reject(new error_1.FsRequestError('Request aborted', config, null, error_1.FsRequestErrorCode.ABORTED));
            };
            // Handle low level network errors
            request.onerror = function handleError(err) {
                request = null;
                debug('Request error! %O', err);
                reject(new error_1.FsRequestError('Network Error', config, null, error_1.FsRequestErrorCode.NETWORK));
            };
            // Handle timeout
            request.ontimeout = function handleTimeout() {
                request = null;
                debug('Request timed out. %O', config);
                reject(new error_1.FsRequestError('Request timeout', config, null, error_1.FsRequestErrorCode.TIMEOUT));
            };
            // Add headers to the request
            if ('setRequestHeader' in request && headers && Object.keys(headers).length) {
                for (var key in headers) {
                    if (headers[key] === undefined) {
                        continue;
                    }
                    debug('Set request header %s to %s', key, headers[key]);
                    request.setRequestHeader(key, headers[key]);
                }
            }
            if (typeof config.onProgress === 'function' && [types_1.FsHttpMethod.POST, types_1.FsHttpMethod.PUT].indexOf(config.method) > -1) {
                /* istanbul ignore else: else path is just fallback to normal progress event */
                if (request.upload) {
                    debug('Bind to upload progress event');
                    request.upload.addEventListener('progress', config.onProgress);
                }
                else {
                    debug('Bind to progress event');
                    request.addEventListener('progress', config.onProgress);
                }
            }
            if (config.cancelToken) {
                config.cancelToken
                    .getSource()
                    .then(function (reason) {
                    // do nothing if promise is resolved by system
                    if (reason && reason.message === CANCEL_CLEAR) {
                        return;
                    }
                    /* istanbul ignore next: if request is done cancel token should not throw any error */
                    if (request) {
                        request.abort();
                        request = null;
                    }
                    debug('Request canceled by user %s, config: %O', reason, config);
                    return reject(new error_1.FsRequestError("Request aborted. Reason: " + reason, config, null, error_1.FsRequestErrorCode.ABORTED));
                })
                    /* istanbul ignore next: only for safety */
                    .catch(function () { });
            }
            if (data === undefined) {
                data = null;
            }
            request.send(data);
        });
    };
    return XhrAdapter;
}());
exports.XhrAdapter = XhrAdapter;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
