"use strict";
/*
 * Copyright (c) 2018 by Filestack
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = require("./../config");
var transforms_schema_1 = require("./../schema/transforms.schema");
var validator_1 = require("./../schema/validator");
var utils_1 = require("./utils");
var filestack_error_1 = require("./../filestack_error");
var debug_1 = require("debug");
var debug = debug_1.default('fs:filelink');
var Align;
(function (Align) {
    Align["left"] = "left";
    Align["right"] = "right";
    Align["center"] = "center";
    Align["bottom"] = "bottom";
    Align["top"] = "top";
    Align["faces"] = "faces";
    Align["middle"] = "middle";
})(Align = exports.Align || (exports.Align = {}));
/**
 * Fit enum
 */
var FitOptions;
(function (FitOptions) {
    FitOptions["clip"] = "clip";
    FitOptions["crop"] = "crop";
    FitOptions["scale"] = "scale";
    FitOptions["max"] = "max";
})(FitOptions = exports.FitOptions || (exports.FitOptions = {}));
/**
 * Blur enum
 */
var BlurMode;
(function (BlurMode) {
    BlurMode["linear"] = "linear";
    BlurMode["gaussian"] = "gaussian";
})(BlurMode = exports.BlurMode || (exports.BlurMode = {}));
/**
 * Shapes enum
 */
var ShapeType;
(function (ShapeType) {
    ShapeType["oval"] = "oval";
    ShapeType["rect"] = "rect";
})(ShapeType = exports.ShapeType || (exports.ShapeType = {}));
/**
 * Noise type enum
 */
var NoiseType;
(function (NoiseType) {
    NoiseType["none"] = "none";
    NoiseType["low"] = "low";
    NoiseType["medium"] = "medium";
    NoiseType["high"] = "high";
})(NoiseType = exports.NoiseType || (exports.NoiseType = {}));
/**
 * Style type enum
 */
var StyleType;
(function (StyleType) {
    StyleType["artwork"] = "artwork";
    StyleType["photo"] = "photo";
})(StyleType = exports.StyleType || (exports.StyleType = {}));
/**
 * Color space enum
 */
var ColorspaceType;
(function (ColorspaceType) {
    ColorspaceType["RGB"] = "RGB";
    ColorspaceType["CMYK"] = "CMYK";
    ColorspaceType["Input"] = "Input";
})(ColorspaceType = exports.ColorspaceType || (exports.ColorspaceType = {}));
/**
 * Crop faces options enum
 */
var CropfacesType;
(function (CropfacesType) {
    CropfacesType["thumb"] = "thumb";
    CropfacesType["crop"] = "crop";
    CropfacesType["fill"] = "fill";
})(CropfacesType = exports.CropfacesType || (exports.CropfacesType = {}));
/**
 * Convert to format
 */
var VideoTypes;
(function (VideoTypes) {
    VideoTypes["h264"] = "h264";
    VideoTypes["h264_hi"] = "h264.hi";
    VideoTypes["webm"] = "webm";
    VideoTypes["webm-hi"] = "webm.hi";
    VideoTypes["ogg"] = "ogg";
    VideoTypes["ogg-hi"] = "ogg.hi";
    VideoTypes["hls-variant"] = "hls.variant";
    VideoTypes["mp3"] = "mp3";
    VideoTypes["oga"] = "oga";
    VideoTypes["m4a"] = "m4a";
    VideoTypes["aac"] = "aac";
    VideoTypes["hls"] = "hls.variant.audio";
})(VideoTypes = exports.VideoTypes || (exports.VideoTypes = {}));
var URLScreenshotAgent;
(function (URLScreenshotAgent) {
    URLScreenshotAgent["desktop"] = "desktop";
    URLScreenshotAgent["mobile"] = "mobile";
})(URLScreenshotAgent = exports.URLScreenshotAgent || (exports.URLScreenshotAgent = {}));
var URLScreenshotMode;
(function (URLScreenshotMode) {
    URLScreenshotMode["all"] = "all";
    URLScreenshotMode["window"] = "window";
})(URLScreenshotMode = exports.URLScreenshotMode || (exports.URLScreenshotMode = {}));
var URLScreenshotOrientation;
(function (URLScreenshotOrientation) {
    URLScreenshotOrientation["portrait"] = "portrait";
    URLScreenshotOrientation["landscape"] = "landscape";
})(URLScreenshotOrientation = exports.URLScreenshotOrientation || (exports.URLScreenshotOrientation = {}));
/**
 * Video storage location
 */
var Locations;
(function (Locations) {
    Locations["s3"] = "s3";
    Locations["azure"] = "azure";
    Locations["gcs"] = "gcs";
    Locations["rackspace"] = "rackspace";
    Locations["dropbox"] = "dropbox";
})(Locations = exports.Locations || (exports.Locations = {}));
var VideoAccess;
(function (VideoAccess) {
    VideoAccess["private"] = "private";
    VideoAccess["public"] = "public";
})(VideoAccess = exports.VideoAccess || (exports.VideoAccess = {}));
var VideoAccessMode;
(function (VideoAccessMode) {
    VideoAccessMode["preserve"] = "preserve";
    VideoAccessMode["constrain"] = "constrain";
    VideoAccessMode["letterbox"] = "letterbox";
    VideoAccessMode["pad"] = "pad";
    VideoAccessMode["crop"] = "crop";
})(VideoAccessMode = exports.VideoAccessMode || (exports.VideoAccessMode = {}));
var EnhancePreset;
(function (EnhancePreset) {
    EnhancePreset["auto"] = "auto";
    EnhancePreset["vivid"] = "vivid";
    EnhancePreset["beautify"] = "beautify";
    EnhancePreset["beautifyPlus"] = "beautify_plus";
    EnhancePreset["fixDark"] = "fix_dark";
    EnhancePreset["fixNoise"] = "fix_noise";
    EnhancePreset["fixTint"] = "fix_tint";
    EnhancePreset["outdor"] = "outdoor";
    EnhancePreset["fireworks"] = "fireworks";
})(EnhancePreset = exports.EnhancePreset || (exports.EnhancePreset = {}));
var handleRegexp = /^[\w\-]{20}$/;
/**
 * Class for handling filelinks. For now its supports all filestack transforms.
 * It outputs transform url or array of transforms
 * @example
 * const link = new Filelink('handle or externalUrl', 'apikey');
 * link.flip().flop().store();
 *
 * console.log(link.toString());
 * // enable base64 support
 * link.setBase64(true)
 *
 * console.log(link.toString());
 *
 * @export
 * @class Filelink
 */
var Filelink = /** @class */ (function () {
    /**
     * Class for generating tranformation urls
     * @param {(string | string[])} source - handle or multiple handles (i.e. for collage)
     * @param {string} [apikey] - your apikey - required for all external sources
     *
     * @memberof Filelink
     */
    function Filelink(source, apikey) {
        /**
         * Applied transforms array
         *
         * @private
         * @memberof Filelink
         */
        this.transforms = [];
        /**
         * Is base64 support is enabled
         *
         * @private
         * @type {boolean}
         * @memberof Filelink
         */
        this.b64 = false;
        /**
         * should use a validator to check params of every task
         * @private
         * @type {boolean}
         * @memberof Filelink
         */
        this.useValidator = true;
        /**
         * Converts array of objects to object
         *
         * @private
         * @example [{name: 'resize', params: {height: 125}}] => {resize: {height: 125}}
         * @param arr - any array
         */
        this.arrayToObject = function (array, nameKey, dataKey) {
            if (array === void 0) { array = []; }
            return array.reduce(function (obj, item) {
                obj[item[nameKey]] = item[dataKey];
                return obj;
            }, {});
        };
        this.apikey = apikey;
        this.setSource(source);
    }
    /**
     * Enable new base64 link support to avoid problems with special chars in link
     *
     * @param {boolean} flag
     * @returns
     * @memberof Filelink
     */
    Filelink.prototype.setBase64 = function (flag) {
        this.b64 = flag;
        return this;
    };
    /**
     * Switch the useValidator flag
     *
     * @param {boolean} flag
     * @returns
     * @memberof Filelink
     */
    Filelink.prototype.setUseValidator = function (flag) {
        this.useValidator = flag;
        return this;
    };
    /**
     * Set cname for transformation link
     *
     * @param {string} cname
     * @returns
     * @memberof Filelink
     */
    Filelink.prototype.setCname = function (cname) {
        this.cname = cname;
        return this;
    };
    /**
     * Set custom domain. Used for test purpose. It will be removed when after client.transform
     *
     * @param {string} domain
     * @returns
     * @memberof Filelink
     */
    Filelink.prototype.setCustomDomain = function (domain) {
        this.customDomain = domain;
        return this;
    };
    Filelink.prototype.setSource = function (source) {
        this.source = source;
        var isExternal = this.isSourceExternal();
        debug("Source " + source + " - isExternal? " + isExternal);
        if (isExternal && !this.apikey) {
            throw new filestack_error_1.FilestackError('External sources requires apikey to handle transforms');
        }
        if (!isExternal && typeof this.source === 'string' && (!handleRegexp.test(this.source) && this.source.indexOf('filestackcontent') === -1)) {
            throw new filestack_error_1.FilestackError('Invalid filestack source provided');
        }
    };
    /**
     * Returns JSONSchema form transformations params
     *
     * @returns
     * @memberof Filelink
     */
    Filelink.prototype.getValidationSchema = function () {
        return transforms_schema_1.TransformSchema;
    };
    /**
     * Returns transformations in JSON format
     *
     * @returns
     * @memberof Filelink
     */
    Filelink.prototype.getTransformations = function () {
        if (this.useValidator) {
            this.validateTasks(this.transforms);
        }
        return this.transforms;
    };
    /**
     * Returns transform url
     *
     * @returns
     * @memberof Filelink
     */
    Filelink.prototype.toString = function () {
        var returnUrl = [];
        returnUrl.push(this.getCdnHost());
        if (this.useValidator) {
            this.validateTasks(this.transforms);
        }
        if (this.apikey) {
            returnUrl.push(this.apikey);
        }
        var transformsString = this.generateTransformString();
        var source = this.source;
        if (this.b64) {
            if (this.transforms.length > 0) {
                transformsString = "b64/" + utils_1.b64(JSON.stringify(this.transforms), true);
            }
            if (Array.isArray(source)) {
                source = this.arrayToString(source);
            }
            source = "b64://" + utils_1.b64(source, true);
        }
        else {
            if (Array.isArray(source)) {
                source = this.arrayToString(source);
            }
            else {
                source = this.escapeValue(source);
            }
        }
        if (transformsString.length) {
            returnUrl.push(transformsString);
        }
        returnUrl.push(source);
        return returnUrl.join('/');
    };
    /**
     * Add task and validate
     *
     * @param {string} name
     * @param {*} [params]
     * @returns
     * @memberof Filelink
     */
    Filelink.prototype.addTask = function (name, params) {
        debug_1.default("Add task  " + name + " with params %O", params);
        if (name !== 'cache' && typeof params === 'boolean') {
            if (!params) {
                return this;
            }
            else {
                params = undefined;
            }
        }
        else if (typeof params === 'object' && !Object.keys(params).length) {
            params = undefined;
        }
        this.transforms.push({ name: name, params: params });
        return this;
    };
    /**
     * Cleanup transformations on filelink
     *
     * @returns
     * @memberof Filelink
     */
    Filelink.prototype.reset = function () {
        this.transforms = [];
        return this;
    };
    /**
     * Transformations part
     */
    /**
     * Add autoimage transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#auto-image-conversion
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.autoImage = function () {
        return this.addTask('auto_image', true);
    };
    /**
     * Adds flip transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#flip
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.flip = function () {
        return this.addTask('flip', true);
    };
    /**
     * Adds flop transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#flop
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.flop = function () {
        return this.addTask('flop', true);
    };
    /**
     * Adds enhance transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#enhance
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.enhance = function (params) {
        return this.addTask('enhance', params || true);
    };
    /**
     * Add security to link
     *
     * @see https://www.filestack.com/docs/api/processing/#redeye
     * @returns
     * @memberof Filelink
     */
    Filelink.prototype.redeye = function () {
        return this.addTask('redeye', true);
    };
    /**
     * Add monochrome transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#monochrome
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.monochrome = function () {
        return this.addTask('monochrome', true);
    };
    /**
     * Add compress transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#compress
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.compress = function (params) {
        return this.addTask('compress', params || true);
    };
    /**
     * Adds negative transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#negative
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.negative = function () {
        return this.addTask('negative', true);
    };
    /**
     * Adds tags transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#tags
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.tags = function () {
        return this.addTask('tags', true);
    };
    /**
     * Adds sfw transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#sfw
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.sfw = function () {
        return this.addTask('sfw', true);
    };
    /**
     * Add animate transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#animate-images-to-gif
     * @param params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.animate = function (params) {
        return this.addTask('animate', params);
    };
    /**
     * Adds store transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#store
     * @param {(StoreParams | boolean)} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.store = function (params) {
        return this.addTask('store', params);
    };
    /**
     * Adds cache transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#cache
     * @param {(CacheParams | boolean)} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.cache = function (params) {
        return this.addTask('cache', params);
    };
    /**
     * Adds resize transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#resize
     * @param {ResizeParams} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.resize = function (params) {
        return this.addTask('resize', params);
    };
    /**
     * Adds crop transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#crop
     * @param {CropParams} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.crop = function (params) {
        return this.addTask('crop', params);
    };
    /**
     * Adds rotate transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#rotate
     * @param {RotateParams} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.rotate = function (params) {
        return this.addTask('rotate', params);
    };
    /**
     * Adds detect_faces transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#facial-detection
     * @param {(DetectFacesParams | boolean)} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.detectFaces = function (params) {
        return this.addTask('detect_faces', params);
    };
    /**
     * Adds crop faces transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#crop-faces
     * @param {CropFacesParams} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.cropFaces = function (params) {
        return this.addTask('crop_faces', params);
    };
    /**
     * Adds pixelate faces transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#pixelate-faces
     * @param {PixelateFacesParams} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.pixelateFaces = function (params) {
        return this.addTask('pixelate_faces', params);
    };
    /**
     * Adds blur faces transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#blur-faces
     * @param {BlurFacesParams} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.blurFaces = function (params) {
        return this.addTask('blur_faces', params);
    };
    /**
     * Adds rounded corners transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#rounded-corners
     * @param {(RoundedCornersParams | boolean)} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.roundedCorners = function (params) {
        return this.addTask('rounded_corners', params);
    };
    /**
     * Adds polaroid transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#polaroid
     * @param {(PolaroidParams | boolean)} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.polaroid = function (params) {
        return this.addTask('polaroid', params);
    };
    /**
     * Adds vignette transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#vignette
     * @param {(VignetteParams | boolean)} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.vignette = function (params) {
        return this.addTask('vignette', params);
    };
    /**
     * Adds torn edges transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#torn-edges
     * @param {(TornEdgesParams | boolean)} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.tornEdges = function (params) {
        return this.addTask('torn_edges', params);
    };
    /**
     * Adds shadow transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#shadow
     * @param {(ShadowParams | boolean)} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.shadow = function (params) {
        return this.addTask('shadow', params);
    };
    /**
     * Adds circle transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#circle
     * @param {(CircleParams | boolean)} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.circle = function (params) {
        return this.addTask('circle', params);
    };
    /**
     * Adds border transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#border
     * @param {(BorderParams | boolean)} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.border = function (params) {
        return this.addTask('border', params);
    };
    /**
     * Adds sharpen transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#sharpen
     * @param {(SharpenParams | boolean)} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.sharpen = function (params) {
        return this.addTask('sharpen', params);
    };
    /**
     * Adds blur transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#blur
     * @param {(BlurParams | boolean)} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.blur = function (params) {
        return this.addTask('blur', params);
    };
    /**
     * Adds blackwhite transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#blackwhite
     * @param {(BlackwhiteParams | boolean)} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.blackwhite = function (params) {
        return this.addTask('blackwhite', params);
    };
    /**
     * Adds sepia transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#sepia
     * @param {(SepiaParams | boolean)} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.sepia = function (params) {
        return this.addTask('sepia', params);
    };
    /**
     * Adds pixelate transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#pixelate
     * @param {(PixelateParams | boolean)} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.pixelate = function (params) {
        return this.addTask('pixelate', params);
    };
    /**
     * Adds oilpaint transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#oil-paint
     * @param {(OilPaintParams | boolean)} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.oilPaint = function (params) {
        return this.addTask('oil_paint', params);
    };
    /**
     * Adds modulate transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#modulate
     * @param {(ModulateParams | boolean)} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.modulate = function (params) {
        return this.addTask('modulate', params);
    };
    /**
     * Adds partial pixelate transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#partial-pixelate
     * @param {PartialPixelateParams} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.partialPixelate = function (params) {
        return this.addTask('partial_pixelate', params);
    };
    /**
     * Adds partial blur transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#partial-blur
     * @param {PartialBlurParams} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.partialBlur = function (params) {
        return this.addTask('partial_blur', params);
    };
    /**
     * Adds collage transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#collage
     * @param {CollageParams} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.collage = function (params) {
        return this.addTask('collage', params);
    };
    /**
     * Adds upscale transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#upscale
     * @param {(UpscaleParams | boolean)} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.upscale = function (params) {
        return this.addTask('upscale', params);
    };
    /**
     * Adds ascii transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#ascii
     * @param {(AsciiParams | boolean)} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.ascii = function (params) {
        return this.addTask('ascii', params);
    };
    /**
     * Adds quality transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#quality
     * @param {QualityParams} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.quality = function (params) {
        return this.addTask('quality', params);
    };
    /**
     * Adds security transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#security
     * @param {SecurityParams} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.security = function (params) {
        return this.addTask('security', params);
    };
    /**
     * Adds output transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#output
     * @param {OutputParams} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.output = function (params) {
        return this.addTask('output', params);
    };
    /**
     * Adds video convert transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#video-convert
     * @param {VideoConvertParams} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.videoConvert = function (params) {
        return this.addTask('video_convert', params);
    };
    /**
     * Adds URLScreenshot transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#urlscreenshot
     * @param {(URLScreenshotParams | boolean)} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.URLScreenshot = function (params) {
        return this.addTask('urlscreenshot', params);
    };
    /**
     * Adds pdfinfo transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#pdfinfo
     * @param {(PdfInfoParams | boolean)} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.PDFInfo = function (params) {
        return this.addTask('pdfinfo', params);
    };
    /**
     * Adds pdfconvert transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#pdfconvert
     * @param {(PdfConvertParams | boolean)} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.PDFConvert = function (params) {
        return this.addTask('pdfconvert', params);
    };
    /**
     * Adds fallback transformation
     *
     * @see https://www.filestack.com/docs/api/processing/#fallback
     * @param {(FallbackParams)} params
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.fallback = function (params) {
        return this.addTask('fallback', params);
    };
    /**
     * Add zip transformation which create a zip package on files
     * used on actual context
     *
     * @see https://www.filestack.com/docs/api/processing/#zip
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.zip = function () {
        return this.addTask('zip', true);
    };
    /**
     * Add task which minify a css file
     *
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.minifyCss = function (params) {
        return this.addTask('minify_css', params);
    };
    /**
     * Add task which minify a javascript file.
     * For better handling of 'targets' param, use with b64 flag enabled.
     *
     * @returns this
     * @memberof Filelink
     */
    Filelink.prototype.minifyJs = function (params) {
        return this.addTask('minify_js', params);
    };
    /**
     * Checks if source is external
     *
     * @private
     * @returns {boolean}
     * @memberof Filelink
     */
    Filelink.prototype.isSourceExternal = function () {
        if (!this.source) {
            throw new filestack_error_1.FilestackError('Source not Set');
        }
        var toTest = Array.isArray(this.source) ? this.source : [this.source];
        for (var i in toTest) {
            /* istanbul ignore next */
            if (!toTest.hasOwnProperty(i)) {
                continue;
            }
            if (toTest[i].indexOf('src:') === 0 || (toTest[i].indexOf('http') === 0 && toTest[i].indexOf('filestackcontent') === -1)) {
                return true;
            }
        }
        return false;
    };
    /**
     * Validate every task against schema
     *
     * @private
     * @param {object[]} transformations - object which contain all transformations
     * @returns {void}
     * @memberof Filelink
     */
    Filelink.prototype.validateTasks = function (transformations) {
        var res = Filelink.validator(this.arrayToObject(transformations, 'name', 'params'));
        if (res.errors.length) {
            throw new filestack_error_1.FilestackError("Params validation error", res.errors, filestack_error_1.FilestackErrorType.VALIDATION);
        }
        return;
    };
    /**
     * Returns correct cdn url with cname support
     *
     * @private
     * @returns {string}
     * @memberof Filelink
     */
    Filelink.prototype.getCdnHost = function () {
        var urls = config_1.config.urls;
        if (this.customDomain) {
            urls.cdnUrl = this.customDomain;
        }
        urls = utils_1.resolveHost(urls, this.cname);
        return urls.cdnUrl;
    };
    /**
     * Returns applied transformations as string
     *
     * @private
     * @returns {string}
     * @memberof Filelink
     */
    Filelink.prototype.generateTransformString = function () {
        var _this = this;
        var transforms = [];
        this.transforms.forEach(function (el) {
            transforms.push(_this.optionToString(el.name, el.params));
        });
        return transforms.join('/');
    };
    /**
     * Flatten transformation option to string
     *
     * @private
     * @example {resize:{width: 100,height: 200}} => resize=width:100,height:200
     * @param key - option key
     * @param values - option params
     */
    Filelink.prototype.optionToString = function (key, values) {
        var _this = this;
        var optionsString = [];
        if (typeof values === 'undefined') {
            return key;
        }
        // if we just want to enable feature
        if (typeof values === 'boolean') {
            if (!values && key === 'cache') {
                return 'cache=false';
            }
            return key;
        }
        Object.keys(values).forEach(function (i) {
            if (Array.isArray(values[i])) {
                optionsString.push(i + ":" + _this.arrayToString(values[i]));
                return;
            }
            optionsString.push(i + ":" + _this.escapeValue(values[i]));
        });
        return key + "=" + optionsString.join(',');
    };
    /**
     * Escape params values
     *
     * @private
     * @param {string} value
     * @returns {string}
     * @memberof Filelink
     */
    Filelink.prototype.escapeValue = function (value) {
        if (typeof value !== 'string') {
            return value;
        }
        if (value.indexOf('/') > -1 || value.indexOf(',') > -1) {
            return "\"" + value + "\"";
        }
        return value;
    };
    /**
     * Converts nested arrays to string
     *
     * @private
     * @example [1,2, [2,3]] => "[1,2, [2,3]]"
     * @param arr - any array
     */
    Filelink.prototype.arrayToString = function (arr) {
        var _this = this;
        var toReturn = arr.map(function (el) {
            if (Array.isArray(el)) {
                return _this.arrayToString(el);
            }
            return _this.escapeValue(el);
        });
        return "[" + toReturn + "]";
    };
    /**
     * Validator instance
     *
     * @private
     * @memberof Filelink
     */
    Filelink.validator = validator_1.getValidator(transforms_schema_1.TransformSchema);
    return Filelink;
}());
exports.Filelink = Filelink;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
