"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/*
 * Copyright (c) 2018 by Filestack.
 * Some rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var security_1 = require("./lib/api/security");
exports.getSecurity = security_1.getSecurity;
exports.validateWebhookSignature = security_1.validateWebhookSignature;
var client_1 = require("./lib/client");
exports.Client = client_1.Client;
var picker_1 = require("./lib/picker");
exports.PickerDisplayMode = picker_1.PickerDisplayMode;
var transforms_schema_1 = require("./schema/transforms.schema");
exports.TransformSchema = transforms_schema_1.TransformSchema;
var filestack_error_1 = require("./filestack_error");
exports.FilestackError = filestack_error_1.FilestackError;
var index_1 = require("./lib/utils/index");
exports.getMimetype = index_1.getMimetype;
/**
 * Initialize client with given config
 *
 * @param apikey
 * @param options
 */
exports.init = function (apikey, options) {
    return new client_1.Client(apikey, options);
};
/**
 * filestack-js version. Interpolated at build time.
 */
exports.version = '3.12.4';
tslib_1.__exportStar(require("./lib/api/transform"), exports);
tslib_1.__exportStar(require("./lib/filelink"), exports);
tslib_1.__exportStar(require("./filestack_error"), exports);
tslib_1.__exportStar(require("./lib/request"), exports);
tslib_1.__exportStar(require("./lib/utils"), exports);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFDSCwrQ0FBb0g7QUFxQ2xILHNCQXJDd0Isc0JBQVcsQ0FxQ3hCO0FBQ1gsbUNBdENxQyxtQ0FBd0IsQ0FzQ3JDO0FBckMxQix1Q0FBK0Q7QUFxRDdELGlCQXJETyxlQUFNLENBcURQO0FBcERSLHVDQUE4STtBQXNENUksNEJBdERvRywwQkFBaUIsQ0FzRHBHO0FBckRuQixnRUFBNkQ7QUFnQzNELDBCQWhDTyxtQ0FBZSxDQWdDUDtBQXpCakIscURBQW1EO0FBNkNqRCx5QkE3Q08sZ0NBQWMsQ0E2Q1A7QUE1Q2hCLDJDQUFnRDtBQThDOUMsc0JBOUNPLG1CQUFXLENBOENQO0FBNUNiOzs7OztHQUtHO0FBQ1UsUUFBQSxJQUFJLEdBQUcsVUFBQyxNQUFjLEVBQUUsT0FBdUI7SUFDMUQsT0FBTyxJQUFJLGVBQU0sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDckMsQ0FBQyxDQUFDO0FBRUY7O0dBRUc7QUFDVSxRQUFBLE9BQU8sR0FBRyxZQUFZLENBQUM7QUFFcEMsOERBQW9DO0FBQ3BDLHlEQUErQjtBQUMvQiw0REFBa0M7QUFDbEMsd0RBQThCO0FBQzlCLHNEQUE0QiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTggYnkgRmlsZXN0YWNrLlxuICogU29tZSByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBTZWN1cml0eU9wdGlvbnMsIGdldFNlY3VyaXR5LCB2YWxpZGF0ZVdlYmhvb2tTaWduYXR1cmUsIFdlYmhvb2tWYWxpZGF0ZVBheWxvYWQgfSBmcm9tICcuL2xpYi9hcGkvc2VjdXJpdHknO1xuaW1wb3J0IHsgQ2xpZW50LCBDbGllbnRPcHRpb25zLCBTZWN1cml0eSB9IGZyb20gJy4vbGliL2NsaWVudCc7XG5pbXBvcnQgeyBQaWNrZXJPcHRpb25zLCBQaWNrZXJJbnN0YW5jZSwgUGlja2VyVXBsb2FkRG9uZUNhbGxiYWNrLCBQaWNrZXJGaWxlTWV0YWRhdGEsIFBpY2tlclJlc3BvbnNlLCBQaWNrZXJEaXNwbGF5TW9kZSB9IGZyb20gJy4vbGliL3BpY2tlcic7XG5pbXBvcnQgeyBUcmFuc2Zvcm1TY2hlbWEgfSBmcm9tICcuL3NjaGVtYS90cmFuc2Zvcm1zLnNjaGVtYSc7XG5pbXBvcnQgeyBUcmFuc2Zvcm1PcHRpb25zIH0gZnJvbSAnLi9saWIvYXBpL3RyYW5zZm9ybSc7XG5pbXBvcnQgeyBSZXRyaWV2ZU9wdGlvbnMsIE1ldGFkYXRhT3B0aW9ucyB9IGZyb20gJy4vbGliL2FwaS9maWxlJztcbmltcG9ydCB7IElucHV0RmlsZSB9IGZyb20gJy4vbGliL2FwaS91cGxvYWQvZmlsZV90b29scyc7XG5pbXBvcnQgeyBVcGxvYWRPcHRpb25zIH0gZnJvbSAnLi9saWIvYXBpL3VwbG9hZC90eXBlcyc7XG5pbXBvcnQgeyBTdG9yZVVwbG9hZE9wdGlvbnMgfSBmcm9tICcuL2xpYi9hcGkvdXBsb2FkJztcbmltcG9ydCB7IFByZXZpZXdPcHRpb25zIH0gZnJvbSAnLi9saWIvYXBpL3ByZXZpZXcnO1xuaW1wb3J0IHsgRmlsZXN0YWNrRXJyb3IgfSBmcm9tICcuL2ZpbGVzdGFja19lcnJvcic7XG5pbXBvcnQgeyBnZXRNaW1ldHlwZSB9IGZyb20gJy4vbGliL3V0aWxzL2luZGV4JztcblxuLyoqXG4gKiBJbml0aWFsaXplIGNsaWVudCB3aXRoIGdpdmVuIGNvbmZpZ1xuICpcbiAqIEBwYXJhbSBhcGlrZXlcbiAqIEBwYXJhbSBvcHRpb25zXG4gKi9cbmV4cG9ydCBjb25zdCBpbml0ID0gKGFwaWtleTogc3RyaW5nLCBvcHRpb25zPzogQ2xpZW50T3B0aW9ucyk6IENsaWVudCA9PiB7XG4gIHJldHVybiBuZXcgQ2xpZW50KGFwaWtleSwgb3B0aW9ucyk7XG59O1xuXG4vKipcbiAqIGZpbGVzdGFjay1qcyB2ZXJzaW9uLiBJbnRlcnBvbGF0ZWQgYXQgYnVpbGQgdGltZS5cbiAqL1xuZXhwb3J0IGNvbnN0IHZlcnNpb24gPSAnQHtWRVJTSU9OfSc7XG5cbmV4cG9ydCAqIGZyb20gJy4vbGliL2FwaS90cmFuc2Zvcm0nO1xuZXhwb3J0ICogZnJvbSAnLi9saWIvZmlsZWxpbmsnO1xuZXhwb3J0ICogZnJvbSAnLi9maWxlc3RhY2tfZXJyb3InO1xuZXhwb3J0ICogZnJvbSAnLi9saWIvcmVxdWVzdCc7XG5leHBvcnQgKiBmcm9tICcuL2xpYi91dGlscyc7XG5cbmV4cG9ydCB7XG4gIFRyYW5zZm9ybVNjaGVtYSxcbiAgU2VjdXJpdHlPcHRpb25zLFxuICBnZXRTZWN1cml0eSxcbiAgdmFsaWRhdGVXZWJob29rU2lnbmF0dXJlLFxuICBXZWJob29rVmFsaWRhdGVQYXlsb2FkLFxuICBDbGllbnRPcHRpb25zLFxuICBQaWNrZXJPcHRpb25zLFxuICBQaWNrZXJJbnN0YW5jZSxcbiAgU2VjdXJpdHksXG4gIFRyYW5zZm9ybU9wdGlvbnMsXG4gIFJldHJpZXZlT3B0aW9ucyxcbiAgSW5wdXRGaWxlLFxuICBVcGxvYWRPcHRpb25zLFxuICBTdG9yZVVwbG9hZE9wdGlvbnMsXG4gIE1ldGFkYXRhT3B0aW9ucyxcbiAgUHJldmlld09wdGlvbnMsXG4gIFBpY2tlclVwbG9hZERvbmVDYWxsYmFjayxcbiAgUGlja2VyRmlsZU1ldGFkYXRhLFxuICBQaWNrZXJSZXNwb25zZSxcbiAgQ2xpZW50LFxuICBGaWxlc3RhY2tFcnJvcixcbiAgUGlja2VyRGlzcGxheU1vZGUsXG4gIGdldE1pbWV0eXBlXG59O1xuIl19
