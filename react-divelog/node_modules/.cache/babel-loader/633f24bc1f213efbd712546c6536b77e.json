{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/divelog/react-divelog/src/components/googleMaps/GoogleMap.js\";\nimport React from 'react';\nimport '../../css/GoogleMap.css';\nimport { Map, Marker, GoogleApiWrapper, InfoWindow } from 'google-maps-react';\nimport GoogleModal from './GoogleModal';\nimport $ from 'jquery';\nimport { fakeAuth } from '../../util/fakeAuth';\n\nclass GoogleMap extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.showMarkers = () => {\n      return this.state.markers.map((marker, index) => {\n        return React.createElement(Marker, {\n          key: index,\n          position: {\n            lat: marker.latitude,\n            lng: marker.longitude\n          },\n          onClick: this.onMarkerClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        });\n      });\n    };\n\n    this.onMarkerClick = (props, marker, e) => {\n      this.setState({\n        selectedPlace: props,\n        activeMarker: marker,\n        showingInfoWindow: true\n      });\n    };\n\n    this.onClose = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    };\n\n    this.state = {\n      isLoading: true,\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n      markers: [],\n      isFinishMarker: false,\n      latitude: '',\n      longitude: '',\n      markerName: ''\n    };\n    this.onMapClick = this.onMapClick.bind(this);\n    this.setFinishMarker = this.setFinishMarker.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      isLoading: false\n    }); // this.setState({\n    //     markers: [\n    //         {name: 'Paryż', latitude: 48.887, longitude: 2.343 },\n    //         {name: 'Hubert Strumiński', latitude: 49.748, longitude: 20.731 },\n    //         {name: 'Berlin', latitude: 52.518, longitude: 13.373  }\n    //     ]\n    // })\n\n    fetch(\"/get/markers/\".concat(fakeAuth.userID), {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'content-type': 'application/json'\n      }\n    }).then(response => response.json()).then(jsonData => {\n      console.log(jsonData);\n      jsonData.map((marker, index) => {\n        let element = {\n          name: marker.name,\n          latitude: marker.latitude,\n          longitude: marker.longitude\n        };\n        this.state.markers.push(element);\n      });\n    });\n  }\n\n  onMapClick(t, map, coord) {\n    const latLng = coord.latLng;\n    const lat = latLng.lat();\n    const lng = latLng.lng();\n    this.setState({\n      latitude: lat,\n      longitude: lng\n    });\n    $(document).on('show.bs.modal', \"#modalCenter\", function (event) {\n      $('#name').trigger('focus');\n    });\n    $(\"#modalCenter\").modal('show');\n  }\n\n  setFinishMarker() {\n    this.setState({\n      isFinishMarker: true\n    });\n  }\n\n  render() {\n    const mapStyle = {\n      width: '100%',\n      height: '100%'\n    };\n    let loadingScreen = React.createElement(\"div\", {\n      class: \"d-flex justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"spinner-grow\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      class: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Loading...\")));\n    let map = React.createElement(\"div\", {\n      className: \"google-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"table-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(Map, {\n      google: this.props.google,\n      zoom: 5,\n      style: mapStyle,\n      initialCenter: {\n        lat: 50.087,\n        lng: 14.421\n      },\n      onClick: this.onMapClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, this.showMarkers(), React.createElement(InfoWindow, {\n      marker: this.state.activeMarker,\n      visible: this.state.showingInfoWindow,\n      onClose: this.onClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"alert alert-success\",\n      role: \"alert\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, this.state.selectedPlace.name)))), React.createElement(GoogleModal, {\n      latitude: this.state.latitude,\n      longitude: this.state.longitude,\n      setFinishMarker: this.setFinishMarker,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    })));\n    let content = this.state.isLoading ? loadingScreen : map;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, content);\n  }\n\n}\n\nexport default GoogleApiWrapper(props => ({\n  apiKey: 'AIzaSyBgb4kpatKEjsOGsxplxFyRfw1K_wGhLTo',\n  language: props.language\n}))(GoogleMap);","map":{"version":3,"sources":["/home/huber/Pulpit/divelog/react-divelog/src/components/googleMaps/GoogleMap.js"],"names":["React","Map","Marker","GoogleApiWrapper","InfoWindow","GoogleModal","$","fakeAuth","GoogleMap","Component","constructor","props","showMarkers","state","markers","map","marker","index","lat","latitude","lng","longitude","onMarkerClick","e","setState","selectedPlace","activeMarker","showingInfoWindow","onClose","isLoading","isFinishMarker","markerName","onMapClick","bind","setFinishMarker","componentDidMount","fetch","userID","method","headers","then","response","json","jsonData","console","log","element","name","push","t","coord","latLng","document","on","event","trigger","modal","render","mapStyle","width","height","loadingScreen","google","content","apiKey","language"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../css/GoogleMap.css';\nimport { Map, Marker, GoogleApiWrapper, InfoWindow } from 'google-maps-react';\nimport GoogleModal from './GoogleModal';\nimport $ from 'jquery';\nimport { fakeAuth } from '../../util/fakeAuth';\n\nclass GoogleMap extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isLoading: true,\n            showingInfoWindow: false,\n            activeMarker: {},\n            selectedPlace: {},\n            markers: [],\n            isFinishMarker: false,\n            latitude: '',\n            longitude: '',\n            markerName: ''\n        }\n        this.onMapClick = this.onMapClick.bind(this);\n        this.setFinishMarker = this.setFinishMarker.bind(this);\n    }\n\n    componentDidMount() {\n        this.setState({ isLoading: false });\n\n        // this.setState({\n        //     markers: [\n        //         {name: 'Paryż', latitude: 48.887, longitude: 2.343 },\n        //         {name: 'Hubert Strumiński', latitude: 49.748, longitude: 20.731 },\n        //         {name: 'Berlin', latitude: 52.518, longitude: 13.373  }\n        //     ]\n        // })\n\n        fetch(`/get/markers/${fakeAuth.userID}`, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'content-type': 'application/json'\n            }\n        })\n        .then(response => response.json())\n        .then(jsonData => {\n            console.log(jsonData);\n            jsonData.map((marker, index) => {\n                let element = {\n                    name: marker.name,\n                    latitude: marker.latitude,\n                    longitude: marker.longitude\n                }\n                this.state.markers.push(element);\n            })\n        }); \n    }\n\n    showMarkers = () => {\n        return this.state.markers.map((marker, index) => {\n            return (\n                <Marker \n                    key={index} \n                    position={{ lat: marker.latitude, lng: marker.longitude }}\n                    onClick={this.onMarkerClick}\n                />\n            );\n        })\n    }\n\n    onMarkerClick = (props, marker, e) => {\n        this.setState({\n            selectedPlace: props,\n            activeMarker: marker,\n            showingInfoWindow: true\n        });\n    }\n\n    onClose = props => {\n        if(this.state.showingInfoWindow) {\n            this.setState({\n                showingInfoWindow: false,\n                activeMarker: null\n            });\n        }\n    };\n\n    onMapClick(t, map, coord) {\n        const { latLng } = coord;\n        const lat = latLng.lat();\n        const lng = latLng.lng();\n\n        this.setState({ \n            latitude: lat,\n            longitude: lng\n        });\n\n        $(document).on('show.bs.modal', \"#modalCenter\", function (event) {\n            $('#name').trigger('focus');\n        });\n        $(\"#modalCenter\").modal('show');\n    }\n\n    setFinishMarker() {\n        this.setState({ isFinishMarker: true });\n    }\n\n    render() {\n        const mapStyle = {\n            width: '100%',\n            height: '100%',\n        }\n\n        let loadingScreen = (\n            <div class=\"d-flex justify-content-center\">\n                <div class=\"spinner-grow\" role=\"status\">\n                    <span class=\"sr-only\">Loading...</span>\n                </div>\n            </div>\n        )\n\n        let map = (\n            <div className=\"google-container\">\n                <div className=\"table-container\">\n\n                </div>\n                <div>\n                    <Map\n                        google={this.props.google}\n                        zoom={5}\n                        style={mapStyle}\n                        initialCenter={{ lat: 50.087, lng: 14.421}}\n                        onClick={this.onMapClick}\n                    >\n                        { this.showMarkers() }\n                        <InfoWindow\n                            marker={this.state.activeMarker}\n                            visible={this.state.showingInfoWindow}\n                            onClose={this.onClose}\n                        >\n                        <div className=\"alert alert-success\" role=\"alert\">\n                            <h4>{this.state.selectedPlace.name}</h4>\n                        </div>\n                        </InfoWindow>\n                    </Map>\n                    <GoogleModal \n                        latitude={this.state.latitude}\n                        longitude={this.state.longitude}\n                        setFinishMarker={this.setFinishMarker}\n                    />\n                </div>\n            </div>\n            \n        )\n        let content = this.state.isLoading ? loadingScreen : map;\n\n        return (\n            <div>\n                { content }\n            </div>\n        );\n    }\n}\n\nexport default GoogleApiWrapper(\n    (props) => ({\n      apiKey: 'AIzaSyBgb4kpatKEjsOGsxplxFyRfw1K_wGhLTo',\n      language: props.language,\n    }\n  ))(GoogleMap);"]},"metadata":{},"sourceType":"module"}