{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/divelog/react-divelog/src/components/forum/TopTopics.js\";\nimport React from 'react';\nimport Topic from './Topic';\nimport ConvertTime from '../../util/ConvertTime';\n\nclass TopTopics extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      topEnglishTopics: [],\n      topPolishTopics: [],\n      topGermanyTopics: [],\n      isPolishFive: false,\n      isGermanyFive: false,\n      isEnglishFive: false\n    };\n    this.ConvertTime = new ConvertTime();\n    this.generateTopPolishTopics = this.generateTopPolishTopics.bind(this);\n    this.generateTopGermanyTopics = this.generateTopGermanyTopics.bind(this);\n    this.generateTopEnglishTopics = this.generateTopEnglishTopics.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"/get/top/topics/all\", {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'content-type': 'application/json'\n      }\n    }).then(response => response.json()).then(jsonData => {\n      let countTopPolish = 0;\n      let countTopGermany = 0;\n      let countTopEnglish = 0;\n      console.log(jsonData);\n      jsonData.map((topic, index) => {\n        if (topic.languageForum === 'polish') {\n          let time = this.ConvertTime.convertTime(topic.createdAt, null, false);\n          const element = {\n            id: topic.id,\n            title: topic.title,\n            createdAt: time[0],\n            owner: topic.user.name,\n            countTopPolish: countTopPolish\n          };\n          this.setState({\n            topPolishTopics: this.state.topPolishTopics.concat(element)\n          });\n          countTopPolish++;\n        }\n\n        if (topic.languageForum === 'english') {\n          let time = this.ConvertTime.convertTime(topic.createdAt, null, false);\n          const element = {\n            id: topic.id,\n            title: topic.title,\n            createdAt: time[0],\n            owner: topic.user.name,\n            countTopEnglish: countTopEnglish\n          };\n          this.setState({\n            topEnglishTopics: this.state.topEnglishTopics.concat(element)\n          });\n          countTopEnglish++;\n        }\n\n        if (topic.languageForum === 'germany') {\n          let time = this.ConvertTime.convertTime(topic.createdAt, null, false);\n          const element = {\n            id: topic.id,\n            title: topic.title,\n            createdAt: time[0],\n            owner: topic.user.name,\n            countTopGermany: countTopGermany\n          };\n          this.setState({\n            topGermanyTopics: this.state.topGermanyTopics.concat(element)\n          });\n          countTopGermany++;\n        }\n      });\n    });\n  }\n\n  generateTopPolishTopics() {\n    if (this.state.topPolishTopics.length < 5) {\n      this.setState({\n        isPolishFive: true\n      });\n      return;\n    }\n\n    return this.state.topPolishTopics.map((topic, index) => {\n      return React.createElement(Topic, {\n        key: index,\n        id: topic.id,\n        owner: topic.owner,\n        title: topic.title,\n        createdAt: topic.createdAt,\n        languageForum: this.props.selectedForum,\n        count: topic.countTopPolish,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      });\n    });\n  }\n\n  generateTopEnglishTopics() {\n    if (this.state.topEnglishTopics.length < 5) {\n      this.setState({\n        isEnglishFive: true\n      });\n      return;\n    }\n\n    return this.state.topEnglishTopics.map((topic, index) => {\n      return React.createElement(Topic, {\n        key: index,\n        id: topic.id,\n        owner: topic.owner,\n        title: topic.title,\n        createdAt: topic.createdAt,\n        languageForum: this.props.selectedForum,\n        count: topic.countTopEnglish,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      });\n    });\n  }\n\n  generateTopGermanyTopics() {\n    if (this.state.topGermanyTopics.length < 5) {\n      this.setState({\n        isGermanyFive: true\n      });\n      return;\n    }\n\n    return this.state.topGermanyTopics.map((topic, index) => {\n      return React.createElement(Topic, {\n        key: index,\n        id: topic.id,\n        owner: topic.owner,\n        title: topic.title,\n        createdAt: topic.createdAt,\n        languageForum: this.props.selectedForum,\n        count: topic.countTopGermany,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      });\n    });\n  }\n\n  render() {\n    let isGermanyFive = this.state.isGermanyFive;\n    let isPolishFive = this.state.isPolishFive;\n    let isEnglishFive = this.state.isEnglishFive;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, isPolishFive && this.generateTopPolishTopics(), isGermanyFive && this.generateTopGermanyTopics(), isEnglishFive && this.generateTopEnglishTopics());\n  }\n\n}\n\nexport default TopTopics;","map":{"version":3,"sources":["/home/huber/Pulpit/divelog/react-divelog/src/components/forum/TopTopics.js"],"names":["React","Topic","ConvertTime","TopTopics","Component","constructor","props","state","topEnglishTopics","topPolishTopics","topGermanyTopics","isPolishFive","isGermanyFive","isEnglishFive","generateTopPolishTopics","bind","generateTopGermanyTopics","generateTopEnglishTopics","componentDidMount","fetch","method","headers","then","response","json","jsonData","countTopPolish","countTopGermany","countTopEnglish","console","log","map","topic","index","languageForum","time","convertTime","createdAt","element","id","title","owner","user","name","setState","concat","length","selectedForum","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;;AAEA,MAAMC,SAAN,SAAwBH,KAAK,CAACI,SAA9B,CAAwC;AACpCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,gBAAgB,EAAE,EADT;AAETC,MAAAA,eAAe,EAAE,EAFR;AAGTC,MAAAA,gBAAgB,EAAE,EAHT;AAITC,MAAAA,YAAY,EAAE,KAJL;AAKTC,MAAAA,aAAa,EAAE,KALN;AAMTC,MAAAA,aAAa,EAAE;AANN,KAAb;AAQA,SAAKX,WAAL,GAAmB,IAAIA,WAAJ,EAAnB;AAEA,SAAKY,uBAAL,GAA+B,KAAKA,uBAAL,CAA6BC,IAA7B,CAAkC,IAAlC,CAA/B;AACA,SAAKC,wBAAL,GAAgC,KAAKA,wBAAL,CAA8BD,IAA9B,CAAmC,IAAnC,CAAhC;AACA,SAAKE,wBAAL,GAAgC,KAAKA,wBAAL,CAA8BF,IAA9B,CAAmC,IAAnC,CAAhC;AACH;;AAEDG,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,KAAK,CAAC,qBAAD,EAAwB;AACzBC,MAAAA,MAAM,EAAE,KADiB;AAEzBC,MAAAA,OAAO,EAAE;AACL,kBAAU,mCADL;AAEL,wBAAgB;AAFX;AAFgB,KAAxB,CAAL,CAMGC,IANH,CAMQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANpB,EAOCF,IAPD,CAOMG,QAAQ,IAAI;AACd,UAAIC,cAAc,GAAG,CAArB;AACA,UAAIC,eAAe,GAAG,CAAtB;AACA,UAAIC,eAAe,GAAG,CAAtB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AACAA,MAAAA,QAAQ,CAACM,GAAT,CAAa,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC3B,YAAGD,KAAK,CAACE,aAAN,KAAwB,QAA3B,EAAqC;AACjC,cAAIC,IAAI,GAAG,KAAKjC,WAAL,CAAiBkC,WAAjB,CAA6BJ,KAAK,CAACK,SAAnC,EAA8C,IAA9C,EAAoD,KAApD,CAAX;AAEA,gBAAMC,OAAO,GAAG;AACZC,YAAAA,EAAE,EAAEP,KAAK,CAACO,EADE;AAEZC,YAAAA,KAAK,EAAER,KAAK,CAACQ,KAFD;AAGZH,YAAAA,SAAS,EAAEF,IAAI,CAAC,CAAD,CAHH;AAIZM,YAAAA,KAAK,EAAET,KAAK,CAACU,IAAN,CAAWC,IAJN;AAKZjB,YAAAA,cAAc,EAAEA;AALJ,WAAhB;AAOA,eAAKkB,QAAL,CAAc;AAAEnC,YAAAA,eAAe,EAAE,KAAKF,KAAL,CAAWE,eAAX,CAA2BoC,MAA3B,CAAkCP,OAAlC;AAAnB,WAAd;AACAZ,UAAAA,cAAc;AACjB;;AAED,YAAGM,KAAK,CAACE,aAAN,KAAwB,SAA3B,EAAsC;AAClC,cAAIC,IAAI,GAAG,KAAKjC,WAAL,CAAiBkC,WAAjB,CAA6BJ,KAAK,CAACK,SAAnC,EAA8C,IAA9C,EAAoD,KAApD,CAAX;AAEA,gBAAMC,OAAO,GAAG;AACZC,YAAAA,EAAE,EAAEP,KAAK,CAACO,EADE;AAEZC,YAAAA,KAAK,EAAER,KAAK,CAACQ,KAFD;AAGZH,YAAAA,SAAS,EAAEF,IAAI,CAAC,CAAD,CAHH;AAIZM,YAAAA,KAAK,EAAET,KAAK,CAACU,IAAN,CAAWC,IAJN;AAKZf,YAAAA,eAAe,EAAEA;AALL,WAAhB;AAOA,eAAKgB,QAAL,CAAc;AAAEpC,YAAAA,gBAAgB,EAAE,KAAKD,KAAL,CAAWC,gBAAX,CAA4BqC,MAA5B,CAAmCP,OAAnC;AAApB,WAAd;AACAV,UAAAA,eAAe;AAClB;;AAED,YAAGI,KAAK,CAACE,aAAN,KAAwB,SAA3B,EAAsC;AAClC,cAAIC,IAAI,GAAG,KAAKjC,WAAL,CAAiBkC,WAAjB,CAA6BJ,KAAK,CAACK,SAAnC,EAA8C,IAA9C,EAAoD,KAApD,CAAX;AAEA,gBAAMC,OAAO,GAAG;AACZC,YAAAA,EAAE,EAAEP,KAAK,CAACO,EADE;AAEZC,YAAAA,KAAK,EAAER,KAAK,CAACQ,KAFD;AAGZH,YAAAA,SAAS,EAAEF,IAAI,CAAC,CAAD,CAHH;AAIZM,YAAAA,KAAK,EAAET,KAAK,CAACU,IAAN,CAAWC,IAJN;AAKZhB,YAAAA,eAAe,EAAEA;AALL,WAAhB;AAOA,eAAKiB,QAAL,CAAc;AAAElC,YAAAA,gBAAgB,EAAE,KAAKH,KAAL,CAAWG,gBAAX,CAA4BmC,MAA5B,CAAmCP,OAAnC;AAApB,WAAd;AACAX,UAAAA,eAAe;AAClB;AACJ,OA1CD;AA2CH,KAvDD;AAwDH;;AAEDb,EAAAA,uBAAuB,GAAG;AACtB,QAAG,KAAKP,KAAL,CAAWE,eAAX,CAA2BqC,MAA3B,GAAoC,CAAvC,EAA0C;AACtC,WAAKF,QAAL,CAAc;AAAEjC,QAAAA,YAAY,EAAE;AAAhB,OAAd;AACA;AACH;;AACD,WAAO,KAAKJ,KAAL,CAAWE,eAAX,CAA2BsB,GAA3B,CAA+B,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACpD,aACG,oBAAC,KAAD;AACI,QAAA,GAAG,EAAEA,KADT;AAEI,QAAA,EAAE,EAAED,KAAK,CAACO,EAFd;AAGI,QAAA,KAAK,EAAEP,KAAK,CAACS,KAHjB;AAII,QAAA,KAAK,EAAET,KAAK,CAACQ,KAJjB;AAKI,QAAA,SAAS,EAAER,KAAK,CAACK,SALrB;AAMI,QAAA,aAAa,EAAE,KAAK/B,KAAL,CAAWyC,aAN9B;AAOI,QAAA,KAAK,EAAEf,KAAK,CAACN,cAPjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADH;AAWJ,KAZO,CAAP;AAaH;;AAEDT,EAAAA,wBAAwB,GAAG;AACvB,QAAG,KAAKV,KAAL,CAAWC,gBAAX,CAA4BsC,MAA5B,GAAqC,CAAxC,EAA2C;AACvC,WAAKF,QAAL,CAAc;AAAE/B,QAAAA,aAAa,EAAE;AAAjB,OAAd;AACA;AACH;;AACD,WAAO,KAAKN,KAAL,CAAWC,gBAAX,CAA4BuB,GAA5B,CAAgC,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACrD,aACG,oBAAC,KAAD;AACI,QAAA,GAAG,EAAEA,KADT;AAEI,QAAA,EAAE,EAAED,KAAK,CAACO,EAFd;AAGI,QAAA,KAAK,EAAEP,KAAK,CAACS,KAHjB;AAII,QAAA,KAAK,EAAET,KAAK,CAACQ,KAJjB;AAKI,QAAA,SAAS,EAAER,KAAK,CAACK,SALrB;AAMI,QAAA,aAAa,EAAE,KAAK/B,KAAL,CAAWyC,aAN9B;AAOI,QAAA,KAAK,EAAEf,KAAK,CAACJ,eAPjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADH;AAWJ,KAZO,CAAP;AAaH;;AAEDZ,EAAAA,wBAAwB,GAAG;AACvB,QAAG,KAAKT,KAAL,CAAWG,gBAAX,CAA4BoC,MAA5B,GAAqC,CAAxC,EAA2C;AACvC,WAAKF,QAAL,CAAc;AAAEhC,QAAAA,aAAa,EAAE;AAAjB,OAAd;AACA;AACH;;AACD,WAAO,KAAKL,KAAL,CAAWG,gBAAX,CAA4BqB,GAA5B,CAAgC,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACrD,aACG,oBAAC,KAAD;AACI,QAAA,GAAG,EAAEA,KADT;AAEI,QAAA,EAAE,EAAED,KAAK,CAACO,EAFd;AAGI,QAAA,KAAK,EAAEP,KAAK,CAACS,KAHjB;AAII,QAAA,KAAK,EAAET,KAAK,CAACQ,KAJjB;AAKI,QAAA,SAAS,EAAER,KAAK,CAACK,SALrB;AAMI,QAAA,aAAa,EAAE,KAAK/B,KAAL,CAAWyC,aAN9B;AAOI,QAAA,KAAK,EAAEf,KAAK,CAACL,eAPjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADH;AAWJ,KAZO,CAAP;AAaH;;AAEDqB,EAAAA,MAAM,GAAG;AACL,QAAIpC,aAAa,GAAG,KAAKL,KAAL,CAAWK,aAA/B;AACA,QAAID,YAAY,GAAG,KAAKJ,KAAL,CAAWI,YAA9B;AACA,QAAIE,aAAa,GAAG,KAAKN,KAAL,CAAWM,aAA/B;AAEA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACMF,YAAY,IAAI,KAAKG,uBAAL,EADtB,EAEMF,aAAa,IAAI,KAAKI,wBAAL,EAFvB,EAGMH,aAAa,IAAI,KAAKI,wBAAL,EAHvB,CADJ;AAOH;;AAtJmC;;AAyJxC,eAAed,SAAf","sourcesContent":["import React from 'react';\nimport Topic from './Topic';\nimport ConvertTime from '../../util/ConvertTime';\n\nclass TopTopics extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            topEnglishTopics: [],\n            topPolishTopics: [],\n            topGermanyTopics: [],\n            isPolishFive: false,\n            isGermanyFive: false,\n            isEnglishFive: false\n        }\n        this.ConvertTime = new ConvertTime();\n\n        this.generateTopPolishTopics = this.generateTopPolishTopics.bind(this);\n        this.generateTopGermanyTopics = this.generateTopGermanyTopics.bind(this);\n        this.generateTopEnglishTopics = this.generateTopEnglishTopics.bind(this);\n    }\n\n    componentDidMount() {\n        fetch(\"/get/top/topics/all\", {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'content-type': 'application/json'\n            }\n        }).then(response => response.json())\n        .then(jsonData => {\n            let countTopPolish = 0;\n            let countTopGermany = 0;\n            let countTopEnglish = 0;\n            console.log(jsonData);\n            jsonData.map((topic, index) => {\n                if(topic.languageForum === 'polish') {\n                    let time = this.ConvertTime.convertTime(topic.createdAt, null, false);\n\n                    const element = {\n                        id: topic.id,\n                        title: topic.title,\n                        createdAt: time[0],\n                        owner: topic.user.name,\n                        countTopPolish: countTopPolish\n                    }\n                    this.setState({ topPolishTopics: this.state.topPolishTopics.concat(element) });\n                    countTopPolish++\n                }\n\n                if(topic.languageForum === 'english') {\n                    let time = this.ConvertTime.convertTime(topic.createdAt, null, false);\n\n                    const element = {\n                        id: topic.id,\n                        title: topic.title,\n                        createdAt: time[0],\n                        owner: topic.user.name,\n                        countTopEnglish: countTopEnglish\n                    }\n                    this.setState({ topEnglishTopics: this.state.topEnglishTopics.concat(element) });\n                    countTopEnglish++\n                }\n\n                if(topic.languageForum === 'germany') {\n                    let time = this.ConvertTime.convertTime(topic.createdAt, null, false);\n\n                    const element = {\n                        id: topic.id,\n                        title: topic.title,\n                        createdAt: time[0],\n                        owner: topic.user.name,\n                        countTopGermany: countTopGermany\n                    }\n                    this.setState({ topGermanyTopics: this.state.topGermanyTopics.concat(element) });\n                    countTopGermany++\n                }\n            });\n        });\n    }\n\n    generateTopPolishTopics() {\n        if(this.state.topPolishTopics.length < 5) {\n            this.setState({ isPolishFive: true });\n            return;\n        }\n        return this.state.topPolishTopics.map((topic, index) => {\n            return (\n               <Topic \n                   key={index}\n                   id={topic.id}\n                   owner={topic.owner}\n                   title={topic.title}\n                   createdAt={topic.createdAt}\n                   languageForum={this.props.selectedForum}\n                   count={topic.countTopPolish}\n               />\n           );\n       });\n    }\n\n    generateTopEnglishTopics() {\n        if(this.state.topEnglishTopics.length < 5) {\n            this.setState({ isEnglishFive: true });\n            return;\n        }\n        return this.state.topEnglishTopics.map((topic, index) => {\n            return (\n               <Topic \n                   key={index}\n                   id={topic.id}\n                   owner={topic.owner}\n                   title={topic.title}\n                   createdAt={topic.createdAt}\n                   languageForum={this.props.selectedForum}\n                   count={topic.countTopEnglish}\n               />\n           );\n       });\n    }\n\n    generateTopGermanyTopics() {\n        if(this.state.topGermanyTopics.length < 5) {\n            this.setState({ isGermanyFive: true });\n            return;\n        }\n        return this.state.topGermanyTopics.map((topic, index) => {\n            return (\n               <Topic \n                   key={index}\n                   id={topic.id}\n                   owner={topic.owner}\n                   title={topic.title}\n                   createdAt={topic.createdAt}\n                   languageForum={this.props.selectedForum}\n                   count={topic.countTopGermany}\n               />\n           );\n       });\n    }\n\n    render() {\n        let isGermanyFive = this.state.isGermanyFive;\n        let isPolishFive = this.state.isPolishFive;\n        let isEnglishFive = this.state.isEnglishFive;\n\n        return (\n            <div>\n                { isPolishFive && this.generateTopPolishTopics()  }\n                { isGermanyFive && this.generateTopGermanyTopics() }\n                { isEnglishFive && this.generateTopEnglishTopics() }\n            </div>\n        );\n    }\n}\n\nexport default TopTopics;"]},"metadata":{},"sourceType":"module"}