{"ast":null,"code":"import decode from 'jwt-decode';\nexport default class AuthService {\n  setToken(idToken) {\n    localStorage.setItem(\"JwtToken\", idToken);\n  }\n\n  getToken() {\n    return localStorage.getItem(\"JwtToken\");\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (error) {\n      return false;\n    }\n  }\n\n  loggedIn() {\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  logout() {\n    localStorage.removeItem(\"JwtToken\");\n  }\n\n}","map":{"version":3,"sources":["/home/huber/Pulpit/divelog/react-divelog/src/util/AuthService.js"],"names":["decode","AuthService","setToken","idToken","localStorage","setItem","getToken","getItem","isTokenExpired","token","decoded","exp","Date","now","error","loggedIn","logout","removeItem"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,YAAnB;AAEA,eAAe,MAAMC,WAAN,CAAkB;AAE7BC,EAAAA,QAAQ,CAACC,OAAD,EAAU;AACdC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,OAAjC;AACH;;AAEDG,EAAAA,QAAQ,GAAG;AACP,WAAOF,YAAY,CAACG,OAAb,CAAqB,UAArB,CAAP;AACH;;AAEDC,EAAAA,cAAc,CAACC,KAAD,EAAQ;AAClB,QAAI;AACA,YAAMC,OAAO,GAAGV,MAAM,CAACS,KAAD,CAAtB;;AAEA,UAAGC,OAAO,CAACC,GAAR,GAAcC,IAAI,CAACC,GAAL,KAAa,IAA9B,EAAoC;AAChC,eAAO,IAAP;AACH,OAFD,MAEO;AACH,eAAO,KAAP;AACH;AACJ,KARD,CAQE,OAAMC,KAAN,EAAa;AACX,aAAO,KAAP;AACH;AACJ;;AAEDC,EAAAA,QAAQ,GAAG;AACP,UAAMN,KAAK,GAAG,KAAKH,QAAL,EAAd;AACA,WAAO,CAAC,CAACG,KAAF,IAAW,CAAC,KAAKD,cAAL,CAAoBC,KAApB,CAAnB;AACH;;AAEDO,EAAAA,MAAM,GAAG;AACLZ,IAAAA,YAAY,CAACa,UAAb,CAAwB,UAAxB;AACH;;AA/B4B","sourcesContent":["import decode from 'jwt-decode';\n\nexport default class AuthService {\n\n    setToken(idToken) {\n        localStorage.setItem(\"JwtToken\", idToken);\n    }\n\n    getToken() {\n        return localStorage.getItem(\"JwtToken\");\n    }\n\n    isTokenExpired(token) {\n        try {\n            const decoded = decode(token);\n\n            if(decoded.exp < Date.now() / 1000) {\n                return true;\n            } else {\n                return false;\n            }\n        } catch(error) {\n            return false;\n        }\n    }\n\n    loggedIn() {\n        const token = this.getToken();\n        return !!token && !this.isTokenExpired(token);\n    }\n\n    logout() {\n        localStorage.removeItem(\"JwtToken\");\n    }\n}"]},"metadata":{},"sourceType":"module"}