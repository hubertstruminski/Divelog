{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/divelog/react-divelog/src/components/twitter/twitter-messages/TwitterMessagesInbox.js\";\nimport React from 'react';\nimport AuthService from '../../../util/AuthService';\nimport TwitterConversationContact from './TwitterConversationContact';\nimport $ from 'jquery';\nimport TwitterMessagesSearch from './TwitterMessagesSearch';\n\nclass TwitterMessagesInbox extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      conversations: [],\n      isConversationsRetrieved: false\n    };\n    this.Auth = new AuthService();\n    this.renderConversations = this.renderConversations.bind(this);\n    this.searchInList = this.searchInList.bind(this);\n  }\n\n  componentDidMount() {\n    let jwtToken = this.Auth.getRightSocialToken();\n    fetch(\"/twitter/direct/messages/\".concat(jwtToken), {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(json => {\n      json.map((item, index) => {\n        const element = {\n          recipientId: item.recipientId,\n          senderId: item.senderId,\n          name: item.name,\n          screenName: item.screenName,\n          createdAt: item.createdAt,\n          text: item.text,\n          pictureUrl: item.pictureUrl\n        };\n        this.setState({\n          conversations: this.state.conversations.concat(element)\n        });\n      });\n      this.setState({\n        isConversationsRetrieved: true\n      }, () => {\n        $(\".twitter-messages-list-persons-spinner\").css({\n          display: \"block\"\n        });\n      });\n    });\n  }\n\n  renderConversations() {\n    return this.state.conversations.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt)).map((conversation, index) => {\n      return React.createElement(TwitterConversationContact, {\n        recipientId: conversation.recipientId,\n        senderId: conversation.senderId,\n        name: conversation.name,\n        screenName: conversation.screenName,\n        createdAt: conversation.createdAt,\n        text: conversation.text,\n        pictureUrl: conversation.pictureUrl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      });\n    });\n  }\n\n  searchInList(searchInput) {\n    return this.state.conversations.map((conversation, index) => {\n      if (conversation.name.includes(searchInput) || conversation.screenName.includes(searchInput)) {\n        this.setState({\n          conversations: this.state.conversations.filter((item, i) => i === index)\n        });\n      }\n    });\n  }\n\n  render() {\n    let isConversationsRetrieved = this.state.isConversationsRetrieved;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(TwitterMessagesSearch, {\n      searchInList: this.searchInList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"twitter-messages-list-persons-spinner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"list-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, isConversationsRetrieved && this.renderConversations()), !isConversationsRetrieved && React.createElement(\"div\", {\n      className: \"spinner-border text-primary\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      class: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Loading...\"))));\n  }\n\n}\n\nexport default TwitterMessagesInbox;","map":{"version":3,"sources":["/home/huber/Pulpit/divelog/react-divelog/src/components/twitter/twitter-messages/TwitterMessagesInbox.js"],"names":["React","AuthService","TwitterConversationContact","$","TwitterMessagesSearch","TwitterMessagesInbox","Component","constructor","state","conversations","isConversationsRetrieved","Auth","renderConversations","bind","searchInList","componentDidMount","jwtToken","getRightSocialToken","fetch","method","headers","then","response","json","map","item","index","element","recipientId","senderId","name","screenName","createdAt","text","pictureUrl","setState","concat","css","display","sort","a","b","Date","conversation","searchInput","includes","filter","i","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport AuthService from '../../../util/AuthService';\nimport TwitterConversationContact from './TwitterConversationContact';\nimport $ from 'jquery';\nimport TwitterMessagesSearch from './TwitterMessagesSearch';\n\nclass TwitterMessagesInbox extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            conversations: [],\n            isConversationsRetrieved: false\n        }\n        this.Auth = new AuthService();\n        this.renderConversations = this.renderConversations.bind(this);\n        this.searchInList = this.searchInList.bind(this);\n    }\n\n    componentDidMount() {\n        let jwtToken = this.Auth.getRightSocialToken();\n\n        fetch(`/twitter/direct/messages/${jwtToken}`, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }\n        }).then(response => response.json())\n        .then(json => {\n            json.map((item, index) => {\n                const element = {\n                    recipientId: item.recipientId,\n                    senderId: item.senderId,\n                    name: item.name,\n                    screenName: item.screenName,\n                    createdAt: item.createdAt,\n                    text: item.text,\n                    pictureUrl: item.pictureUrl\n                }\n                this.setState({ conversations: this.state.conversations.concat(element) });\n            });\n            this.setState({ isConversationsRetrieved: true }, () => {\n                $(\".twitter-messages-list-persons-spinner\").css({ display: \"block\" });\n            });\n        })\n    }\n\n    renderConversations() {\n        return this.state.conversations\n            .sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt))\n            .map((conversation, index) => {\n            return (\n                <TwitterConversationContact \n                    recipientId={conversation.recipientId}\n                    senderId={conversation.senderId}\n                    name={conversation.name}\n                    screenName={conversation.screenName}\n                    createdAt={conversation.createdAt}\n                    text={conversation.text}\n                    pictureUrl={conversation.pictureUrl}\n                />\n            );\n        });\n    }\n\n    searchInList(searchInput) {\n        return this.state.conversations.map((conversation, index) => {\n            if(conversation.name.includes(searchInput) || conversation.screenName.includes(searchInput)) {\n                this.setState({ conversations: this.state.conversations.filter((item, i) => i === index)});\n            }\n        });\n    }\n\n    render() {\n        let isConversationsRetrieved = this.state.isConversationsRetrieved;\n        return (\n            <React.Fragment>\n                <TwitterMessagesSearch \n                    searchInList={this.searchInList}\n                />\n                <div className=\"twitter-messages-list-persons-spinner\">\n                    <ul className=\"list-group\">\n                        { isConversationsRetrieved && this.renderConversations() }\n                    </ul>\n                    { !isConversationsRetrieved &&\n                        <div \n                            className='spinner-border text-primary' \n                            role='status'\n                        >\n                            <span class='sr-only'>\n                                Loading...\n                            </span>\n                        </div>\n                    }\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default TwitterMessagesInbox;"]},"metadata":{},"sourceType":"module"}