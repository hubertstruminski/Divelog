{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/divelog/react-divelog/src/components/logbook/GoogleLogbookMap.js\";\nimport React from 'react';\nimport { Map, Marker, GoogleApiWrapper, InfoWindow } from 'google-maps-react';\nimport GoogleLogbookModal from '../logbook/GoogleLogbookModal';\nimport $ from 'jquery';\nimport { withTranslation } from 'react-i18next';\nimport { compose } from 'redux';\nimport DeleteLogbookButton from '../logbook/DeleteLogbookButton';\nimport swal from 'sweetalert';\nimport GoogleLogbookMarkerModal from './GoogleLogbookMarkerModal';\n\nclass GoogleLogbookMap extends React.Component {\n  constructor() {\n    super();\n\n    this.onMarkerClick = (props, marker, e) => {\n      this.setState({\n        selectedPlace: props,\n        activeMarker: marker,\n        showingInfoWindow: true,\n        isAccessible: false,\n        existingMarkerName: props.name,\n        existingMarkerLatitude: props.position.lat,\n        existingMarkerLongitude: props.position.lng\n      });\n      $(document).on('show.bs.modal', \"#modalLogbookMarker\", function (event) {});\n      $(\"#modalLogbookMarker\").modal('show');\n    };\n\n    this.onClose = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n\n        if (this.tbodyRef.innerHTML !== \"\") {\n          this.tbodyRef.innerHTML = \"\";\n        }\n      }\n    };\n\n    this.onClose = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    };\n\n    this.showTableRow = () => {\n      return React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        scope: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, \"1\")), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, this.state.marker.name), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, this.state.marker.latitude), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, this.state.marker.longitude), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(DeleteLogbookButton, {\n        id: this.state.marker.id,\n        updateMarker: this.updateMarker,\n        setFinishMarker: this.setFinishMarker,\n        setRef: this.setRef,\n        setIsAccessible: this.setIsAccessible,\n        setMarker: this.props.setMarker,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      })));\n    };\n\n    this.state = {\n      latitude: '',\n      longitude: '',\n      marker: {},\n      activeMarker: {},\n      markers: [],\n      showingInfoWIndow: false,\n      selectedPlace: {},\n      isFinishMarker: false,\n      isAccessible: true,\n      existingMarkerName: '',\n      existingMarkerLatitude: '',\n      existingMarkerLongitude: ''\n    };\n    this.onMapClick = this.onMapClick.bind(this);\n    this.updateMarker = this.updateMarker.bind(this);\n    this.setFinishMarker = this.setFinishMarker.bind(this);\n    this.setIsAccessible = this.setIsAccessible.bind(this);\n    this.showAllMarkers = this.showAllMarkers.bind(this);\n    this.onMarkerClick = this.onMarkerClick.bind(this);\n  }\n\n  componentDidMount() {\n    $(\".add-dive-google-container div:first\").css({\n      \"height\": \"350px\",\n      \"position\": \"static\"\n    });\n    let jwtToken = localStorage.getItem(\"JwtToken\");\n    fetch(\"/get/markers/\".concat(jwtToken), {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'content-type': 'application/json'\n      }\n    }).then(response => response.json()).then(jsonData => {\n      jsonData.map((marker, index) => {\n        let element = {\n          id: marker.id,\n          name: marker.name,\n          latitude: marker.latitude,\n          longitude: marker.longitude\n        };\n        this.setState({\n          markers: this.state.markers.concat(element)\n        });\n      });\n    });\n  }\n\n  onMapClick(t, map, coord) {\n    if (this.state.isAccessible) {\n      const latLng = coord.latLng;\n      const lat = latLng.lat();\n      const lng = latLng.lng();\n      this.setState({\n        latitude: lat,\n        longitude: lng,\n        isAccessible: false\n      });\n      $(document).on('show.bs.modal', \"#modalLogbookCenter\", function (event) {\n        $('#name').trigger('focus');\n      });\n      $(\"#modalLogbookCenter\").modal('show');\n    } else {\n      swal(\"No access\", \"You can not mark 2nd location\", \"error\");\n    }\n  }\n\n  showMarker() {\n    return React.createElement(Marker, {\n      name: this.state.marker.name,\n      position: {\n        lat: this.state.marker.latitude,\n        lng: this.state.marker.longitude\n      },\n      onClick: this.onMarkerClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    });\n  }\n\n  showAllMarkers() {\n    return this.state.markers.map((marker, index) => {\n      return React.createElement(Marker, {\n        key: index,\n        name: marker.name,\n        position: {\n          lat: marker.latitude,\n          lng: marker.longitude\n        },\n        onClick: this.onMarkerClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      });\n    });\n  }\n\n  updateMarker(markerObject) {\n    this.setState({\n      marker: markerObject\n    });\n  }\n\n  setFinishMarker(value) {\n    this.setState({\n      isFinishMarker: value\n    });\n  }\n\n  setIsAccessible() {\n    this.setState({\n      isAccessible: true\n    });\n  }\n\n  render() {\n    let isFinishMarker = this.state.isFinishMarker;\n    let tableRow;\n\n    if (isFinishMarker) {\n      tableRow = this.showTableRow();\n    } else {\n      tableRow = \"\";\n    }\n\n    const mapStyle = {\n      position: 'static',\n      width: '100%',\n      height: '350px'\n    };\n    let loadingScreen = React.createElement(\"div\", {\n      class: \"d-flex justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"spinner-grow\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      class: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, this.props.t(\"loading\"))));\n    let map = React.createElement(\"div\", {\n      className: \"add-dive-google-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(Map, {\n      google: this.props.google,\n      zoom: 5,\n      style: mapStyle,\n      initialCenter: {\n        lat: 48.023,\n        lng: 14.426\n      },\n      onClick: this.onMapClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, isFinishMarker && this.showMarker(), this.showAllMarkers(), React.createElement(InfoWindow, {\n      marker: this.state.activeMarker,\n      visible: this.state.showingInfoWindow,\n      onClose: this.onClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"alert alert-success\",\n      role: \"alert\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, this.state.selectedPlace.name)))), React.createElement(GoogleLogbookModal, {\n      latitude: this.state.latitude,\n      longitude: this.state.longitude,\n      updateMarker: this.updateMarker,\n      setFinishMarker: this.setFinishMarker,\n      setMarker: this.props.setMarker,\n      setIsAccessible: this.setIsAccessible,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }), React.createElement(GoogleLogbookMarkerModal, {\n      name: this.state.existingMarkerName,\n      latitude: this.state.existingMarkerLatitude,\n      longitude: this.state.existingMarkerLongitude,\n      updateMarker: this.updateMarker,\n      setFinishMarker: this.setFinishMarker,\n      setMarker: this.props.setMarker,\n      setIsAccessible: this.setIsAccessible,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"add-dive-table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      className: \"table table-striped table-hover\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      scope: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, \"#\")), React.createElement(\"th\", {\n      scope: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, this.props.t(\"googleMap.table.name\")), React.createElement(\"th\", {\n      scope: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, this.props.t(\"googleMap.table.latitude\")), React.createElement(\"th\", {\n      scope: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, this.props.t(\"googleMap.table.longitude\")), React.createElement(\"th\", {\n      scope: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, this.props.t(\"googleMap.table.delete\")))), React.createElement(\"tbody\", {\n      ref: el => this.tbodyRef = el,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, isFinishMarker && tableRow))));\n    let content = this.state.isLoading ? loadingScreen : map;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, content);\n  }\n\n}\n\nexport default compose(GoogleApiWrapper(props => ({\n  apiKey: 'AIzaSyBgb4kpatKEjsOGsxplxFyRfw1K_wGhLTo',\n  language: props.language\n})), withTranslation(\"common\"))(GoogleLogbookMap);","map":{"version":3,"sources":["/home/huber/Pulpit/divelog/react-divelog/src/components/logbook/GoogleLogbookMap.js"],"names":["React","Map","Marker","GoogleApiWrapper","InfoWindow","GoogleLogbookModal","$","withTranslation","compose","DeleteLogbookButton","swal","GoogleLogbookMarkerModal","GoogleLogbookMap","Component","constructor","onMarkerClick","props","marker","e","setState","selectedPlace","activeMarker","showingInfoWindow","isAccessible","existingMarkerName","name","existingMarkerLatitude","position","lat","existingMarkerLongitude","lng","document","on","event","modal","onClose","state","tbodyRef","innerHTML","showTableRow","latitude","longitude","id","updateMarker","setFinishMarker","setRef","setIsAccessible","setMarker","markers","showingInfoWIndow","isFinishMarker","onMapClick","bind","showAllMarkers","componentDidMount","css","jwtToken","localStorage","getItem","fetch","method","headers","then","response","json","jsonData","map","index","element","concat","t","coord","latLng","trigger","showMarker","markerObject","value","render","tableRow","mapStyle","width","height","loadingScreen","google","el","content","isLoading","apiKey","language"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Map, Marker, GoogleApiWrapper, InfoWindow } from 'google-maps-react';\nimport GoogleLogbookModal from '../logbook/GoogleLogbookModal';\nimport $ from 'jquery';\nimport { withTranslation } from 'react-i18next';\nimport { compose } from 'redux';\nimport DeleteLogbookButton from '../logbook/DeleteLogbookButton';\nimport swal from 'sweetalert';\nimport GoogleLogbookMarkerModal from './GoogleLogbookMarkerModal';\n\nclass GoogleLogbookMap extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            latitude: '',\n            longitude: '',\n            marker: {},\n            activeMarker: {},\n            markers: [],\n            showingInfoWIndow: false,\n            selectedPlace: {},\n            isFinishMarker: false,\n            isAccessible: true,\n            existingMarkerName: '',\n            existingMarkerLatitude: '',\n            existingMarkerLongitude: ''\n        }\n        this.onMapClick = this.onMapClick.bind(this);\n        this.updateMarker = this.updateMarker.bind(this);\n        this.setFinishMarker = this.setFinishMarker.bind(this);\n        this.setIsAccessible = this.setIsAccessible.bind(this);\n        this.showAllMarkers = this.showAllMarkers.bind(this);\n        this.onMarkerClick = this.onMarkerClick.bind(this);\n    }\n\n    componentDidMount() {\n        $(\".add-dive-google-container div:first\").css({\n            \"height\": \"350px\",\n            \"position\": \"static\"\n        });\n\n        let jwtToken = localStorage.getItem(\"JwtToken\");\n\n        fetch(`/get/markers/${jwtToken}`, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'content-type': 'application/json'\n            }\n        })\n        .then(response => response.json())\n        .then(jsonData => {\n            jsonData.map((marker, index) => {\n                let element = {\n                    id: marker.id,\n                    name: marker.name,\n                    latitude: marker.latitude,\n                    longitude: marker.longitude\n                }\n                this.setState({\n                    markers: this.state.markers.concat(element)\n                })\n            })\n        }); \n    }\n\n    onMapClick(t, map, coord) {\n        if(this.state.isAccessible) {\n            const { latLng } = coord;\n            const lat = latLng.lat();\n            const lng = latLng.lng();\n\n            this.setState({ \n                latitude: lat,\n                longitude: lng,\n                isAccessible: false\n            });\n\n            $(document).on('show.bs.modal', \"#modalLogbookCenter\", function (event) {\n                $('#name').trigger('focus');\n            });\n            $(\"#modalLogbookCenter\").modal('show');\n        } else {\n            swal(\"No access\", \"You can not mark 2nd location\", \"error\");\n        }\n    }\n\n    onMarkerClick = (props, marker, e) => {\n        this.setState({\n            selectedPlace: props,\n            activeMarker: marker,\n            showingInfoWindow: true,\n            isAccessible: false,\n            existingMarkerName: props.name,\n            existingMarkerLatitude: props.position.lat,\n            existingMarkerLongitude: props.position.lng\n        });\n        $(document).on('show.bs.modal', \"#modalLogbookMarker\", function (event) {});\n        $(\"#modalLogbookMarker\").modal('show');\n    }\n\n    onClose = props => {\n        if(this.state.showingInfoWindow) {\n            this.setState({\n                showingInfoWindow: false,\n                activeMarker: null\n            });if(this.tbodyRef.innerHTML !== \"\") {\n                this.tbodyRef.innerHTML = \"\";\n            }\n        }\n    };\n\n    showMarker() {\n        return (\n            <Marker \n                name={this.state.marker.name}\n                position={{ lat: this.state.marker.latitude, lng: this.state.marker.longitude }}\n                onClick={this.onMarkerClick}\n            />\n        );\n    }\n\n    showAllMarkers() {\n        return this.state.markers.map((marker, index) => {\n            return (\n                <Marker \n                    key={index} \n                    name={marker.name}\n                    position={{ lat: marker.latitude, lng: marker.longitude }}\n                    onClick={this.onMarkerClick}\n                />\n            );\n        });\n    }\n\n    onClose = props => {\n        if(this.state.showingInfoWindow) {\n            this.setState({\n                showingInfoWindow: false,\n                activeMarker: null\n            });\n        }\n    };\n\n    showTableRow = () => {\n        return (\n            <tr>\n                <th scope=\"row\">\n                    <b>1</b>\n                </th>\n                <td>{this.state.marker.name}</td>\n                <td>{this.state.marker.latitude}</td>\n                <td>{this.state.marker.longitude}</td>\n                <td>\n                    <DeleteLogbookButton \n                        id={this.state.marker.id}\n                        updateMarker={this.updateMarker}\n                        setFinishMarker={this.setFinishMarker}\n                        setRef={this.setRef}\n                        setIsAccessible={this.setIsAccessible}\n                        setMarker={this.props.setMarker}\n                    />\n                </td>\n            </tr>\n        );\n    }\n\n    updateMarker(markerObject) {\n        this.setState({ marker: markerObject });\n    }\n\n    setFinishMarker(value) {\n        this.setState({ isFinishMarker: value });\n    }\n\n    setIsAccessible() {\n        this.setState({ isAccessible: true });\n    }\n\n    render() {\n        let isFinishMarker = this.state.isFinishMarker;\n\n        let tableRow;\n        if(isFinishMarker) {\n            tableRow = this.showTableRow();\n        } else {\n            tableRow = \"\";\n        }\n         \n        const mapStyle = {\n            position: 'static',\n            width: '100%',\n            height: '350px',\n        }\n\n        let loadingScreen = (\n            <div class=\"d-flex justify-content-center\">\n                <div class=\"spinner-grow\" role=\"status\">\n                    <span class=\"sr-only\">\n                        {this.props.t(\"loading\")}\n                    </span>\n                </div>\n            </div>\n        )\n\n        let map = (\n            <div className=\"add-dive-google-container\">\n                <Map\n                    google={this.props.google}\n                    zoom={5}\n                    style={mapStyle}\n                    initialCenter={{ lat: 48.023, lng: 14.426}}\n                    onClick={this.onMapClick}\n                >\n                    { isFinishMarker && this.showMarker() }\n                    { this.showAllMarkers() }\n                    <InfoWindow\n                        marker={this.state.activeMarker}\n                        visible={this.state.showingInfoWindow}\n                        onClose={this.onClose}\n                    >\n                        <div className=\"alert alert-success\" role=\"alert\">\n                            <h4>{this.state.selectedPlace.name}</h4>\n                        </div>\n                    </InfoWindow>\n                </Map>\n                <GoogleLogbookModal \n                    latitude={this.state.latitude}\n                    longitude={this.state.longitude}\n                    updateMarker={this.updateMarker}\n                    setFinishMarker={this.setFinishMarker}\n                    setMarker={this.props.setMarker}\n                    setIsAccessible={this.setIsAccessible}\n                />\n                <GoogleLogbookMarkerModal \n                    name={this.state.existingMarkerName}\n                    latitude={this.state.existingMarkerLatitude}\n                    longitude={this.state.existingMarkerLongitude}\n                    updateMarker={this.updateMarker}\n                    setFinishMarker={this.setFinishMarker}\n                    setMarker={this.props.setMarker}\n                    setIsAccessible={this.setIsAccessible}\n                />\n                <div className=\"add-dive-table\">\n                    <table className=\"table table-striped table-hover\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">\n                                    <b>#</b>\n                                </th>\n                                <th scope=\"col\">\n                                    {this.props.t(\"googleMap.table.name\")}\n                                </th>\n                                <th scope=\"col\">\n                                    {this.props.t(\"googleMap.table.latitude\")}\n                                </th>\n                                <th scope=\"col\">\n                                    {this.props.t(\"googleMap.table.longitude\")}\n                                </th>\n                                <th scope=\"col\">\n                                    {this.props.t(\"googleMap.table.delete\")}\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody ref={(el) => this.tbodyRef = el}>\n                            { isFinishMarker && tableRow }\n                        </tbody>\n                    </table>\n                </div>\n            </div>     \n        )\n        let content = this.state.isLoading ? loadingScreen : map;\n\n        return (\n            <div>\n                { content }\n            </div>\n        );\n    }\n}\n\nexport default compose(\n    GoogleApiWrapper(\n    (props) => ({\n      apiKey: 'AIzaSyBgb4kpatKEjsOGsxplxFyRfw1K_wGhLTo',\n      language: props.language,\n    }\n  )),\n    withTranslation(\"common\")\n  )(GoogleLogbookMap);"]},"metadata":{},"sourceType":"module"}