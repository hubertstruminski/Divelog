{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/divelog/react-divelog/src/components/twitter/twitter-home/TwitterHome.js\";\nimport React from 'react';\nimport '../../../css/TimelineLikes.css';\nimport withAuth from '../../../util/withAuth';\nimport AuthService from '../../../util/AuthService';\nimport TwitterCategoriesCard from '../TwitterCategoriesCard';\nimport SearchTwitterPeople from '../SearchTwitterPeople';\nimport AvailableTrends from '../AvailableTrends';\nimport TwitterFriendsList from '../TwitterFriendsList';\nimport $ from 'jquery';\nimport TwitterHomeAdd from './TwitterHomeAdd';\n\nclass TwitterHome extends React.Component {\n  constructor(props) {\n    super(props);\n    this.isMountedTwitter = false;\n    this.state = {\n      accessToken: '',\n      email: '',\n      name: '',\n      userID: '',\n      pictureUrl: '',\n      providerId: '',\n      screenName: '',\n      tokenSecret: '',\n      tweets: '',\n      isTweetsRetrieved: false\n    };\n    this.Auth = new AuthService();\n    this.addNewTweet = this.addNewTweet.bind(this);\n  }\n\n  componentDidMount() {\n    this.isMountedTwitter = true;\n    let jwtToken = this.Auth.getRightSocialToken();\n    fetch(\"/getuserdata/\".concat(jwtToken), {\n      method: 'GET',\n      headers: {\n        'content-type': 'application/json'\n      }\n    }).then(response => response.json()).then(jsonData => {\n      if (this.isMountedTwitter) {\n        this.setState({\n          accessToken: jsonData.accessToken,\n          email: jsonData.email,\n          name: jsonData.name,\n          twitterUserID: jsonData.twitterUserID,\n          pictureUrl: jsonData.pictureUrl,\n          providerId: jsonData.providerId,\n          screenName: jsonData.screenName,\n          tokenSecret: jsonData.tokenSecret\n        }, () => {\n          fetch(\"/twitter/home/timeline/\".concat(jwtToken), {\n            method: 'GET',\n            headers: {\n              'content-type': 'application/json'\n            }\n          }).then(response => {\n            return response.text();\n          }).then(text => {\n            this.setState({\n              tweets: text\n            }, () => {\n              $(\".home-timeline-container\").html(text);\n              $(\".twitter-tweet\").attr(\"data-width\", \"520px\");\n            });\n          });\n        });\n      }\n    });\n  }\n\n  addNewTweet(newTweet) {\n    this.setState({\n      tweets: newTweet + this.state.tweets\n    }, () => {\n      $(\".home-timeline-container\").html(this.state.tweets);\n      $(\".twitter-tweet\").attr(\"data-width\", \"520px\");\n    });\n  }\n\n  componentWillUnmount() {\n    this.isMountedTwitter = false;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"twitter-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-grid-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-grid-item-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-left-categories-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-profil-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, this.state.name), React.createElement(TwitterCategoriesCard, {\n      pictureUrl: this.state.pictureUrl,\n      screenName: this.state.screenName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"twitter-home-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(TwitterHomeAdd, {\n      pictureUrl: this.state.pictureUrl,\n      addNewTweet: this.addNewTweet,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"home-timeline-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"twitter-grid-item-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-rl-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-groups-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(SearchTwitterPeople, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), React.createElement(AvailableTrends, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"twitter-rr-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-friends-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default withAuth(TwitterHome, {\n  twitterHome: true\n});","map":{"version":3,"sources":["/home/huber/Pulpit/divelog/react-divelog/src/components/twitter/twitter-home/TwitterHome.js"],"names":["React","withAuth","AuthService","TwitterCategoriesCard","SearchTwitterPeople","AvailableTrends","TwitterFriendsList","$","TwitterHomeAdd","TwitterHome","Component","constructor","props","isMountedTwitter","state","accessToken","email","name","userID","pictureUrl","providerId","screenName","tokenSecret","tweets","isTweetsRetrieved","Auth","addNewTweet","bind","componentDidMount","jwtToken","getRightSocialToken","fetch","method","headers","then","response","json","jsonData","setState","twitterUserID","text","html","attr","newTweet","componentWillUnmount","render","twitterHome"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../../css/TimelineLikes.css';\nimport withAuth from '../../../util/withAuth';\nimport AuthService from '../../../util/AuthService';\nimport TwitterCategoriesCard from '../TwitterCategoriesCard';\nimport SearchTwitterPeople from '../SearchTwitterPeople';\nimport AvailableTrends from '../AvailableTrends';\nimport TwitterFriendsList from '../TwitterFriendsList';\nimport $ from 'jquery';\nimport TwitterHomeAdd from './TwitterHomeAdd';\n\nclass TwitterHome extends React.Component {\n    isMountedTwitter = false;\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            accessToken: '',\n            email: '',\n            name: '',\n            userID: '',\n            pictureUrl: '',\n            providerId: '',\n            screenName: '',\n            tokenSecret: '',\n            tweets: '',\n            isTweetsRetrieved: false\n        }\n        this.Auth = new AuthService();\n\n        this.addNewTweet = this.addNewTweet.bind(this);\n    }\n\n    componentDidMount() {\n        this.isMountedTwitter = true;\n\n        let jwtToken = this.Auth.getRightSocialToken();\n\n        fetch(`/getuserdata/${jwtToken}`, {\n            method: 'GET',\n            headers: {\n              'content-type': 'application/json'\n            }\n        })\n        .then(response => response.json())\n        .then(jsonData => {\n            if(this.isMountedTwitter) {\n                this.setState({\n                    accessToken: jsonData.accessToken,\n                    email: jsonData.email,\n                    name: jsonData.name,\n                    twitterUserID: jsonData.twitterUserID,\n                    pictureUrl: jsonData.pictureUrl,\n                    providerId: jsonData.providerId,\n                    screenName: jsonData.screenName,\n                    tokenSecret: jsonData.tokenSecret\n                }, () => {\n                    fetch(`/twitter/home/timeline/${jwtToken}`, {\n                        method: 'GET',\n                        headers: {\n                            'content-type': 'application/json'\n                        }\n                    }).then(response => {\n                        return response.text();\n                    }).then(text => {\n                        this.setState({ tweets: text }, () => {\n                            $(\".home-timeline-container\").html(text);\n                            $(\".twitter-tweet\").attr(\"data-width\", \"520px\");\n                        });                      \n                    });\n                });\n            }\n        });\n    }\n\n    addNewTweet(newTweet) {\n        this.setState({ tweets: newTweet + this.state.tweets }, () => {\n            $(\".home-timeline-container\").html(this.state.tweets);\n            $(\".twitter-tweet\").attr(\"data-width\", \"520px\");\n        });\n    }\n\n    componentWillUnmount() {\n        this.isMountedTwitter = false;\n    }\n\n    render() {\n        return (\n            <div className=\"twitter-container\">\n                <div className=\"twitter-grid-container\">\n                    <div className=\"twitter-grid-item-1\">\n                        <div className=\"twitter-left-categories-container\">\n                            <div className=\"twitter-profil-container\">\n                                { this.state.name }\n                            </div>\n                            <TwitterCategoriesCard\n                                pictureUrl={this.state.pictureUrl}\n                                screenName={this.state.screenName}\n                            />    \n                        </div>\n                    </div>\n                    <div className=\"twitter-home-container\">\n                        <TwitterHomeAdd \n                            pictureUrl={this.state.pictureUrl}\n                            addNewTweet={this.addNewTweet}\n                        />\n                        <div className=\"home-timeline-container\">\n\n                        </div>\n                    </div>\n                    <div className=\"twitter-grid-item-3\">\n                        <div className=\"twitter-rl-container\">\n                            <div className=\"twitter-groups-container\">\n                                <SearchTwitterPeople />\n                                <AvailableTrends />\n                            </div>\n                        </div>\n                        <div className=\"twitter-rr-container\">\n                            <div className=\"twitter-friends-container\">\n                                {/* <TwitterFriendsList /> */}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withAuth(TwitterHome, { twitterHome: true });"]},"metadata":{},"sourceType":"module"}