{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/divelog/react-divelog/src/components/twitter/twitter-messages/TwitterConversationContact.js\";\nimport React from 'react';\nimport '../../../css/twitter-messages/TwitterConversationContact.css';\n\nclass TwitterConversationContact extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  formatDate(inputDate) {\n    let months = [\"Jan.\", \"Feb.\", \"Mar.\", \"Apr.\", \"May.\", \"June.\", \"July.\", \"Aug.\", \"Sept.\", \"Oct.\", \"Nov.\", \"Dec.\"];\n    let date = new Date(inputDate);\n    let splittedDate = date.toString().split(\" \");\n    let year = date.getFullYear();\n    let indexOfMonth = date.getMonth();\n    let month = months[indexOfMonth];\n    let days = splittedDate[2];\n    let hours = date.getHours();\n    let minutes = date.getMinutes();\n    let currentDate = new Date();\n    let splittedCurrentDate = currentDate.toString().split(\" \");\n\n    if (year === currentDate.getFullYear() && indexOfMonth === currentDate.getMonth() && days === splittedCurrentDate[2]) {\n      if (hours < 10) {\n        hours = \"0\" + hours;\n      }\n\n      if (minutes < 10) {\n        minutes = \"0\" + minutes;\n      }\n\n      return hours + \":\" + minutes;\n    }\n\n    if (year === currentDate.getFullYear()) {\n      return month + \" \" + days;\n    }\n\n    if (days < 10) {\n      days = \"0\" + days;\n    }\n\n    indexOfMonth = indexOfMonth + 1;\n\n    if (indexOfMonth < 10) {\n      indexOfMonth = \"0\" + indexOfMonth;\n    }\n\n    return days + \"-\" + indexOfMonth + \"-\" + year;\n  }\n\n  render() {\n    let text = \"\";\n\n    if (this.props.text.length > 40) {\n      text = this.props.text.substring(0, 40);\n    }\n\n    let date = this.formatDate(this.props.createdAt);\n    return React.createElement(\"li\", {\n      className: \"conversation-contact-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"conversation-contact-avatar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.props.pictureUrl,\n      alt: \"Avatar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"conversation-contact-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"conversation-contact-name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, this.props.name), React.createElement(\"div\", {\n      className: \"conversation-contact-date\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, date), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), \"@\", this.props.screenName, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), text));\n  }\n\n}\n\nexport default TwitterConversationContact;","map":{"version":3,"sources":["/home/huber/Pulpit/divelog/react-divelog/src/components/twitter/twitter-messages/TwitterConversationContact.js"],"names":["React","TwitterConversationContact","Component","constructor","props","formatDate","inputDate","months","date","Date","splittedDate","toString","split","year","getFullYear","indexOfMonth","getMonth","month","days","hours","getHours","minutes","getMinutes","currentDate","splittedCurrentDate","render","text","length","substring","createdAt","pictureUrl","name","screenName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../../css/twitter-messages/TwitterConversationContact.css';\n\nclass TwitterConversationContact extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    \n    formatDate(inputDate) {\n        let months = [\"Jan.\", \"Feb.\", \"Mar.\", \"Apr.\", \"May.\", \"June.\", \"July.\", \"Aug.\", \"Sept.\", \"Oct.\", \"Nov.\", \"Dec.\"];\n\n        let date = new Date(inputDate);\n        let splittedDate = date.toString().split(\" \");\n\n        let year = date.getFullYear();\n        let indexOfMonth = date.getMonth();\n        let month = months[indexOfMonth];\n        let days = splittedDate[2];\n        let hours = date.getHours();\n        let minutes = date.getMinutes();\n\n        let currentDate = new Date();\n        let splittedCurrentDate = currentDate.toString().split(\" \");\n\n        if(year === currentDate.getFullYear() && indexOfMonth === currentDate.getMonth() && days === splittedCurrentDate[2]) {\n            if(hours < 10) {\n                hours = \"0\" + hours;\n            }\n            if(minutes < 10) {\n                minutes = \"0\" + minutes;\n            }\n            return hours + \":\" + minutes;\n        }\n\n        if(year === currentDate.getFullYear()) {\n            return month + \" \" + days;\n        }\n\n        if(days < 10) {\n            days = \"0\" + days;\n        }\n\n        indexOfMonth = indexOfMonth + 1;\n\n        if(indexOfMonth < 10) {\n            indexOfMonth = \"0\" + indexOfMonth;\n        }\n        return days + \"-\" + indexOfMonth + \"-\" + year;   \n    }\n\n    render() {\n        let text = \"\";\n        if(this.props.text.length > 40) {\n            text = this.props.text.substring(0, 40);\n        }\n        let date = this.formatDate(this.props.createdAt);\n        return (\n            <li className=\"conversation-contact-wrapper\">\n                <div className=\"conversation-contact-avatar\">\n                    <img src={this.props.pictureUrl} alt=\"Avatar\" />\n                </div>\n                <div className=\"conversation-contact-info\">\n                    <div className=\"conversation-contact-name\">\n                        {this.props.name}\n                    </div>\n                    <div className=\"conversation-contact-date\">{date}</div>\n                    <br />\n                    @{ this.props.screenName }\n                    <br />\n                    { text }\n                </div>\n                    \n            </li>\n        );\n    }\n}\n\nexport default TwitterConversationContact;"]},"metadata":{},"sourceType":"module"}