{"ast":null,"code":"import _objectSpread from \"/home/huber/Pulpit/divelog/react-divelog/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport decode from 'jwt-decode';\nexport default class AuthService {\n  constructor() {\n    this.getProfile = this.getProfile.bind(this);\n  }\n\n  setToken(idToken) {\n    localStorage.setItem(\"id_token\", idToken);\n  }\n\n  getToken() {\n    return localStorage.getItem(\"id_token\");\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (error) {\n      return false;\n    }\n  }\n\n  loggedIn() {\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  logout() {\n    localStorage.removeItem(\"id_token\");\n  }\n\n  getProfile() {\n    return decode(this.getToken);\n  }\n\n  fetch(url, options) {\n    const headers = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    };\n\n    if (this.loggedIn()) {\n      headers['Authorization'] = 'Bearer' + this.getToken();\n    }\n\n    return fetch(url, _objectSpread({\n      headers\n    }, options)).then(this._checkStatus).then(response => response.json());\n  }\n\n  _checkStatus(response) {\n    if (response.status >= 200 && response.status < 300) {\n      return response;\n    } else {\n      var error = new Error(response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/huber/Pulpit/divelog/react-divelog/src/util/AuthService.js"],"names":["decode","AuthService","constructor","getProfile","bind","setToken","idToken","localStorage","setItem","getToken","getItem","isTokenExpired","token","decoded","exp","Date","now","error","loggedIn","logout","removeItem","fetch","url","options","headers","then","_checkStatus","response","json","status","Error","statusText"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,YAAnB;AAEA,eAAe,MAAMC,WAAN,CAAkB;AAC7BC,EAAAA,WAAW,GAAG;AACV,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACH;;AAEDC,EAAAA,QAAQ,CAACC,OAAD,EAAU;AACdC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,OAAjC;AACH;;AAEDG,EAAAA,QAAQ,GAAG;AACP,WAAOF,YAAY,CAACG,OAAb,CAAqB,UAArB,CAAP;AACH;;AAEDC,EAAAA,cAAc,CAACC,KAAD,EAAQ;AAClB,QAAI;AACA,YAAMC,OAAO,GAAGb,MAAM,CAACY,KAAD,CAAtB;;AAEA,UAAGC,OAAO,CAACC,GAAR,GAAcC,IAAI,CAACC,GAAL,KAAa,IAA9B,EAAoC;AAChC,eAAO,IAAP;AACH,OAFD,MAEO;AACH,eAAO,KAAP;AACH;AACJ,KARD,CAQE,OAAMC,KAAN,EAAa;AACX,aAAO,KAAP;AACH;AACJ;;AAEDC,EAAAA,QAAQ,GAAG;AACP,UAAMN,KAAK,GAAG,KAAKH,QAAL,EAAd;AACA,WAAO,CAAC,CAACG,KAAF,IAAW,CAAC,KAAKD,cAAL,CAAoBC,KAApB,CAAnB;AACH;;AAEDO,EAAAA,MAAM,GAAG;AACLZ,IAAAA,YAAY,CAACa,UAAb,CAAwB,UAAxB;AACH;;AAEDjB,EAAAA,UAAU,GAAG;AACT,WAAOH,MAAM,CAAC,KAAKS,QAAN,CAAb;AACH;;AAEDY,EAAAA,KAAK,CAACC,GAAD,EAAMC,OAAN,EAAe;AAChB,UAAMC,OAAO,GAAG;AACZ,gBAAU,kBADE;AAEZ,sBAAgB;AAFJ,KAAhB;;AAKA,QAAG,KAAKN,QAAL,EAAH,EAAoB;AAChBM,MAAAA,OAAO,CAAC,eAAD,CAAP,GAA2B,WAAW,KAAKf,QAAL,EAAtC;AACH;;AAED,WAAOY,KAAK,CAACC,GAAD;AACRE,MAAAA;AADQ,OAELD,OAFK,EAAL,CAGJE,IAHI,CAGC,KAAKC,YAHN,EAIND,IAJM,CAIDE,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAJX,CAAP;AAKH;;AAEDF,EAAAA,YAAY,CAACC,QAAD,EAAW;AACnB,QAAGA,QAAQ,CAACE,MAAT,IAAmB,GAAnB,IAA0BF,QAAQ,CAACE,MAAT,GAAkB,GAA/C,EAAoD;AAChD,aAAOF,QAAP;AACH,KAFD,MAEO;AACH,UAAIV,KAAK,GAAG,IAAIa,KAAJ,CAAUH,QAAQ,CAACI,UAAnB,CAAZ;AACAd,MAAAA,KAAK,CAACU,QAAN,GAAiBA,QAAjB;AACA,YAAMV,KAAN;AACH;AACJ;;AAjE4B","sourcesContent":["import decode from 'jwt-decode';\n\nexport default class AuthService {\n    constructor() {\n        this.getProfile = this.getProfile.bind(this);\n    }\n\n    setToken(idToken) {\n        localStorage.setItem(\"id_token\", idToken);\n    }\n\n    getToken() {\n        return localStorage.getItem(\"id_token\");\n    }\n\n    isTokenExpired(token) {\n        try {\n            const decoded = decode(token);\n\n            if(decoded.exp < Date.now() / 1000) {\n                return true;\n            } else {\n                return false;\n            }\n        } catch(error) {\n            return false;\n        }\n    }\n\n    loggedIn() {\n        const token = this.getToken();\n        return !!token && !this.isTokenExpired(token);\n    }\n\n    logout() {\n        localStorage.removeItem(\"id_token\");\n    }\n\n    getProfile() {\n        return decode(this.getToken);\n    }\n\n    fetch(url, options) {\n        const headers = {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        }\n\n        if(this.loggedIn()) {\n            headers['Authorization'] = 'Bearer' + this.getToken();\n        }\n\n        return fetch(url, {\n            headers,\n            ...options\n        }).then(this._checkStatus)\n        .then(response => response.json());\n    }\n\n    _checkStatus(response) {\n        if(response.status >= 200 && response.status < 300) {\n            return response\n        } else {\n            var error = new Error(response.statusText);\n            error.response = response;\n            throw error;\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}