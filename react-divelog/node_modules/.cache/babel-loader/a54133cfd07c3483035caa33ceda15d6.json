{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/divelog/react-divelog/src/components/twitter/twitter-messages/TwitterMessagesInbox.js\";\nimport React from 'react';\nimport AuthService from '../../../util/AuthService';\nimport TwitterConversationContact from './TwitterConversationContact';\nimport $ from 'jquery';\nimport TwitterMessagesSearch from './TwitterMessagesSearch';\n\nclass TwitterMessagesInbox extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      conversations: [],\n      isConversationsRetrieved: false,\n      copyOfConversations: []\n    };\n    this.Auth = new AuthService();\n    this.copyOfConversations = [];\n    this.renderConversations = this.renderConversations.bind(this);\n    this.searchInList = this.searchInList.bind(this);\n    this.retrieveConversations = this.retrieveConversations.bind(this);\n    this.setIsConversationRetrieved = this.setIsConversationRetrieved.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      isLoading: true\n    }, () => {\n      let jwtToken = this.Auth.getRightSocialToken();\n      fetch(\"/twitter/direct/messages/\".concat(jwtToken), {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      }).then(response => response.json()).then(json => {\n        json.map((item, index) => {\n          const element = {\n            recipientId: item.recipientId,\n            senderId: item.senderId,\n            name: item.name,\n            screenName: item.screenName,\n            createdAt: item.createdAt,\n            text: item.text,\n            pictureUrl: item.pictureUrl\n          };\n          this.setState({\n            conversations: this.state.conversations.concat(element)\n          });\n        });\n        this.setState({\n          isConversationsRetrieved: true\n        }, () => {\n          this.setState({\n            isLoading: false\n          });\n          this.copyOfConversations = this.state.conversations.map(x => x);\n          $(\".twitter-messages-list-persons-spinner\").css({\n            display: \"block\"\n          });\n        });\n      });\n    });\n  }\n\n  renderConversations() {\n    return this.state.conversations.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt)).map((conversation, index) => {\n      return React.createElement(TwitterConversationContact, {\n        recipientId: conversation.recipientId,\n        senderId: conversation.senderId,\n        name: conversation.name,\n        screenName: conversation.screenName,\n        createdAt: conversation.createdAt,\n        text: conversation.text,\n        pictureUrl: conversation.pictureUrl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      });\n    });\n  }\n\n  searchInList(searchInput) {\n    this.setState({\n      isConversationsRetrieved: true\n    }, () => {\n      return this.state.conversations.map((conversation, index) => {\n        if (conversation.name.includes(searchInput) || conversation.screenName.includes(searchInput)) {\n          this.setState({\n            conversations: this.state.conversations.filter((item, i) => i === index)\n          });\n        }\n      });\n    });\n    return null;\n  }\n\n  retrieveConversations() {\n    return this.copyOfConversations.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt)).map((conversation, index) => {\n      return React.createElement(TwitterConversationContact, {\n        recipientId: conversation.recipientId,\n        senderId: conversation.senderId,\n        name: conversation.name,\n        screenName: conversation.screenName,\n        createdAt: conversation.createdAt,\n        text: conversation.text,\n        pictureUrl: conversation.pictureUrl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      });\n    });\n  }\n\n  setIsConversationRetrieved(value) {\n    this.setState({\n      isConversationsRetrieved: value\n    });\n  }\n\n  render() {\n    let isConversationsRetrieved = this.state.isConversationsRetrieved;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(TwitterMessagesSearch, {\n      searchInList: this.searchInList,\n      retrieveConversations: this.retrieveConversations,\n      setIsConversationRetrieved: this.setIsConversationRetrieved,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"twitter-messages-list-persons-spinner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"list-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, isConversationsRetrieved && this.renderConversations(), !isConversationsRetrieved && this.retrieveConversations()), isLoading && React.createElement(\"div\", {\n      className: \"spinner-border text-primary\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      class: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Loading...\"))));\n  }\n\n}\n\nexport default TwitterMessagesInbox;","map":{"version":3,"sources":["/home/huber/Pulpit/divelog/react-divelog/src/components/twitter/twitter-messages/TwitterMessagesInbox.js"],"names":["React","AuthService","TwitterConversationContact","$","TwitterMessagesSearch","TwitterMessagesInbox","Component","constructor","state","conversations","isConversationsRetrieved","copyOfConversations","Auth","renderConversations","bind","searchInList","retrieveConversations","setIsConversationRetrieved","componentDidMount","setState","isLoading","jwtToken","getRightSocialToken","fetch","method","headers","then","response","json","map","item","index","element","recipientId","senderId","name","screenName","createdAt","text","pictureUrl","concat","x","css","display","sort","a","b","Date","conversation","searchInput","includes","filter","i","value","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport AuthService from '../../../util/AuthService';\nimport TwitterConversationContact from './TwitterConversationContact';\nimport $ from 'jquery';\nimport TwitterMessagesSearch from './TwitterMessagesSearch';\n\nclass TwitterMessagesInbox extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            conversations: [],\n            isConversationsRetrieved: false,\n            copyOfConversations: []\n        }\n        this.Auth = new AuthService();\n        this.copyOfConversations = [];\n        this.renderConversations = this.renderConversations.bind(this);\n        this.searchInList = this.searchInList.bind(this);\n        this.retrieveConversations = this.retrieveConversations.bind(this);\n        this.setIsConversationRetrieved = this.setIsConversationRetrieved.bind(this);\n    }\n\n    componentDidMount() {\n        this.setState({ isLoading: true }, () => {\n            let jwtToken = this.Auth.getRightSocialToken();\n\n            fetch(`/twitter/direct/messages/${jwtToken}`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                }\n            }).then(response => response.json())\n            .then(json => {\n                json.map((item, index) => {\n                    const element = {\n                        recipientId: item.recipientId,\n                        senderId: item.senderId,\n                        name: item.name,\n                        screenName: item.screenName,\n                        createdAt: item.createdAt,\n                        text: item.text,\n                        pictureUrl: item.pictureUrl\n                    }\n                    this.setState({ conversations: this.state.conversations.concat(element) });\n                });\n                this.setState({ isConversationsRetrieved: true }, () => {\n                    this.setState({ isLoading: false });\n                    this.copyOfConversations = this.state.conversations.map((x) => x);\n                    $(\".twitter-messages-list-persons-spinner\").css({ display: \"block\" });\n                });\n            })\n        });\n       \n    }\n\n    renderConversations() {\n        return this.state.conversations\n            .sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt))\n            .map((conversation, index) => {\n            return (\n                <TwitterConversationContact \n                    recipientId={conversation.recipientId}\n                    senderId={conversation.senderId}\n                    name={conversation.name}\n                    screenName={conversation.screenName}\n                    createdAt={conversation.createdAt}\n                    text={conversation.text}\n                    pictureUrl={conversation.pictureUrl}\n                />\n            );\n        });\n    }\n\n    searchInList(searchInput) {\n        this.setState({ isConversationsRetrieved: true }, () => {\n            return this.state.conversations.map((conversation, index) => {\n                if(conversation.name.includes(searchInput) || conversation.screenName.includes(searchInput)) {\n                    this.setState({ conversations: this.state.conversations.filter((item, i) => i === index)});\n                }\n            });\n        });\n        return null;\n    }\n\n    retrieveConversations() {\n        return this.copyOfConversations\n            .sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt))\n            .map((conversation, index) => {\n            return (\n                <TwitterConversationContact \n                    recipientId={conversation.recipientId}\n                    senderId={conversation.senderId}\n                    name={conversation.name}\n                    screenName={conversation.screenName}\n                    createdAt={conversation.createdAt}\n                    text={conversation.text}\n                    pictureUrl={conversation.pictureUrl}\n                />\n            );\n        });\n    }\n\n    setIsConversationRetrieved(value) {\n        this.setState({ isConversationsRetrieved: value });\n    }\n\n    render() {\n        let isConversationsRetrieved = this.state.isConversationsRetrieved;\n        return (\n            <React.Fragment>\n                <TwitterMessagesSearch \n                    searchInList={this.searchInList}\n                    retrieveConversations={this.retrieveConversations}\n                    setIsConversationRetrieved={this.setIsConversationRetrieved}\n                />\n                <div className=\"twitter-messages-list-persons-spinner\">\n                    <ul className=\"list-group\">\n                        { isConversationsRetrieved && this.renderConversations() }\n                        { !isConversationsRetrieved && this.retrieveConversations() }\n                    </ul>\n                    { isLoading &&\n                        <div \n                            className='spinner-border text-primary' \n                            role='status'\n                        >\n                            <span class='sr-only'>\n                                Loading...\n                            </span>\n                        </div>\n                    }\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default TwitterMessagesInbox;"]},"metadata":{},"sourceType":"module"}