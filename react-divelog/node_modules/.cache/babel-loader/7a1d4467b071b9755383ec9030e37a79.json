{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/divelog/react-divelog/src/components/logbook/PDFTableButton.js\";\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport jsPDF from 'jspdf';\nimport divelogLogo from '../../img/logo.png';\nimport ConvertTime from '../../util/ConvertTime';\nimport $ from 'jquery';\nimport '../../css/PdfLogbook.css';\n\nclass PDFTableButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.specialElementHandlers = {\n      '#hubert': function (element, renderer) {\n        return true;\n      },\n      '.controls': function (element, renderer) {\n        return true;\n      }\n    };\n    this.state = {\n      partnerName: '',\n      partnerSurname: '',\n      marker: {},\n      entryTime: '',\n      exitTime: '',\n      averageDepth: 0.0,\n      maxDepth: 0.0,\n      visibility: 0.0,\n      waterTemperature: 0.0,\n      airTemperature: 0.0,\n      cylinderCapacity: '',\n      divingSuit: 'NONE',\n      waterType: 'NONE',\n      waterEntryType: 'NONE',\n      ballast: 0.0,\n      glovesType: 'NONE',\n      divingType: 'NONE',\n      comment: ''\n    };\n    this.ConvertTime = new ConvertTime();\n    this.onClick = this.onClick.bind(this);\n  }\n\n  renderDataForHTML() {\n    return React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"Hubert Struminski\");\n  }\n\n  onClick(e) {\n    e.preventDefault();\n    const id = this.props.id;\n    let jwtToken = localStorage.getItem(\"JwtToken\");\n    fetch(\"/pdf/logbook/\".concat(id, \"/\").concat(jwtToken), {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'content-type': 'application/json'\n      }\n    }).then(response => response.json()).then(jsonData => {\n      let time = this.ConvertTime.convertTime(jsonData.entryTime, jsonData.exitTime, false);\n      const markerElement = {\n        id: jsonData.marker.id,\n        name: jsonData.marker.name,\n        latitude: jsonData.marker.latitude,\n        longitude: jsonData.marker.longitude\n      };\n      this.setState({\n        partnerName: jsonData.partnerName,\n        partnerSurname: jsonData.partnerSurname,\n        marker: markerElement,\n        entryTime: time[0],\n        exitTime: time[1],\n        averageDepth: jsonData.averageDepth,\n        maxDepth: jsonData.maxDepth,\n        visibility: jsonData.visibility,\n        waterTemperature: jsonData.waterTemperature,\n        airTemperature: jsonData.airTemperature,\n        cylinderCapacity: jsonData.cylinderCapacity,\n        divingSuit: jsonData.divingSuit,\n        waterType: jsonData.waterType,\n        waterEntryType: jsonData.waterEntryType,\n        ballast: jsonData.ballast,\n        glovesType: jsonData.glovesType,\n        divingType: jsonData.divingType,\n        comment: jsonData.comment\n      }, () => {\n        let doc = new jsPDF({\n          orientation: \"p\",\n          unit: \"mm\"\n        });\n        let img = new Image();\n        img.src = divelogLogo;\n        let createdTimeDocument = generateDocumentAtTime();\n        doc.text(\"Divelog\", 18, 15);\n        doc.addImage(img, 'PNG', 15, 17, 25, 25);\n        doc.setFontSize(8);\n        doc.text(\"Generated by Divelog - \".concat(createdTimeDocument), 135, 15);\n        doc.setFontSize(15);\n        doc.text(\"Your dive - \".concat(this.state.entryTime), 70, 40);\n        doc.setFontSize(10);\n        doc.text(\"Partner's name: \".concat(this.state.partnerName), 15, 60);\n        doc.text(\"Partner's surname: \".concat(this.state.partnerSurname), 15, 67);\n        doc.text(\"Entry time: \".concat(this.state.entryTime), 15, 74);\n        doc.text(\"Exit time: \".concat(this.state.exitTime), 15, 81);\n        doc.text(\"Average depth: \".concat(this.state.averageDepth, \"m\"), 15, 88);\n        doc.text(\"Maximum depth: \".concat(this.state.maxDepth, \"m\"), 15, 95);\n        doc.text(\"Visibility: \".concat(this.state.visibility, \"m\"), 15, 102);\n        doc.text(\"Temperature of water: \".concat(this.state.waterTemperature, \"C\"), 15, 109);\n        doc.text(\"Temperature of air: \".concat(this.state.airTemperature, \"C\"), 15, 116);\n        doc.text(\"Cylinder capacity: \".concat(this.state.cylinderCapacity), 15, 123);\n        doc.text(\"Diving suit: \".concat(this.state.divingSuit), 15, 130);\n        doc.text(\"Water type: \".concat(this.state.waterType), 15, 137);\n        doc.text(\"Type of entry to water: \".concat(this.state.waterEntryType), 15, 144);\n        doc.text(\"Ballast: \".concat(this.state.ballast, \"kg\"), 15, 151);\n        doc.text(\"Type of gloves: \".concat(this.state.glovesType), 15, 158);\n        doc.text(\"Diving type: \".concat(this.state.divingType), 15, 165);\n        doc.text(\"Comment: \".concat(this.state.comment), 15, 172);\n        doc.text(\"Google map marker\", 80, 182);\n        doc.text(\"Name: \".concat(this.state.marker.name), 15, 192);\n        doc.text(\"Latitude: \".concat(this.state.marker.latitude), 15, 199);\n        doc.text(\"Longitude: \".concat(this.state.marker.longitude), 15, 206);\n        let googleStaticMap = new Image();\n        googleStaticMap.src = \"https://maps.googleapis.com/maps/api/staticmap?center=\".concat(this.state.marker.latitude, \",\").concat(this.state.marker.longitude, \"&zoom=11&size=640x300&markers=color:red%7Clabel:S%7C11211%7C11206%7C11222&key=AIzaSyBgb4kpatKEjsOGsxplxFyRfw1K_wGhLTo\");\n        doc.addImage(googleStaticMap, 'PNG', 15, 210, 185, 210); // doc.fromHTML($(\".pdf-logbook-container\").html(), 20, 20, { 'width': 500, 'elementHandlers': this.specialElementHandlers });\n\n        doc.save(\"pdf\");\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: this.onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"PDF\"), React.createElement(\"div\", {\n      className: \"pdf-logbook-container\",\n      style: {\n        display: 'none'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      style: {\n        fontSize: '25px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"Hubert Struminski\"), \"Partner's name: \", this.state.partnerName, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }), \"Partner's surname: \", this.state.partnerSurname, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }), \"Entry time: \", this.state.entryTime, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }), \"Exit time: \", this.state.exitTime, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }), \"Average depth: \", this.state.averageDepth, \"m\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), \"Maximum depth: \", this.state.maxDepth, \"m\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }), \"Visibility: \", this.state.visibility, \"m\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }), \"Temperature of water: \", this.state.waterTemperature, React.createElement(\"sup\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"o\"), \"C\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }), \"Temperature of air: \", this.state.airTemperature, React.createElement(\"sup\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, \"o\"), \"C\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), \"Cylinder capacity: \", this.state.cylinderCapacity, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }), \"Diving suit: \", this.state.divingSuit, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }), \"Water type: \", this.state.waterType, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }), \"Entry type of water: \", this.state.waterEntryType, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), \"Gloves type: \", this.state.glovesType, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }), \"Ballast: \", this.state.ballast, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }), \"Diving type: \", this.state.divingType, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }), \"Comment: \", this.state.comment, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }), \"Name: \", this.state.marker.name, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }), \"Latitude: \", this.state.marker.latitude, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), \"Longitude: \", this.state.marker.longitude));\n  }\n\n}\n\nfunction generateDocumentAtTime() {\n  let createdAt = new Date();\n  let month = createdAt.getMonth();\n\n  if (month < 10) {\n    month = \"0\" + month;\n  }\n\n  let day = createdAt.getDay();\n\n  if (day < 10) {\n    day = \"0\" + day;\n  }\n\n  let hours = createdAt.getHours();\n\n  if (hours < 10) {\n    hours = \"0\" + hours;\n  }\n\n  let minutes = createdAt.getMinutes();\n\n  if (minutes < 10) {\n    minutes = \"0\" + minutes;\n  }\n\n  let seconds = createdAt.getSeconds();\n\n  if (seconds < 10) {\n    seconds = \"0\" + seconds;\n  }\n\n  return createdAt.getFullYear() + \"-\" + month + \"-\" + day + \" \" + hours + \":\" + minutes + \":\" + seconds;\n}\n\nexport default withTranslation(\"common\")(PDFTableButton);","map":{"version":3,"sources":["/home/huber/Pulpit/divelog/react-divelog/src/components/logbook/PDFTableButton.js"],"names":["React","withTranslation","jsPDF","divelogLogo","ConvertTime","$","PDFTableButton","Component","constructor","props","specialElementHandlers","element","renderer","state","partnerName","partnerSurname","marker","entryTime","exitTime","averageDepth","maxDepth","visibility","waterTemperature","airTemperature","cylinderCapacity","divingSuit","waterType","waterEntryType","ballast","glovesType","divingType","comment","onClick","bind","renderDataForHTML","e","preventDefault","id","jwtToken","localStorage","getItem","fetch","method","headers","then","response","json","jsonData","time","convertTime","markerElement","name","latitude","longitude","setState","doc","orientation","unit","img","Image","src","createdTimeDocument","generateDocumentAtTime","text","addImage","setFontSize","googleStaticMap","save","render","display","fontSize","createdAt","Date","month","getMonth","day","getDay","hours","getHours","minutes","getMinutes","seconds","getSeconds","getFullYear"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport jsPDF from 'jspdf';\nimport divelogLogo from '../../img/logo.png';\nimport ConvertTime from '../../util/ConvertTime';\nimport $ from 'jquery';\nimport '../../css/PdfLogbook.css';\n\nclass PDFTableButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            partnerName: '',\n            partnerSurname: '',\n            marker: {},\n            entryTime: '',\n            exitTime: '',\n            averageDepth: 0.0,\n            maxDepth: 0.0,\n            visibility: 0.0,\n            waterTemperature: 0.0,\n            airTemperature: 0.0,\n            cylinderCapacity: '',\n            divingSuit: 'NONE',\n            waterType: 'NONE',\n            waterEntryType: 'NONE',\n            ballast: 0.0,\n            glovesType: 'NONE',\n            divingType: 'NONE',\n            comment: ''\n        }\n        this.ConvertTime = new ConvertTime();\n        this.onClick = this.onClick.bind(this);\n    }\n\n    renderDataForHTML() {\n        return (\n            <h1>Hubert Struminski</h1>\n        );\n    }\n\n    onClick(e) {\n        e.preventDefault();\n\n        const id = this.props.id;\n        let jwtToken = localStorage.getItem(\"JwtToken\");\n\n        fetch(`/pdf/logbook/${id}/${jwtToken}`, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'content-type': 'application/json'\n            }\n        })\n        .then(response => response.json())\n        .then(jsonData => {\n            let time = this.ConvertTime.convertTime(jsonData.entryTime, jsonData.exitTime, false);\n\n            const markerElement = {\n                id: jsonData.marker.id,\n                name: jsonData.marker.name,\n                latitude: jsonData.marker.latitude,\n                longitude: jsonData.marker.longitude\n            }\n\n            this.setState({\n                partnerName: jsonData.partnerName,\n                partnerSurname: jsonData.partnerSurname,\n                marker: markerElement,\n                entryTime: time[0],\n                exitTime: time[1],\n                averageDepth: jsonData.averageDepth,\n                maxDepth: jsonData.maxDepth,\n                visibility: jsonData.visibility,\n                waterTemperature: jsonData.waterTemperature,\n                airTemperature: jsonData.airTemperature,\n                cylinderCapacity: jsonData.cylinderCapacity,\n                divingSuit: jsonData.divingSuit,\n                waterType: jsonData.waterType,\n                waterEntryType: jsonData.waterEntryType,\n                ballast: jsonData.ballast,\n                glovesType: jsonData.glovesType,\n                divingType: jsonData.divingType,\n                comment: jsonData.comment\n            }, () => {\n                let doc = new jsPDF({\n                    orientation: \"p\",\n                    unit: \"mm\",\n                });\n                let img = new Image();\n                img.src = divelogLogo;\n \n                let createdTimeDocument = generateDocumentAtTime();\n\n                doc.text(\"Divelog\", 18, 15);\n                doc.addImage(img, 'PNG', 15, 17, 25, 25);\n\n                doc.setFontSize(8);\n                doc.text(`Generated by Divelog - ${createdTimeDocument}`, 135, 15);\n\n                doc.setFontSize(15);\n                doc.text(`Your dive - ${this.state.entryTime}`, 70, 40);\n              \n                doc.setFontSize(10);\n                doc.text(`Partner's name: ${this.state.partnerName}`, 15, 60);\n                doc.text(`Partner's surname: ${this.state.partnerSurname}`, 15, 67);\n                doc.text(`Entry time: ${this.state.entryTime}`, 15, 74);\n                doc.text(`Exit time: ${this.state.exitTime}`, 15, 81);\n                doc.text(`Average depth: ${this.state.averageDepth}m`, 15, 88);\n                doc.text(`Maximum depth: ${this.state.maxDepth}m`, 15, 95);\n                doc.text(`Visibility: ${this.state.visibility}m`, 15, 102);\n                doc.text(`Temperature of water: ${this.state.waterTemperature}C`, 15, 109);\n                doc.text(`Temperature of air: ${this.state.airTemperature}C`, 15, 116);\n                doc.text(`Cylinder capacity: ${this.state.cylinderCapacity}`, 15, 123);\n                doc.text(`Diving suit: ${this.state.divingSuit}`, 15, 130);\n                doc.text(`Water type: ${this.state.waterType}`, 15, 137);\n                doc.text(`Type of entry to water: ${this.state.waterEntryType}`, 15, 144);\n                doc.text(`Ballast: ${this.state.ballast}kg`, 15, 151);\n                doc.text(`Type of gloves: ${this.state.glovesType}`, 15, 158);\n                doc.text(`Diving type: ${this.state.divingType}`, 15, 165);\n                doc.text(`Comment: ${this.state.comment}`, 15, 172);\n\n                doc.text(\"Google map marker\", 80, 182);\n                \n                doc.text(`Name: ${this.state.marker.name}`, 15, 192);\n                doc.text(`Latitude: ${this.state.marker.latitude}`, 15, 199);\n                doc.text(`Longitude: ${this.state.marker.longitude}`, 15, 206);\n\n                let googleStaticMap = new Image();\n                googleStaticMap.src = `https://maps.googleapis.com/maps/api/staticmap?center=${this.state.marker.latitude},${this.state.marker.longitude}&zoom=11&size=640x300&markers=color:red%7Clabel:S%7C11211%7C11206%7C11222&key=AIzaSyBgb4kpatKEjsOGsxplxFyRfw1K_wGhLTo`\n\n                doc.addImage(googleStaticMap, 'PNG', 15, 210, 185, 210);\n                // doc.fromHTML($(\".pdf-logbook-container\").html(), 20, 20, { 'width': 500, 'elementHandlers': this.specialElementHandlers });\n        \n                doc.save(\"pdf\");\n            });\n        }); \n    }\n\n    specialElementHandlers = {\n        '#hubert': function (element, renderer) {\n            return true;\n        },\n        '.controls': function (element, renderer) {\n            return true;\n        }\n    };\n\n    render() {\n        return (\n            <div>\n                <button className=\"btn btn-primary\"\n                    onClick={this.onClick}\n                >\n                    PDF\n                </button>\n\n                <div className=\"pdf-logbook-container\" style={{ display: 'none'}}>\n                    <div>\n                    </div>\n                    <p style={{ fontSize: '25px'}}>Hubert Struminski</p>\n                    Partner's name: {this.state.partnerName}\n                    <br />\n                    Partner's surname: {this.state.partnerSurname}\n                    <br />\n                    Entry time: {this.state.entryTime}\n                    <br />\n                    Exit time: {this.state.exitTime}\n                    <br />\n                    Average depth: {this.state.averageDepth}m\n                    <br />\n                    Maximum depth: {this.state.maxDepth}m\n                    <br />\n                    Visibility: {this.state.visibility}m\n                    <br />\n                    Temperature of water: {this.state.waterTemperature}<sup>o</sup>C\n                    <br />\n                    Temperature of air: {this.state.airTemperature}<sup>o</sup>C\n                    <br />\n                    Cylinder capacity: {this.state.cylinderCapacity}\n                    <br />\n                    Diving suit: {this.state.divingSuit}\n                    <br />\n                    Water type: {this.state.waterType}\n                    <br />\n                    Entry type of water: {this.state.waterEntryType}\n                    <br />\n                    Gloves type: {this.state.glovesType}\n                    <br />\n                    Ballast: {this.state.ballast}\n                    <br />\n                    Diving type: {this.state.divingType}\n                    <br />\n                    Comment: {this.state.comment}\n                    <br />\n                    Name: {this.state.marker.name}\n                    <br />\n                    Latitude: {this.state.marker.latitude}\n                    <br />\n                    Longitude: {this.state.marker.longitude}\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction generateDocumentAtTime() {\n    let createdAt = new Date();\n\n    let month = createdAt.getMonth();\n    if(month < 10) {\n        month = \"0\" + month;\n    }\n\n    let day = createdAt.getDay();\n    if(day < 10) {\n        day = \"0\" + day;\n    }\n\n    let hours = createdAt.getHours();\n    if(hours < 10) {\n        hours = \"0\" + hours;\n    }\n\n    let minutes = createdAt.getMinutes();\n    if(minutes< 10) {\n        minutes = \"0\" + minutes;\n    }\n\n    let seconds = createdAt.getSeconds();\n    if(seconds < 10) {\n        seconds = \"0\" + seconds;\n    }\n    return createdAt.getFullYear() + \"-\" + month + \"-\" + day + \" \" + hours + \":\" + minutes + \":\" + seconds;\n}\n\nexport default withTranslation(\"common\")(PDFTableButton);"]},"metadata":{},"sourceType":"module"}