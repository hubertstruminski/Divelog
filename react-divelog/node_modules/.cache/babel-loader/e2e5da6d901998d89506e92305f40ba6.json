{"ast":null,"code":"/*!\n * keygrip\n * Copyright(c) 2011-2014 Jed Schmidt\n * MIT Licensed\n */\n'use strict';\n\nvar crypto = require(\"crypto\");\n\nfunction Keygrip(keys, algorithm, encoding) {\n  if (!algorithm) algorithm = \"sha1\";\n  if (!encoding) encoding = \"base64\";\n  if (!(this instanceof Keygrip)) return new Keygrip(keys, algorithm, encoding);\n\n  if (!keys || !(0 in keys)) {\n    throw new Error(\"Keys must be provided.\");\n  }\n\n  function sign(data, key) {\n    return crypto.createHmac(algorithm, key).update(data).digest(encoding).replace(/\\/|\\+|=/g, function (x) {\n      return {\n        \"/\": \"_\",\n        \"+\": \"-\",\n        \"=\": \"\"\n      }[x];\n    });\n  }\n\n  this.sign = function (data) {\n    return sign(data, keys[0]);\n  };\n\n  this.verify = function (data, digest) {\n    return this.index(data, digest) > -1;\n  };\n\n  this.index = function (data, digest) {\n    for (var i = 0, l = keys.length; i < l; i++) {\n      if (constantTimeCompare(digest, sign(data, keys[i]))) return i;\n    }\n\n    return -1;\n  };\n}\n\nKeygrip.sign = Keygrip.verify = Keygrip.index = function () {\n  throw new Error(\"Usage: require('keygrip')(<array-of-keys>)\");\n}; //http://codahale.com/a-lesson-in-timing-attacks/\n\n\nvar constantTimeCompare = function (val1, val2) {\n  if (val1 == null && val2 != null) {\n    return false;\n  } else if (val2 == null && val1 != null) {\n    return false;\n  } else if (val1 == null && val2 == null) {\n    return true;\n  }\n\n  if (val1.length !== val2.length) {\n    return false;\n  }\n\n  var result = 0;\n\n  for (var i = 0; i < val1.length; i++) {\n    result |= val1.charCodeAt(i) ^ val2.charCodeAt(i); //Don't short circuit\n  }\n\n  return result === 0;\n};\n\nmodule.exports = Keygrip;","map":null,"metadata":{},"sourceType":"script"}