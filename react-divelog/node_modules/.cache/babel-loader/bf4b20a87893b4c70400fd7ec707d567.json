{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/divelog/react-divelog/src/components/twitter/twitter-messages/Conversation.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport AuthService from '../../../util/AuthService';\n\nclass Conversation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.Auth = new AuthService();\n  }\n\n  componentDidMount() {\n    console.log(this.props.recipientId);\n    console.log(this.props.senderId);\n    const DM = {\n      recipientId: this.props.recipientId,\n      senderId: this.props.senderId\n    };\n    let jwtToken = this.Auth.getRightSocialToken();\n    axios({\n      url: \"/twitter/direct/messages/specified/person/\".concat(jwtToken),\n      method: 'POST',\n      data: DM,\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      console.log(response.data);\n      response.data.map((message, index) => {\n        let urlEntities = [];\n        message.urlEntities.map(urlEntity => {\n          let element = urlEntity.expandedURL;\n          urlEntities.push(element);\n        }); // message.mediaEntities.map((mediaEntity) => {\n        //     let element = mediaEntity\n        // });\n\n        const singleMessage = {\n          id: message.id,\n          createdAt: message.createdAt,\n          recipientId: message.recipientId,\n          senderId: message.senderId,\n          text: message.text\n        };\n      });\n    });\n  }\n\n  render() {\n    let isLoadingConversation = this.props.isLoadingConversation;\n    return React.createElement(React.Fragment, null, isLoadingConversation && React.createElement(\"div\", {\n      className: \"spinner-border text-primary\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      class: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Loading...\")));\n  }\n\n}\n\nexport default Conversation;","map":{"version":3,"sources":["/home/huber/Pulpit/divelog/react-divelog/src/components/twitter/twitter-messages/Conversation.js"],"names":["React","axios","AuthService","Conversation","Component","constructor","props","Auth","componentDidMount","console","log","recipientId","senderId","DM","jwtToken","getRightSocialToken","url","method","data","headers","then","response","map","message","index","urlEntities","urlEntity","element","expandedURL","push","singleMessage","id","createdAt","text","render","isLoadingConversation"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;;AAEA,MAAMC,YAAN,SAA2BH,KAAK,CAACI,SAAjC,CAA2C;AACvCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,IAAL,GAAY,IAAIL,WAAJ,EAAZ;AACH;;AAEDM,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,KAAL,CAAWK,WAAvB;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,KAAL,CAAWM,QAAvB;AAEA,UAAMC,EAAE,GAAG;AACPF,MAAAA,WAAW,EAAE,KAAKL,KAAL,CAAWK,WADjB;AAEPC,MAAAA,QAAQ,EAAE,KAAKN,KAAL,CAAWM;AAFd,KAAX;AAKA,QAAIE,QAAQ,GAAG,KAAKP,IAAL,CAAUQ,mBAAV,EAAf;AAEAd,IAAAA,KAAK,CAAC;AACFe,MAAAA,GAAG,sDAA+CF,QAA/C,CADD;AAEFG,MAAAA,MAAM,EAAE,MAFN;AAGFC,MAAAA,IAAI,EAAEL,EAHJ;AAIFM,MAAAA,OAAO,EAAE;AACL,kBAAU,kBADL;AAEL,wBAAgB;AAFX;AAJP,KAAD,CAAL,CAQGC,IARH,CAQQC,QAAQ,IAAI;AAChBZ,MAAAA,OAAO,CAACC,GAAR,CAAYW,QAAQ,CAACH,IAArB;AACAG,MAAAA,QAAQ,CAACH,IAAT,CAAcI,GAAd,CAAkB,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAClC,YAAIC,WAAW,GAAG,EAAlB;AAEAF,QAAAA,OAAO,CAACE,WAAR,CAAoBH,GAApB,CAAyBI,SAAD,IAAe;AACnC,cAAIC,OAAO,GAAGD,SAAS,CAACE,WAAxB;AACAH,UAAAA,WAAW,CAACI,IAAZ,CAAiBF,OAAjB;AACH,SAHD,EAHkC,CAQlC;AACA;AACA;;AACA,cAAMG,aAAa,GAAG;AAClBC,UAAAA,EAAE,EAAER,OAAO,CAACQ,EADM;AAElBC,UAAAA,SAAS,EAAET,OAAO,CAACS,SAFD;AAGlBrB,UAAAA,WAAW,EAAEY,OAAO,CAACZ,WAHH;AAIlBC,UAAAA,QAAQ,EAAEW,OAAO,CAACX,QAJA;AAKlBqB,UAAAA,IAAI,EAAEV,OAAO,CAACU;AALI,SAAtB;AAQH,OAnBD;AAoBH,KA9BD;AA+BH;;AAEDC,EAAAA,MAAM,GAAG;AACL,QAAIC,qBAAqB,GAAG,KAAK7B,KAAL,CAAW6B,qBAAvC;AACA,WACI,0CACMA,qBAAqB,IACnB;AACI,MAAA,SAAS,EAAC,6BADd;AAEI,MAAA,IAAI,EAAC,QAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAII;AAAM,MAAA,KAAK,EAAC,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJJ,CAFR,CADJ;AAcH;;AAlEsC;;AAqE3C,eAAehC,YAAf","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport AuthService from '../../../util/AuthService';\n\nclass Conversation extends React.Component {\n    constructor(props) {\n        super(props);\n        this.Auth = new AuthService();\n    }\n\n    componentDidMount() {\n        console.log(this.props.recipientId);\n        console.log(this.props.senderId);\n\n        const DM = {\n            recipientId: this.props.recipientId,\n            senderId: this.props.senderId\n        }\n\n        let jwtToken = this.Auth.getRightSocialToken();\n\n        axios({\n            url: `/twitter/direct/messages/specified/person/${jwtToken}`,\n            method: 'POST',\n            data: DM,\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }\n        }).then(response => {\n            console.log(response.data);\n            response.data.map((message, index) => {\n                let urlEntities = [];\n\n                message.urlEntities.map((urlEntity) => {\n                    let element = urlEntity.expandedURL;\n                    urlEntities.push(element);\n                });\n\n                // message.mediaEntities.map((mediaEntity) => {\n                //     let element = mediaEntity\n                // });\n                const singleMessage = {\n                    id: message.id,\n                    createdAt: message.createdAt,\n                    recipientId: message.recipientId,\n                    senderId: message.senderId,\n                    text: message.text,\n\n                }\n            });\n        });\n    }\n\n    render() {\n        let isLoadingConversation = this.props.isLoadingConversation;\n        return (\n            <>\n                { isLoadingConversation &&\n                    <div \n                        className='spinner-border text-primary' \n                        role='status'\n                    >\n                        <span class='sr-only'>\n                            Loading...\n                        </span>\n                    </div>\n                }\n            </>\n        );\n    }\n}\n\nexport default Conversation;"]},"metadata":{},"sourceType":"module"}