{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/divelog/react-divelog/src/components/twitter/twitter-messages/SearchPeopleConversationModal.js\";\nimport React from 'react';\nimport '../../../css/twitter-messages/SearchPeopleConversationModal.css';\nimport AuthService from '../../../util/AuthService';\nimport TwitterConversationContact from './TwitterConversationContact';\nimport $ from 'jquery';\nimport TwitterMessagesSearch from './TwitterMessagesSearch';\nimport axios from 'axios';\n\nclass SearchPeopleConversationModal extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      contacts: [],\n      isLoading: true,\n      searchInput: ''\n    };\n    this.Auth = new AuthService(); // this.copyOfConversations = [];\n    // this.renderConversations = this.renderConversations.bind(this);\n    // this.searchInList = this.searchInList.bind(this);\n    // this.retrieveConversations = this.retrieveConversations.bind(this);\n\n    this.onClose = this.onClose.bind(this);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(e) {\n    this.setState({\n      searchInput: e.target.value\n    });\n  }\n\n  componentDidMount() {\n    let jwtToken = this.Auth.getRightSocialToken();\n    axios({\n      url: \"/twitter/direct/messages/search/people/\".concat(jwtToken),\n      method: 'POST',\n      data: this.state.searchInput,\n      headers: {\n        'content-type': 'application/json'\n      }\n    }).then(response => response.json()).then(json => {\n      console.log(json); // json.map((item, index) => {\n      // });\n    }); // fetch(`/twitter/direct/messages/${jwtToken}`, {\n    //     method: 'GET',\n    //     headers: {\n    //         'Accept': 'application/json',\n    //         'Content-Type': 'application/json'\n    //     }\n    // }).then(response => response.json())\n    // .then(json => {\n    //     json.map((item, index) => {\n    //         const element = {\n    //             recipientId: item.recipientId,\n    //             senderId: item.senderId,\n    //             name: item.name,\n    //             screenName: item.screenName,\n    //             createdAt: item.createdAt,\n    //             text: item.text,\n    //             pictureUrl: item.pictureUrl\n    //         }\n    //         this.setState({ conversations: this.state.conversations.concat(element) });\n    //     });\n    //     this.setState({ isConversationsRetrieved: true }, () => {\n    //         this.setState({ isLoading: false });\n    //         this.copyOfConversations = this.state.conversations.map((x) => x);\n    //         $(\".twitter-messages-search-people-modal-list-contacts\").css({ display: \"block\" });\n    //     });\n    // })\n  } // renderConversations() {\n  //     return this.state.conversations\n  //         .sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt))\n  //         .map((conversation, index) => {\n  //         return (\n  //             <TwitterConversationContact \n  //                 recipientId={conversation.recipientId}\n  //                 senderId={conversation.senderId}\n  //                 name={conversation.name}\n  //                 screenName={conversation.screenName}\n  //                 createdAt={conversation.createdAt}\n  //                 text={conversation.text}\n  //                 pictureUrl={conversation.pictureUrl}\n  //             />\n  //         );\n  //     });\n  // }\n  // searchInList(searchInput) {\n  //     this.setState({ \n  //         isConversationsRetrieved: true,\n  //         conversations: this.copyOfConversations.map((x) => x)\n  //     }, () => {\n  //         return this.state.conversations.map((conversation, index) => {\n  //             if(conversation.name.includes(searchInput) || conversation.screenName.includes(searchInput)) {\n  //                 this.setState({ conversations: this.state.conversations.filter((item, i) => i === index)});\n  //             }\n  //         });\n  //     });\n  //     return null;\n  // }\n  // retrieveConversations() {\n  //     return this.copyOfConversations\n  //         .sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt))\n  //         .map((conversation, index) => {\n  //         return (\n  //             <TwitterConversationContact \n  //                 recipientId={conversation.recipientId}\n  //                 senderId={conversation.senderId}\n  //                 name={conversation.name}\n  //                 screenName={conversation.screenName}\n  //                 createdAt={conversation.createdAt}\n  //                 text={conversation.text}\n  //                 pictureUrl={conversation.pictureUrl}\n  //             />\n  //         );\n  //     });\n  // }\n\n\n  onClose(e) {\n    e.preventDefault();\n    this.props.setIsNotVisibleModalToSearch();\n  }\n\n  render() {\n    let isLoading = this.state.isLoading;\n    let isConversationsRetrieved = this.state.isConversationsRetrieved;\n    return React.createElement(\"div\", {\n      className: \"twitter-messages-search-people-conversation-modal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-messages-search-people-conversation-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-messages-search-people-header-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fa fa-times twitter-messages-search-people-modal-close\",\n      onClick: this.onClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      style: {\n        color: 'black',\n        fontWeight: 700,\n        display: 'block',\n        paddingLeft: '10%',\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"New message\")), React.createElement(\"div\", {\n      className: \"twitter-messages-search-people-header-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"twitter-messages-search-people-modal-btn-next\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Next\"))), React.createElement(\"input\", {\n      className: \"twitter-messages-search-people-input\",\n      type: \"text\",\n      placeholder: \"Search people\",\n      value: this.state.searchInput,\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"twitter-messages-search-people-info-icon-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-user twitter-messages-search-people-icon-user\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }), \" You follow each other\"), React.createElement(\"div\", {\n      className: \"twitter-messages-search-people-modal-list-contacts\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, isLoading && React.createElement(\"div\", {\n      className: \"spinner-border text-primary\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      class: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \"Loading...\"))));\n  }\n\n}\n\nexport default SearchPeopleConversationModal;","map":{"version":3,"sources":["/home/huber/Pulpit/divelog/react-divelog/src/components/twitter/twitter-messages/SearchPeopleConversationModal.js"],"names":["React","AuthService","TwitterConversationContact","$","TwitterMessagesSearch","axios","SearchPeopleConversationModal","Component","constructor","state","contacts","isLoading","searchInput","Auth","onClose","bind","onChange","e","setState","target","value","componentDidMount","jwtToken","getRightSocialToken","url","method","data","headers","then","response","json","console","log","preventDefault","props","setIsNotVisibleModalToSearch","render","isConversationsRetrieved","color","fontWeight","display","paddingLeft","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,iEAAP;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,0BAAP,MAAuC,8BAAvC;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,6BAAN,SAA4CN,KAAK,CAACO,SAAlD,CAA4D;AACxDC,EAAAA,WAAW,GAAG;AACV;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAE,EADD;AAETC,MAAAA,SAAS,EAAE,IAFF;AAGTC,MAAAA,WAAW,EAAE;AAHJ,KAAb;AAKA,SAAKC,IAAL,GAAY,IAAIZ,WAAJ,EAAZ,CARU,CASV;AACA;AACA;AACA;;AACA,SAAKa,OAAL,GAAe,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf;AACA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcD,IAAd,CAAmB,IAAnB,CAAhB;AACH;;AAEDC,EAAAA,QAAQ,CAACC,CAAD,EAAI;AACR,SAAKC,QAAL,CAAc;AAAEN,MAAAA,WAAW,EAAEK,CAAC,CAACE,MAAF,CAASC;AAAxB,KAAd;AACH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,QAAIC,QAAQ,GAAG,KAAKT,IAAL,CAAUU,mBAAV,EAAf;AAEAlB,IAAAA,KAAK,CAAC;AACFmB,MAAAA,GAAG,mDAA4CF,QAA5C,CADD;AAEFG,MAAAA,MAAM,EAAE,MAFN;AAGFC,MAAAA,IAAI,EAAE,KAAKjB,KAAL,CAAWG,WAHf;AAIFe,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AAJP,KAAD,CAAL,CAOGC,IAPH,CAOQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAPpB,EAQCF,IARD,CAQME,IAAI,IAAI;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EADU,CAEV;AAEA;AACH,KAbD,EAHgB,CAiBhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GAjEuD,CAmExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAhB,EAAAA,OAAO,CAACG,CAAD,EAAI;AACPA,IAAAA,CAAC,CAACgB,cAAF;AACA,SAAKC,KAAL,CAAWC,4BAAX;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,QAAIzB,SAAS,GAAG,KAAKF,KAAL,CAAWE,SAA3B;AACA,QAAI0B,wBAAwB,GAAG,KAAK5B,KAAL,CAAW4B,wBAA1C;AACA,WACI;AAAK,MAAA,SAAS,EAAC,mDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,oDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,4CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AACI,MAAA,SAAS,EAAC,wDADd;AAEI,MAAA,OAAO,EAAE,KAAKvB,OAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAKI;AAAM,MAAA,KAAK,EAAE;AAAEwB,QAAAA,KAAK,EAAE,OAAT;AAAkBC,QAAAA,UAAU,EAAE,GAA9B;AAAmCC,QAAAA,OAAO,EAAE,OAA5C;AAAqDC,QAAAA,WAAW,EAAE,KAAlE;AAAyEC,QAAAA,KAAK,EAAE;AAAhF,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBALJ,CADJ,EAQI;AAAK,MAAA,SAAS,EAAC,6CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAQ,MAAA,SAAS,EAAC,+CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,CARJ,CADJ,EAaI;AACI,MAAA,SAAS,EAAC,sCADd;AAEI,MAAA,IAAI,EAAC,MAFT;AAGI,MAAA,WAAW,EAAC,eAHhB;AAII,MAAA,KAAK,EAAE,KAAKjC,KAAL,CAAWG,WAJtB;AAKI,MAAA,QAAQ,EAAE,KAAKI,QALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbJ,EAoBI;AAAK,MAAA,SAAS,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApBJ,EAqBI;AAAK,MAAA,SAAS,EAAC,gDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAG,MAAA,SAAS,EAAC,sDAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,2BArBJ,EAwBI;AAAK,MAAA,SAAS,EAAC,oDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACML,SAAS,IACP;AACI,MAAA,SAAS,EAAC,6BADd;AAEI,MAAA,IAAI,EAAC,QAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAII;AAAM,MAAA,KAAK,EAAC,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJJ,CAFR,CAxBJ,CADJ;AAuCH;;AArKuD;;AAwK5D,eAAeL,6BAAf","sourcesContent":["import React from 'react';\nimport '../../../css/twitter-messages/SearchPeopleConversationModal.css';\nimport AuthService from '../../../util/AuthService';\nimport TwitterConversationContact from './TwitterConversationContact';\nimport $ from 'jquery';\nimport TwitterMessagesSearch from './TwitterMessagesSearch';\nimport axios from 'axios';\n\nclass SearchPeopleConversationModal extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            contacts: [],\n            isLoading: true,\n            searchInput: ''\n        }\n        this.Auth = new AuthService();\n        // this.copyOfConversations = [];\n        // this.renderConversations = this.renderConversations.bind(this);\n        // this.searchInList = this.searchInList.bind(this);\n        // this.retrieveConversations = this.retrieveConversations.bind(this);\n        this.onClose = this.onClose.bind(this);\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange(e) {\n        this.setState({ searchInput: e.target.value });\n    }\n\n    componentDidMount() {\n        let jwtToken = this.Auth.getRightSocialToken();\n\n        axios({\n            url: `/twitter/direct/messages/search/people/${jwtToken}`,\n            method: 'POST',\n            data: this.state.searchInput,\n            headers: {\n                'content-type': 'application/json'\n            }\n        }).then(response => response.json())\n        .then(json => {\n            console.log(json);\n            // json.map((item, index) => {\n                \n            // });\n        });\n        // fetch(`/twitter/direct/messages/${jwtToken}`, {\n        //     method: 'GET',\n        //     headers: {\n        //         'Accept': 'application/json',\n        //         'Content-Type': 'application/json'\n        //     }\n        // }).then(response => response.json())\n        // .then(json => {\n        //     json.map((item, index) => {\n        //         const element = {\n        //             recipientId: item.recipientId,\n        //             senderId: item.senderId,\n        //             name: item.name,\n        //             screenName: item.screenName,\n        //             createdAt: item.createdAt,\n        //             text: item.text,\n        //             pictureUrl: item.pictureUrl\n        //         }\n        //         this.setState({ conversations: this.state.conversations.concat(element) });\n        //     });\n        //     this.setState({ isConversationsRetrieved: true }, () => {\n        //         this.setState({ isLoading: false });\n        //         this.copyOfConversations = this.state.conversations.map((x) => x);\n        //         $(\".twitter-messages-search-people-modal-list-contacts\").css({ display: \"block\" });\n        //     });\n        // })\n    }\n\n    // renderConversations() {\n    //     return this.state.conversations\n    //         .sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt))\n    //         .map((conversation, index) => {\n    //         return (\n    //             <TwitterConversationContact \n    //                 recipientId={conversation.recipientId}\n    //                 senderId={conversation.senderId}\n    //                 name={conversation.name}\n    //                 screenName={conversation.screenName}\n    //                 createdAt={conversation.createdAt}\n    //                 text={conversation.text}\n    //                 pictureUrl={conversation.pictureUrl}\n    //             />\n    //         );\n    //     });\n    // }\n\n    // searchInList(searchInput) {\n    //     this.setState({ \n    //         isConversationsRetrieved: true,\n    //         conversations: this.copyOfConversations.map((x) => x)\n        \n    //     }, () => {\n    //         return this.state.conversations.map((conversation, index) => {\n    //             if(conversation.name.includes(searchInput) || conversation.screenName.includes(searchInput)) {\n    //                 this.setState({ conversations: this.state.conversations.filter((item, i) => i === index)});\n    //             }\n    //         });\n    //     });\n    //     return null;\n    // }\n\n    // retrieveConversations() {\n    //     return this.copyOfConversations\n    //         .sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt))\n    //         .map((conversation, index) => {\n    //         return (\n    //             <TwitterConversationContact \n    //                 recipientId={conversation.recipientId}\n    //                 senderId={conversation.senderId}\n    //                 name={conversation.name}\n    //                 screenName={conversation.screenName}\n    //                 createdAt={conversation.createdAt}\n    //                 text={conversation.text}\n    //                 pictureUrl={conversation.pictureUrl}\n    //             />\n    //         );\n    //     });\n    // }\n\n    onClose(e) {\n        e.preventDefault();\n        this.props.setIsNotVisibleModalToSearch();\n    }\n\n    render() {\n        let isLoading = this.state.isLoading;\n        let isConversationsRetrieved = this.state.isConversationsRetrieved;\n        return (\n            <div className=\"twitter-messages-search-people-conversation-modal\">\n                <div className=\"twitter-messages-search-people-conversation-header\">\n                    <div className=\"twitter-messages-search-people-header-left\">\n                        <i \n                            className=\"fa fa-times twitter-messages-search-people-modal-close\"\n                            onClick={this.onClose}\n                        ></i>\n                        <span style={{ color: 'black', fontWeight: 700, display: 'block', paddingLeft: '10%', width: '100%' }}>New message</span>\n                    </div>\n                    <div className=\"twitter-messages-search-people-header-right\">\n                        <button className=\"twitter-messages-search-people-modal-btn-next\">Next</button>\n                    </div>\n                </div>\n                <input \n                    className=\"twitter-messages-search-people-input\" \n                    type=\"text\" \n                    placeholder=\"Search people\"\n                    value={this.state.searchInput}\n                    onChange={this.onChange}\n                />\n                <div className=\"\"></div>\n                <div className=\"twitter-messages-search-people-info-icon-title\">\n                    <i className=\"fas fa-user twitter-messages-search-people-icon-user\"></i> You follow each other\n                </div>\n                <div className=\"twitter-messages-search-people-modal-list-contacts\">\n                    { isLoading && \n                        <div \n                            className='spinner-border text-primary' \n                            role='status'\n                        >\n                            <span class='sr-only'>\n                                Loading...\n                            </span>\n                        </div>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default SearchPeopleConversationModal;"]},"metadata":{},"sourceType":"module"}