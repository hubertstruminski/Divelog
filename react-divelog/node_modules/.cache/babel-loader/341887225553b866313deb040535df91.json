{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/divelog/react-divelog/src/components/forum/TopicWithPosts.js\";\nimport React from 'react';\nimport '../../css/TopicWithPosts.css';\nimport ConvertTime from '../../util/ConvertTime';\nimport AddPosts from '../forum/AddPosts';\nimport ReactPlayer from 'react-player';\nimport Post from './Post';\nimport Pagination from 'react-js-pagination';\n\nclass TopicWithPosts extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mainPost: {},\n      isRetrieved: false,\n      posts: [],\n      isOwner: false,\n      email: '',\n      isUpdatingPost: false,\n      activePage: 1,\n      itemPerPage: 2\n    };\n    this.files = [];\n    this.ConvertTime = new ConvertTime();\n    this.addImages = this.addImages.bind(this);\n    this.addVideos = this.addVideos.bind(this);\n    this.addPosts = this.addPosts.bind(this);\n    this.fetchTopicAndPosts = this.fetchTopicAndPosts.bind(this);\n  }\n\n  componentDidMount() {\n    let id = this.props.match.params.id;\n    fetch(\"/get/topic/posts/\".concat(id), {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'content-type': 'application/json'\n      }\n    }).then(response => response.json()).then(jsonData => {\n      this.files = [];\n      jsonData.files.map((file, index) => {\n        const element = {\n          id: file.id,\n          objectId: file.objectId,\n          url: file.url,\n          size: file.size,\n          name: file.name,\n          type: file.type\n        };\n        this.files.push(element);\n      });\n      jsonData.posts.map((post, index) => {\n        let files = [];\n        post.files.map((file, index) => {\n          const element = {\n            id: file.id,\n            objectId: file.objectId,\n            url: file.url,\n            size: file.size,\n            name: file.name,\n            type: file.type\n          };\n          files.push(element);\n        });\n        const element = {\n          id: post.id,\n          message: post.message,\n          createdAt: this.ConvertTime.convertTime(post.createdAt, null, false),\n          files: files,\n          user: post.user\n        };\n        this.setState({\n          posts: this.state.posts.concat(element)\n        });\n      });\n      const element = {\n        title: jsonData.title,\n        message: jsonData.message,\n        createdAt: this.ConvertTime.convertTime(jsonData.createdAt, null, false)[0],\n        owner: jsonData.user.name,\n        pictureUrl: jsonData.user.pictureUrl,\n        files: this.files\n      };\n      this.setState({\n        mainPost: element,\n        isRetrieved: true\n      }, () => {\n        let jwtToken = localStorage.getItem(\"JwtToken\");\n        fetch(\"/getuserdata/\".concat(jwtToken), {\n          method: 'GET',\n          headers: {\n            'content-type': 'application/json'\n          }\n        }).then(response => response.json()).then(jsonData => {\n          this.setState({\n            email: jsonData.email\n          }, () => {\n            this.state.posts.map((post, index) => {\n              if (post.user.email === this.state.email) {\n                this.setState({\n                  isOwner: true\n                });\n              }\n            });\n          });\n        });\n      });\n    });\n  }\n\n  fetchTopicAndPosts() {\n    let id = this.props.match.params.id;\n    this.setState({\n      mainPost: {},\n      posts: [],\n      isRetrieved: false,\n      isOwner: false,\n      email: ''\n    }, () => {\n      fetch(\"/get/topic/posts/\".concat(id), {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json, text/plain, */*',\n          'content-type': 'application/json'\n        }\n      }).then(response => response.json()).then(jsonData => {\n        this.files = [];\n        jsonData.files.map((file, index) => {\n          const element = {\n            id: file.id,\n            objectId: file.objectId,\n            url: file.url,\n            size: file.size,\n            name: file.name,\n            type: file.type\n          };\n          this.files.push(element);\n        });\n        jsonData.posts.map((post, index) => {\n          let files = [];\n          post.files.map((file, index) => {\n            const element = {\n              id: file.id,\n              objectId: file.objectId,\n              url: file.url,\n              size: file.size,\n              name: file.name,\n              type: file.type\n            };\n            files.push(element);\n          });\n          const element = {\n            id: post.id,\n            message: post.message,\n            createdAt: this.ConvertTime.convertTime(post.createdAt, null, false),\n            files: files,\n            user: post.user\n          };\n          this.setState({\n            posts: this.state.posts.concat(element)\n          });\n        });\n        const element = {\n          title: jsonData.title,\n          message: jsonData.message,\n          createdAt: this.ConvertTime.convertTime(jsonData.createdAt, null, false)[0],\n          owner: jsonData.user.name,\n          pictureUrl: jsonData.user.pictureUrl,\n          files: this.files\n        };\n        this.setState({\n          mainPost: element,\n          isRetrieved: true\n        }, () => {\n          let jwtToken = localStorage.getItem(\"JwtToken\");\n          fetch(\"/getuserdata/\".concat(jwtToken), {\n            method: 'GET',\n            headers: {\n              'content-type': 'application/json'\n            }\n          }).then(response => response.json()).then(jsonData => {\n            this.setState({\n              email: jsonData.email\n            }, () => {\n              this.state.posts.map((post, index) => {\n                if (post.user.email === this.state.email) {\n                  this.setState({\n                    isOwner: true\n                  });\n                }\n              });\n            });\n          });\n        });\n      });\n    });\n  }\n\n  addImages() {\n    return this.state.mainPost.files.map((file, index) => {\n      if (file.type.includes('image')) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 213\n          },\n          __self: this\n        }, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 214\n          },\n          __self: this\n        }), React.createElement(\"img\", {\n          src: file.url,\n          alt: file.name,\n          className: \"attachment-images\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 215\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 220\n          },\n          __self: this\n        }), file.name, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 222\n          },\n          __self: this\n        }));\n      }\n    });\n  }\n\n  addVideos() {\n    return this.state.mainPost.files.map((file, index) => {\n      if (file.type.includes('video')) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 233\n          },\n          __self: this\n        }, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 234\n          },\n          __self: this\n        }), React.createElement(ReactPlayer, {\n          url: file.url,\n          playing: true,\n          controls: \"true\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 235\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 240\n          },\n          __self: this\n        }), file.name, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 242\n          },\n          __self: this\n        }));\n      }\n    });\n  }\n\n  addPosts() {\n    let count = 0;\n    return this.state.posts.map((post, index) => {\n      return React.createElement(Post, {\n        id: post.id,\n        counter: count++,\n        message: post.message,\n        createdAt: post.createdAt,\n        files: post.files,\n        user: post.user,\n        fetchTopicAndPosts: this.fetchTopicAndPosts,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      });\n    });\n  }\n\n  handlePageChange(pageNumber) {\n    this.setState({\n      activePage: pageNumber\n    });\n  }\n\n  render() {\n    let isRetrieved = this.state.isRetrieved;\n    let isOwner = this.state.isOwner;\n    var indexOfLastTodo = this.state.activePage * this.state.itemPerPage;\n    var indexOfFirstTodo = indexOfLastTodo - this.state.itemPerPage;\n    var renderedProjects = this.state.posts.slice(indexOfFirstTodo, indexOfLastTodo);\n    var listItems = renderedProjects.map((post, index) => {\n      return React.createElement(Post, {\n        id: post.id,\n        counter: count++,\n        message: post.message,\n        createdAt: post.createdAt,\n        files: post.files,\n        user: post.user,\n        fetchTopicAndPosts: this.fetchTopicAndPosts,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      });\n    });\n    return React.createElement(\"div\", {\n      className: \"topic-posts-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"main-post-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"main-post-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"main-post-grid-one\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"main-post-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    }, this.state.mainPost.createdAt), React.createElement(\"div\", {\n      className: \"main-post-avatar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: this.state.mainPost.pictureUrl,\n      alt: \"Avatar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"main-post-footer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, this.state.mainPost.owner)), React.createElement(\"div\", {\n      className: \"main-post-grid-two\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"main-post-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, this.state.mainPost.title), React.createElement(\"div\", {\n      className: \"main-post-message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, \"markerID = this.props.id;      \", this.state.mainPost.message), React.createElement(\"div\", {\n      className: \"main-post-attachments\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, isRetrieved && this.addImages(), isRetrieved && this.addVideos()), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, isOwner && React.createElement(React.Fragment, null, React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"btn btn-warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, \"EDIT\")))))), React.createElement(\"div\", {\n      className: \"line-break-posts\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, listItems, React.createElement(Pagination, {\n      activePage: this.state.activePage,\n      itemsCountPerPage: this.state.itemPerPage,\n      totalItemsCount: this.state.posts.length,\n      pageRangeDisplayed: 5,\n      onChange: this.handlePageChange,\n      itemClass: \"page-item\",\n      linkClass: \"page-link\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }, React.createElement(AddPosts, {\n      topicId: this.props.match.params.id,\n      fetchTopicAndPosts: this.fetchTopicAndPosts,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default TopicWithPosts;","map":{"version":3,"sources":["/home/huber/Pulpit/divelog/react-divelog/src/components/forum/TopicWithPosts.js"],"names":["React","ConvertTime","AddPosts","ReactPlayer","Post","Pagination","TopicWithPosts","Component","constructor","props","state","mainPost","isRetrieved","posts","isOwner","email","isUpdatingPost","activePage","itemPerPage","files","addImages","bind","addVideos","addPosts","fetchTopicAndPosts","componentDidMount","id","match","params","fetch","method","headers","then","response","json","jsonData","map","file","index","element","objectId","url","size","name","type","push","post","message","createdAt","convertTime","user","setState","concat","title","owner","pictureUrl","jwtToken","localStorage","getItem","includes","count","handlePageChange","pageNumber","render","indexOfLastTodo","indexOfFirstTodo","renderedProjects","slice","listItems","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../css/TopicWithPosts.css';\nimport ConvertTime from '../../util/ConvertTime';\nimport AddPosts from '../forum/AddPosts';\nimport ReactPlayer from 'react-player';\nimport Post from './Post';\nimport Pagination from 'react-js-pagination';\n\nclass TopicWithPosts extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            mainPost: {},\n            isRetrieved: false,\n            posts: [],\n            isOwner: false,\n            email: '',\n            isUpdatingPost: false,\n            activePage: 1,\n            itemPerPage: 2\n        }\n\n        this.files = []\n        this.ConvertTime = new ConvertTime();\n\n        this.addImages = this.addImages.bind(this);\n        this.addVideos = this.addVideos.bind(this);\n        this.addPosts = this.addPosts.bind(this);\n        this.fetchTopicAndPosts = this.fetchTopicAndPosts.bind(this);\n    }\n\n    componentDidMount() {\n        let id = this.props.match.params.id;\n\n        fetch(`/get/topic/posts/${id}`, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'content-type': 'application/json'\n            }\n        }).then(response => response.json())\n        .then(jsonData => {\n            this.files = [];\n\n            jsonData.files.map((file, index) => {\n                const element = {\n                    id: file.id,\n                    objectId: file.objectId,\n                    url: file.url,\n                    size: file.size,\n                    name: file.name,\n                    type: file.type\n                }\n                this.files.push(element);\n            });\n\n            jsonData.posts.map((post, index) => {\n                let files = [];\n                post.files.map((file, index) => {\n                    const element = {\n                        id: file.id,\n                        objectId: file.objectId,\n                        url: file.url,\n                        size: file.size,\n                        name: file.name,\n                        type: file.type\n                    }\n                    files.push(element);\n                });\n\n                const element = {\n                    id: post.id,\n                    message: post.message,\n                    createdAt: this.ConvertTime.convertTime(post.createdAt, null, false),\n                    files: files,\n                    user: post.user\n                }\n                this.setState({ posts: this.state.posts.concat(element) });\n            });\n\n            const element = {\n                title: jsonData.title,\n                message: jsonData.message,\n                createdAt: this.ConvertTime.convertTime(jsonData.createdAt, null, false)[0],\n                owner: jsonData.user.name,\n                pictureUrl: jsonData.user.pictureUrl,\n                files: this.files\n            }\n            this.setState({ \n                mainPost: element, \n                isRetrieved: true\n            }, () => {\n                let jwtToken = localStorage.getItem(\"JwtToken\");\n\n                fetch(`/getuserdata/${jwtToken}`, {\n                    method: 'GET',\n                    headers: {\n                    'content-type': 'application/json'\n                    }\n                })\n                .then(response => response.json())\n                .then(jsonData => {\n                    this.setState({ email: jsonData.email }, () => {\n                        this.state.posts.map((post, index) => {\n                            if(post.user.email === this.state.email) {\n                                this.setState({ isOwner: true });\n                            }\n                        });\n                        \n                    });\n                }); \n            });\n        });\n    }\n\n    fetchTopicAndPosts() {\n        let id = this.props.match.params.id;\n\n        this.setState({\n            mainPost: {},\n            posts: [],\n            isRetrieved: false,\n            isOwner: false,\n            email: ''\n        }, () => {\n            fetch(`/get/topic/posts/${id}`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json, text/plain, */*',\n                    'content-type': 'application/json'\n                }\n            }).then(response => response.json())\n            .then(jsonData => {\n                this.files = [];\n    \n                jsonData.files.map((file, index) => {\n                    const element = {\n                        id: file.id,\n                        objectId: file.objectId,\n                        url: file.url,\n                        size: file.size,\n                        name: file.name,\n                        type: file.type\n                    }\n                    this.files.push(element);\n                });\n    \n                jsonData.posts.map((post, index) => {\n                    let files = [];\n                    post.files.map((file, index) => {\n                        const element = {\n                            id: file.id,\n                            objectId: file.objectId,\n                            url: file.url,\n                            size: file.size,\n                            name: file.name,\n                            type: file.type\n                        }\n                        files.push(element);\n                    });\n    \n                    const element = {\n                        id: post.id,\n                        message: post.message,\n                        createdAt: this.ConvertTime.convertTime(post.createdAt, null, false),\n                        files: files,\n                        user: post.user\n                    }\n                    this.setState({ posts: this.state.posts.concat(element) });\n                });\n    \n                const element = {\n                    title: jsonData.title,\n                    message: jsonData.message,\n                    createdAt: this.ConvertTime.convertTime(jsonData.createdAt, null, false)[0],\n                    owner: jsonData.user.name,\n                    pictureUrl: jsonData.user.pictureUrl,\n                    files: this.files\n                }\n                this.setState({ \n                    mainPost: element, \n                    isRetrieved: true\n                }, () => {\n                    let jwtToken = localStorage.getItem(\"JwtToken\");\n    \n                    fetch(`/getuserdata/${jwtToken}`, {\n                        method: 'GET',\n                        headers: {\n                        'content-type': 'application/json'\n                        }\n                    })\n                    .then(response => response.json())\n                    .then(jsonData => {\n                        this.setState({ email: jsonData.email }, () => {\n                            this.state.posts.map((post, index) => {\n                                if(post.user.email === this.state.email) {\n                                    this.setState({ isOwner: true });\n                                }\n                            });\n                            \n                        });\n                    }); \n                });\n            });\n        });\n    }\n\n    addImages() {\n        return this.state.mainPost.files.map((file, index) => {\n            if(file.type.includes('image')) {\n                return (\n                    <div>\n                        <br />\n                        <img \n                            src={file.url} \n                            alt={file.name} \n                            className=\"attachment-images\"\n                        />\n                        <br />\n                        { file.name }\n                        <br />\n                    </div>\n                );\n            }\n        });\n    }\n\n    addVideos() {\n        return this.state.mainPost.files.map((file, index) => {\n            if(file.type.includes('video')) {\n                return (\n                    <div>\n                        <br />\n                        <ReactPlayer \n                            url={file.url} \n                            playing\n                            controls=\"true\"\n                        />\n                        <br />\n                        { file.name }\n                        <br />\n                    </div>\n                );\n            }\n        })\n    }\n\n    addPosts() {\n        let count = 0;\n        return this.state.posts.map((post, index) => {\n            return (\n                <Post \n                    id={post.id}\n                    counter={count++}\n                    message={post.message}\n                    createdAt={post.createdAt}\n                    files={post.files}\n                    user={post.user}\n                    fetchTopicAndPosts={this.fetchTopicAndPosts}\n                />\n            );\n        });\n    }\n\n    handlePageChange(pageNumber) {\n        this.setState({ activePage: pageNumber });\n    }\n\n    render() {\n        let isRetrieved = this.state.isRetrieved;\n        let isOwner = this.state.isOwner;\n\n        var indexOfLastTodo = this.state.activePage * this.state.itemPerPage;\n        var indexOfFirstTodo = indexOfLastTodo - this.state.itemPerPage;\n        var renderedProjects = this.state.posts.slice(indexOfFirstTodo, indexOfLastTodo);\n\n        var listItems = renderedProjects.map((post, index) => {\n            return (\n                <Post \n                    id={post.id}\n                    counter={count++}\n                    message={post.message}\n                    createdAt={post.createdAt}\n                    files={post.files}\n                    user={post.user}\n                    fetchTopicAndPosts={this.fetchTopicAndPosts}\n                />\n            );\n        });\n\n        return (\n            <div className=\"topic-posts-container\">\n                <div className=\"main-post-center\">\n                    <div className=\"main-post-container\">\n                        <div className=\"main-post-grid-one\">\n                            <div className=\"main-post-header\">\n                                { this.state.mainPost.createdAt }\n                            </div>\n                            <div className=\"main-post-avatar\">\n                                <img src={this.state.mainPost.pictureUrl} alt=\"Avatar\" />\n                            </div>\n                            <div className=\"main-post-footer\">\n                                { this.state.mainPost.owner }\n                            </div>\n                        </div>\n                        <div className=\"main-post-grid-two\">\n                            <div className=\"main-post-title\">\n                                { this.state.mainPost.title }\n                            </div>\n                            <div className=\"main-post-message\">\n                            markerID = this.props.id;      { this.state.mainPost.message }\n                            </div>\n                            <div className=\"main-post-attachments\">\n                                { isRetrieved && this.addImages() }\n                                { isRetrieved && this.addVideos() }\n                            </div>\n\n                            <div>\n                                { isOwner &&\n                                    <>\n                                        <hr />\n                                        <button className=\"btn btn-warning\">\n                                            EDIT\n                                        </button>\n                                    </>\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                \n                <div className=\"line-break-posts\"></div>\n\n                <div>\n                    { listItems }\n                    {/* { isRetrieved && this.addPosts() } */}\n                    <Pagination\n                        activePage={this.state.activePage}\n                        itemsCountPerPage={this.state.itemPerPage}\n                        totalItemsCount={this.state.posts.length}\n                        pageRangeDisplayed={5}\n                        onChange={this.handlePageChange}\n                        itemClass=\"page-item\"\n                        linkClass=\"page-link\"\n                    />\n                </div>\n\n                <div className=\"\">\n                    <AddPosts \n                        topicId={this.props.match.params.id}\n                        fetchTopicAndPosts={this.fetchTopicAndPosts}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TopicWithPosts;"]},"metadata":{},"sourceType":"module"}