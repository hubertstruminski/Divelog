{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/divelog/react-divelog/src/components/twitter/TwitterFriendsList.js\";\nimport React from 'react';\nimport '../../css/TwitterFriendsList.css';\nimport AuthService from '../../util/AuthService';\nimport Friend from './Friend';\n\nclass TwitterFriendsList extends React.Component {\n  constructor() {\n    super();\n    this.isMountedFriendsList = false;\n    this.state = {\n      friends: [],\n      isRetrieved: false,\n      isEmptyFriendsList: false\n    };\n    this.Auth = new AuthService();\n    this.renderFriendsList = this.renderFriendsList.bind(this);\n  }\n\n  componentDidMount() {\n    this.isMountedFriendsList = true;\n    let jwtToken = null;\n\n    if (this.Auth.getTwitterToken() !== null) {\n      jwtToken = this.Auth.getTwitterToken();\n    }\n\n    if (this.Auth.getToken() !== null) {\n      jwtToken = this.Auth.getToken();\n    }\n\n    fetch(\"/twitter/friends/list/\".concat(jwtToken), {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json, text/plain, */*',\n        'content-type': 'application/json'\n      }\n    }).then(response => response.json()).then(json => {\n      if (this.isMountedFriendsList) {\n        if (json.length !== 0) {\n          json.map((friend, index) => {\n            const element = {\n              id: friend.id,\n              screenName: friend.screenName,\n              name: friend.name,\n              pictureUrl: friend[\"400x400ProfileImageURL\"]\n            };\n            this.setState({\n              friends: this.state.friends.concat(element)\n            });\n          });\n          this.setState({\n            isRetrieved: true\n          });\n        } else {\n          this.setState({\n            isEmptyFriendsList: true\n          });\n        }\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.isMountedFriendsList = false;\n  }\n\n  renderFriendsList() {\n    return this.state.friends.map((friend, index) => {\n      return React.createElement(\"li\", {\n        className: \"list-group-item twitter-friends-list-hover\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(Friend, {\n        key: index,\n        id: friend.id,\n        screenName: friend.screenName,\n        name: friend.name,\n        pictureUrl: friend.pictureUrl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }));\n    });\n  }\n\n  render() {\n    let isRetrieved = this.state.isRetrieved;\n    return React.createElement(\"ul\", {\n      className: \"list-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, isRetrieved && this.renderFriendsList(), React.createElement(\"li\", {\n      className: \"list-group-item twitter-friend-invite-divelog-btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Invite to divelog\")));\n  }\n\n}\n\nexport default TwitterFriendsList;","map":{"version":3,"sources":["/home/huber/Pulpit/divelog/react-divelog/src/components/twitter/TwitterFriendsList.js"],"names":["React","AuthService","Friend","TwitterFriendsList","Component","constructor","isMountedFriendsList","state","friends","isRetrieved","isEmptyFriendsList","Auth","renderFriendsList","bind","componentDidMount","jwtToken","getTwitterToken","getToken","fetch","method","headers","then","response","json","length","map","friend","index","element","id","screenName","name","pictureUrl","setState","concat","componentWillUnmount","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../css/TwitterFriendsList.css';\nimport AuthService from '../../util/AuthService';\nimport Friend from './Friend';\n\nclass TwitterFriendsList extends React.Component {\n    isMountedFriendsList = false;\n\n    constructor() {\n        super();\n\n        this.state = {\n            friends: [],\n            isRetrieved: false,\n            isEmptyFriendsList: false\n        }\n        this.Auth = new AuthService();\n        this.renderFriendsList = this.renderFriendsList.bind(this);\n    }\n\n    componentDidMount() {\n        this.isMountedFriendsList = true;\n\n        let jwtToken = null;\n\n        if(this.Auth.getTwitterToken() !== null) {\n            jwtToken = this.Auth.getTwitterToken();\n        }\n        if(this.Auth.getToken() !== null) {\n            jwtToken = this.Auth.getToken();\n        }\n\n        fetch(`/twitter/friends/list/${jwtToken}`, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json, text/plain, */*',\n                'content-type': 'application/json'\n            }\n        }).then(response => response.json())\n        .then(json => {\n            if(this.isMountedFriendsList) {\n                if(json.length !== 0) {\n                    json.map((friend, index) => {\n                        const element = {\n                            id: friend.id,\n                            screenName: friend.screenName,\n                            name: friend.name,\n                            pictureUrl: friend[\"400x400ProfileImageURL\"]\n                        }\n                        this.setState({ friends: this.state.friends.concat(element) });\n                    });\n                    this.setState({ isRetrieved: true });\n                } else {\n                    this.setState({ isEmptyFriendsList: true });\n                }\n            }\n        });\n    }\n\n    componentWillUnmount() {\n        this.isMountedFriendsList = false;\n    }\n\n    renderFriendsList() {\n        return this.state.friends.map((friend, index) => {\n            return (\n                <li className=\"list-group-item twitter-friends-list-hover\">\n                    <Friend \n                        key={index}\n                        id={friend.id}\n                        screenName={friend.screenName}\n                        name={friend.name}\n                        pictureUrl={friend.pictureUrl}\n                    />\n                </li>\n            );\n        });\n    }\n\n    render() {\n        let isRetrieved = this.state.isRetrieved;\n\n        return (\n            <ul className=\"list-group\">\n                { isRetrieved && this.renderFriendsList() }\n\n                <li className=\"list-group-item twitter-friend-invite-divelog-btn\">\n                    <button className=\"btn btn-success\">Invite to divelog</button>\n                </li>\n            </ul>\n        );\n    }\n}\n\nexport default TwitterFriendsList;"]},"metadata":{},"sourceType":"module"}