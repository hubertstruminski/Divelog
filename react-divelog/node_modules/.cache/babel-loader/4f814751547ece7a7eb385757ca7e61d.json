{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/divelog/react-divelog/src/components/twitter/twitter-messages/SearchPeopleConversation.js\";\nimport React from 'react';\nimport '../../../css/twitter-messages/SearchPeopleConversation.css';\n\nclass SearchPeopleConversation extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      conversations: [],\n      isConversationsRetrieved: false,\n      copyOfConversations: [],\n      isLoading: true\n    };\n    this.Auth = new AuthService();\n    this.copyOfConversations = [];\n    this.renderConversations = this.renderConversations.bind(this);\n    this.searchInList = this.searchInList.bind(this);\n    this.retrieveConversations = this.retrieveConversations.bind(this);\n    this.onClose = this.onClose.bind(this);\n  }\n\n  componentDidMount() {\n    let jwtToken = this.Auth.getRightSocialToken();\n    fetch(\"/twitter/direct/messages/\".concat(jwtToken), {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(json => {\n      json.map((item, index) => {\n        const element = {\n          recipientId: item.recipientId,\n          senderId: item.senderId,\n          name: item.name,\n          screenName: item.screenName,\n          createdAt: item.createdAt,\n          text: item.text,\n          pictureUrl: item.pictureUrl\n        };\n        this.setState({\n          conversations: this.state.conversations.concat(element)\n        });\n      });\n      this.setState({\n        isConversationsRetrieved: true\n      }, () => {\n        this.setState({\n          isLoading: false\n        });\n        this.copyOfConversations = this.state.conversations.map(x => x);\n        $(\".twitter-messages-list-persons-spinner\").css({\n          display: \"block\"\n        });\n      });\n    });\n  }\n\n  renderConversations() {\n    return this.state.conversations.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt)).map((conversation, index) => {\n      return React.createElement(TwitterConversationContact, {\n        recipientId: conversation.recipientId,\n        senderId: conversation.senderId,\n        name: conversation.name,\n        screenName: conversation.screenName,\n        createdAt: conversation.createdAt,\n        text: conversation.text,\n        pictureUrl: conversation.pictureUrl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      });\n    });\n  }\n\n  searchInList(searchInput) {\n    this.setState({\n      isConversationsRetrieved: true,\n      conversations: this.copyOfConversations.map(x => x)\n    }, () => {\n      return this.state.conversations.map((conversation, index) => {\n        if (conversation.name.includes(searchInput) || conversation.screenName.includes(searchInput)) {\n          this.setState({\n            conversations: this.state.conversations.filter((item, i) => i === index)\n          });\n        }\n      });\n    });\n    return null;\n  }\n\n  retrieveConversations() {\n    return this.copyOfConversations.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt)).map((conversation, index) => {\n      return React.createElement(TwitterConversationContact, {\n        recipientId: conversation.recipientId,\n        senderId: conversation.senderId,\n        name: conversation.name,\n        screenName: conversation.screenName,\n        createdAt: conversation.createdAt,\n        text: conversation.text,\n        pictureUrl: conversation.pictureUrl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      });\n    });\n  }\n\n  onClose(e) {\n    e.preventDefault();\n    this.props.setIsNotVisibleModalToSearch();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"twitter-messages-search-people-conversation-modal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-messages-search-people-conversation-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-messages-search-people-header-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fa fa-times twitter-messages-search-people-modal-close\",\n      onClick: this.onClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      style: {\n        fontWeight: 700,\n        display: 'block',\n        paddingLeft: '10%',\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"New message\")), React.createElement(\"div\", {\n      className: \"twitter-messages-search-people-header-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"twitter-messages-search-people-modal-btn-next\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Next\"))), React.createElement(\"input\", {\n      className: \"twitter-messages-search-people-input\",\n      type: \"text\",\n      placeholder: \"Search people\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"twitter-messages-search-people-info-icon-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-user twitter-messages-search-people-icon-user\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), \" You follow each other\"));\n  }\n\n}\n\nexport default SearchPeopleConversation;","map":{"version":3,"sources":["/home/huber/Pulpit/divelog/react-divelog/src/components/twitter/twitter-messages/SearchPeopleConversation.js"],"names":["React","SearchPeopleConversation","Component","constructor","state","conversations","isConversationsRetrieved","copyOfConversations","isLoading","Auth","AuthService","renderConversations","bind","searchInList","retrieveConversations","onClose","componentDidMount","jwtToken","getRightSocialToken","fetch","method","headers","then","response","json","map","item","index","element","recipientId","senderId","name","screenName","createdAt","text","pictureUrl","setState","concat","x","$","css","display","sort","a","b","Date","conversation","searchInput","includes","filter","i","e","preventDefault","props","setIsNotVisibleModalToSearch","render","fontWeight","paddingLeft","width"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../../css/twitter-messages/SearchPeopleConversation.css';\n\nclass SearchPeopleConversation extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            conversations: [],\n            isConversationsRetrieved: false,\n            copyOfConversations: [],\n            isLoading: true\n        }\n        this.Auth = new AuthService();\n        this.copyOfConversations = [];\n        this.renderConversations = this.renderConversations.bind(this);\n        this.searchInList = this.searchInList.bind(this);\n        this.retrieveConversations = this.retrieveConversations.bind(this);\n        this.onClose = this.onClose.bind(this);\n    }\n\n    componentDidMount() {\n        let jwtToken = this.Auth.getRightSocialToken();\n\n        fetch(`/twitter/direct/messages/${jwtToken}`, {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }\n        }).then(response => response.json())\n        .then(json => {\n            json.map((item, index) => {\n                const element = {\n                    recipientId: item.recipientId,\n                    senderId: item.senderId,\n                    name: item.name,\n                    screenName: item.screenName,\n                    createdAt: item.createdAt,\n                    text: item.text,\n                    pictureUrl: item.pictureUrl\n                }\n                this.setState({ conversations: this.state.conversations.concat(element) });\n            });\n            this.setState({ isConversationsRetrieved: true }, () => {\n                this.setState({ isLoading: false });\n                this.copyOfConversations = this.state.conversations.map((x) => x);\n                $(\".twitter-messages-list-persons-spinner\").css({ display: \"block\" });\n            });\n        })\n    }\n\n    renderConversations() {\n        return this.state.conversations\n            .sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt))\n            .map((conversation, index) => {\n            return (\n                <TwitterConversationContact \n                    recipientId={conversation.recipientId}\n                    senderId={conversation.senderId}\n                    name={conversation.name}\n                    screenName={conversation.screenName}\n                    createdAt={conversation.createdAt}\n                    text={conversation.text}\n                    pictureUrl={conversation.pictureUrl}\n                />\n            );\n        });\n    }\n\n    searchInList(searchInput) {\n        this.setState({ \n            isConversationsRetrieved: true,\n            conversations: this.copyOfConversations.map((x) => x)\n        \n        }, () => {\n            return this.state.conversations.map((conversation, index) => {\n                if(conversation.name.includes(searchInput) || conversation.screenName.includes(searchInput)) {\n                    this.setState({ conversations: this.state.conversations.filter((item, i) => i === index)});\n                }\n            });\n        });\n        return null;\n    }\n\n    retrieveConversations() {\n        return this.copyOfConversations\n            .sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt))\n            .map((conversation, index) => {\n            return (\n                <TwitterConversationContact \n                    recipientId={conversation.recipientId}\n                    senderId={conversation.senderId}\n                    name={conversation.name}\n                    screenName={conversation.screenName}\n                    createdAt={conversation.createdAt}\n                    text={conversation.text}\n                    pictureUrl={conversation.pictureUrl}\n                />\n            );\n        });\n    }\n\n    onClose(e) {\n        e.preventDefault();\n        this.props.setIsNotVisibleModalToSearch();\n    }\n\n    render() {\n        return (\n            <div className=\"twitter-messages-search-people-conversation-modal\">\n                <div className=\"twitter-messages-search-people-conversation-header\">\n                    <div className=\"twitter-messages-search-people-header-left\">\n                        <i \n                            className=\"fa fa-times twitter-messages-search-people-modal-close\"\n                            onClick={this.onClose}\n                        ></i>\n                        <span style={{ fontWeight: 700, display: 'block', paddingLeft: '10%', width: '100%' }}>New message</span>\n                    </div>\n                    <div className=\"twitter-messages-search-people-header-right\">\n                        <button className=\"twitter-messages-search-people-modal-btn-next\">Next</button>\n                    </div>\n                </div>\n                <input \n                    className=\"twitter-messages-search-people-input\" \n                    type=\"text\" \n                    placeholder=\"Search people\"\n                />\n                <div className=\"twitter-messages-search-people-info-icon-title\">\n                    <i className=\"fas fa-user twitter-messages-search-people-icon-user\"></i> You follow each other\n                </div>\n                \n            </div>\n        );\n    }\n}\n\nexport default SearchPeopleConversation;"]},"metadata":{},"sourceType":"module"}