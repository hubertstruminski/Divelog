{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/divelog/react-divelog/src/components/twitter/AvailableTrends.js\";\nimport React from 'react';\nimport '../../css/AvailableTrends.css';\nimport AuthService from '../../util/AuthService';\nimport swal from 'sweetalert';\nimport Trend from './Trend';\n\nclass AvailableTrends extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      longitude: 0.0,\n      latitude: 0.0,\n      isGeolocationRejected: false,\n      isGeolocationNotSupported: false,\n      trends: [],\n      isRetrievedTrends: false\n    };\n    this.Auth = new AuthService();\n    this.twitterJwtToken = this.Auth.getTwitterToken();\n    this.geolocationError = this.geolocationError.bind(this);\n    this.geolocationSuccess = this.geolocationSuccess.bind(this);\n    this.renderTwitterTrends = this.renderTwitterTrends.bind(this);\n  }\n\n  componentDidMount() {\n    if (!navigator.geolocation) {\n      this.setState({\n        isGeolocationNotSupported: true\n      });\n    } else {\n      navigator.geolocation.getCurrentPosition(this.geolocationSuccess, this.geolocationError);\n    }\n  }\n\n  geolocationError() {\n    this.setState({\n      isGeolocationRejected: true\n    });\n  }\n\n  geolocationSuccess(position) {\n    this.setState({\n      latitude: position.coords.latitude,\n      longitude: position.coords.longitude\n    }, () => {\n      fetch(\"/twitter/available/closest/trends/\".concat(this.state.latitude, \"/\").concat(this.state.longitude, \"/\").concat(this.twitterJwtToken), {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json, text/plain, */*',\n          'content-type': 'application/json'\n        }\n      }).then(response => response.json()).then(json => {\n        json.map((trend, index) => {\n          if (trend.tweetVolume !== -1) {\n            const element = {\n              name: trend.name,\n              countryName: trend.countryName,\n              tweetVolume: trend.tweetVolume\n            };\n            this.setState({\n              trends: this.state.trends.concat(element)\n            });\n          }\n        });\n        this.setState({\n          isGeolocationNotSupported: false,\n          isGeolocationRejected: false,\n          isRetrievedTrends: true\n        });\n      });\n    });\n  }\n\n  notSupportedGeolocation(isGeolocationNotSupported) {\n    if (isGeolocationNotSupported) {\n      return React.createElement(\"div\", {\n        className: \"alert alert-danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"Your browser does not support geolocation.\");\n    }\n\n    return null;\n  }\n\n  rejectGeolocation(isGeolocationRejected) {\n    if (isGeolocationRejected) {\n      return React.createElement(\"div\", {\n        className: \"alert alert-danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"Location process rejected.\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }), \"Unable to retrieve twitter trends.\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }), \"Turn on your location.\");\n    }\n\n    return null;\n  }\n\n  renderTwitterTrends() {\n    return this.state.trends.map((trend, index) => {\n      return React.createElement(\"li\", {\n        className: \"list-group-item twitter-trend-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(Trend, {\n        name: trend.name,\n        countryName: trend.countryName,\n        tweetVolume: trend.tweetVolume,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }));\n    });\n  }\n\n  render() {\n    let isGeolocationRejected = this.state.isGeolocationRejected;\n    let isGeolocationNotSupported = this.state.isGeolocationNotSupported;\n    let isRetrievedTrends = this.state.isRetrievedTrends;\n    return React.createElement(\"div\", {\n      className: \"available-trends-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"list-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, isGeolocationRejected && React.createElement(\"div\", {\n      className: \"geolocation-twitter-trends-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, this.rejectGeolocation(isGeolocationRejected)), isGeolocationNotSupported && React.createElement(\"div\", {\n      className: \"geolocation-twitter-trends-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, this.notSupportedGeolocation(isGeolocationNotSupported)), isRetrievedTrends && React.createElement(\"div\", {\n      className: \"twitter-trends-outside-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, this.renderTwitterTrends())));\n  }\n\n}\n\nexport default AvailableTrends;","map":{"version":3,"sources":["/home/huber/Pulpit/divelog/react-divelog/src/components/twitter/AvailableTrends.js"],"names":["React","AuthService","swal","Trend","AvailableTrends","Component","constructor","props","state","longitude","latitude","isGeolocationRejected","isGeolocationNotSupported","trends","isRetrievedTrends","Auth","twitterJwtToken","getTwitterToken","geolocationError","bind","geolocationSuccess","renderTwitterTrends","componentDidMount","navigator","geolocation","setState","getCurrentPosition","position","coords","fetch","method","headers","then","response","json","map","trend","index","tweetVolume","element","name","countryName","concat","notSupportedGeolocation","rejectGeolocation","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../css/AvailableTrends.css';\nimport AuthService from '../../util/AuthService';\nimport swal from 'sweetalert';\nimport Trend from './Trend';\n\nclass AvailableTrends extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            longitude: 0.0,\n            latitude: 0.0,\n            isGeolocationRejected: false,\n            isGeolocationNotSupported: false,\n            trends: [],\n            isRetrievedTrends: false\n        }\n        this.Auth = new AuthService();\n        this.twitterJwtToken = this.Auth.getTwitterToken();\n        this.geolocationError = this.geolocationError.bind(this);\n        this.geolocationSuccess = this.geolocationSuccess.bind(this);\n        this.renderTwitterTrends = this.renderTwitterTrends.bind(this);\n    }\n\n    componentDidMount() {\n        if(!navigator.geolocation) {\n            this.setState({ isGeolocationNotSupported: true });\n        } else {\n            navigator.geolocation.getCurrentPosition(this.geolocationSuccess, this.geolocationError);\n        }\n        \n    }\n\n    geolocationError() {\n        this.setState({ isGeolocationRejected: true });\n    }\n\n    geolocationSuccess(position) {\n        this.setState({ \n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude\n        }, () => {\n            fetch(`/twitter/available/closest/trends/${this.state.latitude}/${this.state.longitude}/${this.twitterJwtToken}`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json, text/plain, */*',\n                    'content-type': 'application/json'\n                }\n            }).then(response => response.json())\n            .then(json => {\n                json.map((trend, index) => {\n                    if(trend.tweetVolume !== -1) {\n                        const element = {\n                            name: trend.name,\n                            countryName: trend.countryName,\n                            tweetVolume: trend.tweetVolume\n                        }\n                        this.setState({ trends: this.state.trends.concat(element) });\n                    }\n                });\n                this.setState({\n                    isGeolocationNotSupported: false,\n                    isGeolocationRejected: false,\n                    isRetrievedTrends: true\n                });\n            });\n        });\n    }\n\n    notSupportedGeolocation(isGeolocationNotSupported) {\n        if(isGeolocationNotSupported) {\n            return (\n                <div className=\"alert alert-danger\">\n                    Your browser does not support geolocation.\n                </div>\n            );\n        }\n        return null;\n    }\n\n    rejectGeolocation(isGeolocationRejected) {\n        if(isGeolocationRejected) {\n            return (\n                <div className=\"alert alert-danger\">\n                    Location process rejected.\n                    <br />\n                    Unable to retrieve twitter trends.\n                    <br />\n                    Turn on your location.\n                </div>\n            );\n        }\n        return null;\n    }\n\n    renderTwitterTrends() {\n        return this.state.trends.map((trend, index) => {\n            return (\n                <li className=\"list-group-item twitter-trend-container\">\n                    <Trend \n                        name={trend.name}\n                        countryName={trend.countryName}\n                        tweetVolume={trend.tweetVolume}\n                    />\n                </li>\n            );\n        });\n    }\n\n\n    render() {\n        let isGeolocationRejected = this.state.isGeolocationRejected;\n        let isGeolocationNotSupported = this.state.isGeolocationNotSupported;\n        let isRetrievedTrends = this.state.isRetrievedTrends;\n\n        return (\n            <div className=\"available-trends-container\">\n                <ul className=\"list-group\">\n                    { isGeolocationRejected &&\n                        <div className=\"geolocation-twitter-trends-box\">\n                            { this.rejectGeolocation(isGeolocationRejected) }\n                        </div>\n                    }\n                    {\n                        isGeolocationNotSupported &&\n                        <div className=\"geolocation-twitter-trends-box\">\n                            { this.notSupportedGeolocation(isGeolocationNotSupported) }\n                        </div>\n                    }\n                    { isRetrievedTrends && \n                        <div className=\"twitter-trends-outside-box\">\n                            { this.renderTwitterTrends() }\n                        </div>  \n                    }\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default AvailableTrends;"]},"metadata":{},"sourceType":"module"}