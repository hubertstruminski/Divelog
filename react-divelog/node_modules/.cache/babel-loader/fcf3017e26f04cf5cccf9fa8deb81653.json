{"ast":null,"code":"import decode from 'jwt-decode';\nimport Cookies from 'universal-cookie';\nexport default class AuthService {\n  setToken(idToken) {\n    localStorage.setItem(\"JwtToken\", idToken);\n  }\n\n  getToken() {\n    return localStorage.getItem(\"JwtToken\");\n  }\n\n  getTwitterToken() {\n    let cookie = new Cookies();\n    return cookie.get(\"twitterJwtToken\");\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (error) {\n      return false;\n    }\n  }\n\n  getRightSocialToken() {\n    let jwtToken = null;\n\n    if (this.getTwitterToken() !== null) {\n      jwtToken = this.getTwitterToken();\n    }\n\n    if (this.getToken() !== null) {\n      jwtToken = this.getToken();\n    }\n\n    return jwtToken;\n  }\n\n  loggedIn() {\n    let facebookJwtToken = this.getToken();\n    let twitterJwtToken = this.getTwitterToken();\n\n    if (facebookJwtToken !== null) {\n      const token = this.getToken();\n      return !!token && !this.isTokenExpired(token);\n    }\n\n    if (twitterJwtToken !== null) {\n      const twitterToken = this.getTwitterToken();\n      return !!twitterToken && !this.isTokenExpired(twitterToken);\n    }\n\n    return false;\n  }\n\n  logout() {\n    localStorage.removeItem(\"JwtToken\");\n  }\n\n  logoutTwitter() {\n    let cookie = new Cookies();\n    cookie.remove(\"twitterJwtToken\");\n  }\n\n}","map":{"version":3,"sources":["/home/huber/Pulpit/divelog/react-divelog/src/util/AuthService.js"],"names":["decode","Cookies","AuthService","setToken","idToken","localStorage","setItem","getToken","getItem","getTwitterToken","cookie","get","isTokenExpired","token","decoded","exp","Date","now","error","getRightSocialToken","jwtToken","loggedIn","facebookJwtToken","twitterJwtToken","twitterToken","logout","removeItem","logoutTwitter","remove"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,YAAnB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AAEA,eAAe,MAAMC,WAAN,CAAkB;AAE7BC,EAAAA,QAAQ,CAACC,OAAD,EAAU;AACdC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,OAAjC;AACH;;AAEDG,EAAAA,QAAQ,GAAG;AACP,WAAOF,YAAY,CAACG,OAAb,CAAqB,UAArB,CAAP;AACH;;AAEDC,EAAAA,eAAe,GAAG;AACd,QAAIC,MAAM,GAAG,IAAIT,OAAJ,EAAb;AACA,WAAOS,MAAM,CAACC,GAAP,CAAW,iBAAX,CAAP;AACH;;AAEDC,EAAAA,cAAc,CAACC,KAAD,EAAQ;AAClB,QAAI;AACA,YAAMC,OAAO,GAAGd,MAAM,CAACa,KAAD,CAAtB;;AAEA,UAAGC,OAAO,CAACC,GAAR,GAAcC,IAAI,CAACC,GAAL,KAAa,IAA9B,EAAoC;AAChC,eAAO,IAAP;AACH,OAFD,MAEO;AACH,eAAO,KAAP;AACH;AACJ,KARD,CAQE,OAAMC,KAAN,EAAa;AACX,aAAO,KAAP;AACH;AACJ;;AAEDC,EAAAA,mBAAmB,GAAG;AAClB,QAAIC,QAAQ,GAAG,IAAf;;AAEA,QAAG,KAAKX,eAAL,OAA2B,IAA9B,EAAoC;AAChCW,MAAAA,QAAQ,GAAG,KAAKX,eAAL,EAAX;AACH;;AACD,QAAG,KAAKF,QAAL,OAAoB,IAAvB,EAA6B;AACzBa,MAAAA,QAAQ,GAAG,KAAKb,QAAL,EAAX;AACH;;AACD,WAAOa,QAAP;AACH;;AAEDC,EAAAA,QAAQ,GAAG;AACP,QAAIC,gBAAgB,GAAG,KAAKf,QAAL,EAAvB;AACA,QAAIgB,eAAe,GAAG,KAAKd,eAAL,EAAtB;;AAEA,QAAGa,gBAAgB,KAAK,IAAxB,EAA8B;AAC1B,YAAMT,KAAK,GAAG,KAAKN,QAAL,EAAd;AACA,aAAO,CAAC,CAACM,KAAF,IAAW,CAAC,KAAKD,cAAL,CAAoBC,KAApB,CAAnB;AACH;;AAED,QAAGU,eAAe,KAAK,IAAvB,EAA6B;AACzB,YAAMC,YAAY,GAAG,KAAKf,eAAL,EAArB;AACA,aAAO,CAAC,CAACe,YAAF,IAAkB,CAAC,KAAKZ,cAAL,CAAoBY,YAApB,CAA1B;AACH;;AACD,WAAO,KAAP;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACLpB,IAAAA,YAAY,CAACqB,UAAb,CAAwB,UAAxB;AACH;;AAEDC,EAAAA,aAAa,GAAG;AACZ,QAAIjB,MAAM,GAAG,IAAIT,OAAJ,EAAb;AACAS,IAAAA,MAAM,CAACkB,MAAP,CAAc,iBAAd;AACH;;AAhE4B","sourcesContent":["import decode from 'jwt-decode';\nimport Cookies from 'universal-cookie';\n\nexport default class AuthService {\n\n    setToken(idToken) {\n        localStorage.setItem(\"JwtToken\", idToken);\n    }\n\n    getToken() {\n        return localStorage.getItem(\"JwtToken\");\n    }\n\n    getTwitterToken() {\n        let cookie = new Cookies();\n        return cookie.get(\"twitterJwtToken\");\n    }\n\n    isTokenExpired(token) {\n        try {\n            const decoded = decode(token);\n\n            if(decoded.exp < Date.now() / 1000) {\n                return true;\n            } else {\n                return false;\n            }\n        } catch(error) {\n            return false;\n        }\n    }\n\n    getRightSocialToken() {\n        let jwtToken = null;\n\n        if(this.getTwitterToken() !== null) {\n            jwtToken = this.getTwitterToken();\n        }\n        if(this.getToken() !== null) {\n            jwtToken = this.getToken();\n        }\n        return jwtToken;\n    }\n\n    loggedIn() {\n        let facebookJwtToken = this.getToken();\n        let twitterJwtToken = this.getTwitterToken();\n\n        if(facebookJwtToken !== null) {\n            const token = this.getToken();\n            return !!token && !this.isTokenExpired(token);\n        }\n\n        if(twitterJwtToken !== null) {\n            const twitterToken = this.getTwitterToken();\n            return !!twitterToken && !this.isTokenExpired(twitterToken);\n        }\n        return false;\n    }\n\n    logout() {\n        localStorage.removeItem(\"JwtToken\");\n    }\n\n    logoutTwitter() {\n        let cookie = new Cookies();\n        cookie.remove(\"twitterJwtToken\");\n    }\n}"]},"metadata":{},"sourceType":"module"}