{"ast":null,"code":"var _jsxFileName = \"/home/huber/Pulpit/divelog/react-divelog/src/components/twitter/twitter-messages/SearchPeopleConversationModal.js\";\nimport React from 'react';\nimport '../../../css/twitter-messages/SearchPeopleConversationModal.css';\nimport AuthService from '../../../util/AuthService';\nimport TwitterConversationContact from './TwitterConversationContact';\nimport $ from 'jquery';\nimport TwitterMessagesSearch from './TwitterMessagesSearch';\nimport axios from 'axios';\nimport ContactModal from './ContactModal';\nimport SelectedContact from './SelectedContact';\n\nclass SearchPeopleConversationModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      contacts: [],\n      isLoading: false,\n      searchInput: '',\n      isContactsRetrieved: false,\n      selectedContacts: []\n    };\n    this.Auth = new AuthService();\n    this.renderContacts = this.renderContacts.bind(this);\n    this.onClose = this.onClose.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.onBlur = this.onBlur.bind(this);\n    this.addSelectedContactToList = this.addSelectedContactToList.bind(this);\n    this.renderSelectedContacts = this.renderSelectedContacts.bind(this);\n    this.removeSelectedContactFromList = this.removeSelectedContactFromList.bind(this);\n  }\n\n  onChange(e) {\n    this.setState({\n      searchInput: e.target.value\n    }, () => {\n      if (this.state.searchInput && this.state.searchInput.length > 0) {\n        this.setState({\n          isLoading: true\n        }, () => {\n          this.retrieveContacts();\n        });\n      } else if (!this.state.searchPeople) {\n        this.setState({\n          contacts: [],\n          isLoading: false\n        });\n      }\n    });\n  }\n\n  onBlur(e) {\n    if (this.state.searchInput.length === 0) {\n      this.setState({\n        contacts: []\n      });\n    }\n  }\n\n  retrieveContacts() {\n    let jwtToken = this.Auth.getRightSocialToken();\n    axios({\n      url: \"/twitter/direct/messages/search/people/\".concat(jwtToken),\n      method: 'POST',\n      data: this.state.searchInput,\n      headers: {\n        'content-type': 'application/json'\n      }\n    }).then(response => {\n      this.setState({\n        contacts: []\n      });\n      console.log(response.data);\n      response.data.map((contact, index) => {\n        const element = {\n          isContactPossible: contact.dmaccessible,\n          name: contact.name,\n          screenName: contact.screenName,\n          pictureUrl: contact.pictureUrl\n        };\n        this.setState({\n          contacts: this.state.contacts.concat(element)\n        });\n      });\n      this.setState({\n        isContactsRetrieved: true,\n        isLoading: false\n      }, () => {\n        $(\".twitter-messages-search-people-modal-list-contacts\").css({\n          display: \"block\"\n        });\n      });\n    });\n  }\n\n  renderContacts() {\n    return this.state.contacts.map((contact, index) => {\n      return React.createElement(ContactModal, {\n        key: index,\n        index: index,\n        isContactPossible: contact.isContactPossible,\n        name: contact.name,\n        screenName: contact.screenName,\n        pictureUrl: contact.pictureUrl,\n        addSelectedContactToList: this.addSelectedContactToList,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      });\n    });\n  }\n\n  onClose(e) {\n    e.preventDefault();\n    this.props.setIsNotVisibleModalToSearch();\n  }\n\n  addSelectedContactToList(object) {\n    return this.state.selectedContacts.map((contact, index) => {\n      if (contact.name = object.name) {\n        e.preventDefault();\n      }\n\n      this.setState({\n        selectedContacts: this.state.selectedContacts.concat(object)\n      });\n    });\n  }\n\n  removeSelectedContactFromList(name) {\n    return this.state.selectedContacts.map((contact, index) => {\n      if (contact.name === name) {\n        this.setState({\n          selectedContacts: this.state.selectedContacts.filter((item, i) => i !== index)\n        });\n      }\n    });\n  }\n\n  renderSelectedContacts() {\n    return this.state.selectedContacts.map((contact, index) => {\n      return React.createElement(SelectedContact, {\n        name: contact.name,\n        removeSelectedContactFromList: this.removeSelectedContactFromList,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      });\n    });\n  }\n\n  render() {\n    let isLoading = this.state.isLoading;\n    let isContactsRetrieved = this.state.isContactsRetrieved;\n    return React.createElement(\"div\", {\n      className: \"twitter-messages-search-people-conversation-modal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-messages-search-people-conversation-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"twitter-messages-search-people-header-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fa fa-times twitter-messages-search-people-modal-close\",\n      onClick: this.onClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      style: {\n        color: 'black',\n        fontWeight: 700,\n        display: 'block',\n        paddingLeft: '10%',\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"New message\")), React.createElement(\"div\", {\n      className: \"twitter-messages-search-people-header-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"twitter-messages-search-people-modal-btn-next\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"Next\"))), React.createElement(\"input\", {\n      className: \"twitter-messages-search-people-input\",\n      type: \"text\",\n      placeholder: \"Search people\",\n      value: this.state.searchInput,\n      onChange: this.onChange,\n      onBlur: this.onBlur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"twitter-messages-selected-contacts\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, this.renderSelectedContacts()), React.createElement(\"div\", {\n      className: \"twitter-messages-search-people-info-icon-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fas fa-user twitter-messages-search-people-icon-user\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }), \" You follow each other\"), React.createElement(\"div\", {\n      className: \"twitter-messages-search-people-modal-list-contacts\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, isLoading && React.createElement(\"div\", {\n      className: \"spinner-border text-primary\",\n      role: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      class: \"sr-only\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"Loading...\")), isContactsRetrieved && React.createElement(\"ul\", {\n      className: \"list-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, this.renderContacts())));\n  }\n\n}\n\nexport default SearchPeopleConversationModal;","map":{"version":3,"sources":["/home/huber/Pulpit/divelog/react-divelog/src/components/twitter/twitter-messages/SearchPeopleConversationModal.js"],"names":["React","AuthService","TwitterConversationContact","$","TwitterMessagesSearch","axios","ContactModal","SelectedContact","SearchPeopleConversationModal","Component","constructor","props","state","contacts","isLoading","searchInput","isContactsRetrieved","selectedContacts","Auth","renderContacts","bind","onClose","onChange","onBlur","addSelectedContactToList","renderSelectedContacts","removeSelectedContactFromList","e","setState","target","value","length","retrieveContacts","searchPeople","jwtToken","getRightSocialToken","url","method","data","headers","then","response","console","log","map","contact","index","element","isContactPossible","dmaccessible","name","screenName","pictureUrl","concat","css","display","preventDefault","setIsNotVisibleModalToSearch","object","filter","item","i","render","color","fontWeight","paddingLeft","width"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../../css/twitter-messages/SearchPeopleConversationModal.css';\nimport AuthService from '../../../util/AuthService';\nimport TwitterConversationContact from './TwitterConversationContact';\nimport $ from 'jquery';\nimport TwitterMessagesSearch from './TwitterMessagesSearch';\nimport axios from 'axios';\nimport ContactModal from './ContactModal';\nimport SelectedContact from './SelectedContact';\n\nclass SearchPeopleConversationModal extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            contacts: [],\n            isLoading: false,\n            searchInput: '',\n            isContactsRetrieved: false,\n            selectedContacts: []\n        }\n        this.Auth = new AuthService();\n        this.renderContacts = this.renderContacts.bind(this);\n        this.onClose = this.onClose.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.addSelectedContactToList = this.addSelectedContactToList.bind(this);\n        this.renderSelectedContacts = this.renderSelectedContacts.bind(this);\n        this.removeSelectedContactFromList = this.removeSelectedContactFromList.bind(this);\n    }\n\n    onChange(e) {\n        this.setState({ searchInput: e.target.value }, () => {\n            if(this.state.searchInput && this.state.searchInput.length > 0) {\n                this.setState({ isLoading: true }, () => {\n                    this.retrieveContacts();\n                });\n            } else if(!this.state.searchPeople) {\n                this.setState({ \n                    contacts: [],\n                    isLoading: false\n                });\n\n            }\n        });\n    }\n\n    onBlur(e) {\n        if(this.state.searchInput.length === 0) {\n            this.setState({ contacts: [] });\n        }\n    }\n\n    retrieveContacts() {\n        let jwtToken = this.Auth.getRightSocialToken();\n\n        axios({\n            url: `/twitter/direct/messages/search/people/${jwtToken}`,\n            method: 'POST',\n            data: this.state.searchInput,\n            headers: {\n                'content-type': 'application/json'\n            }\n        }).then(response => {\n            this.setState({ contacts: [] });\n            console.log(response.data);\n            response.data.map((contact, index) => {\n                const element = {\n                    isContactPossible: contact.dmaccessible,\n                    name: contact.name,\n                    screenName: contact.screenName,\n                    pictureUrl: contact.pictureUrl\n                }\n                this.setState({ contacts: this.state.contacts.concat(element) });\n            });\n            this.setState({ \n                isContactsRetrieved: true,\n                isLoading: false\n            }, () => {\n                $(\".twitter-messages-search-people-modal-list-contacts\").css({ display: \"block\" });\n            });\n        });\n    }\n\n    renderContacts() {\n        return this.state.contacts.map((contact, index) => {\n            return (\n                <ContactModal \n                    key={index}\n                    index={index}\n                    isContactPossible={contact.isContactPossible}\n                    name={contact.name}\n                    screenName={contact.screenName}\n                    pictureUrl={contact.pictureUrl}\n                    addSelectedContactToList={this.addSelectedContactToList}\n                />\n            );\n        });  \n    }\n\n    onClose(e) {\n        e.preventDefault();\n        this.props.setIsNotVisibleModalToSearch();\n    }\n\n    addSelectedContactToList(object) {\n        return this.state.selectedContacts.map((contact, index) => {\n            if(contact.name = object.name) {\n                e.preventDefault();\n            }\n            this.setState({ selectedContacts: this.state.selectedContacts.concat(object) });\n        });\n    \n    }\n\n    removeSelectedContactFromList(name) {\n        return this.state.selectedContacts.map((contact, index) => {\n            if(contact.name === name) {\n                this.setState({ selectedContacts: this.state.selectedContacts.filter((item, i) => i !== index) });\n            }\n        })\n    }\n\n    renderSelectedContacts() {\n        return this.state.selectedContacts.map((contact, index) => {\n            return (\n                <SelectedContact \n                    name={contact.name}\n                    removeSelectedContactFromList={this.removeSelectedContactFromList}\n                />\n            );\n        });\n    }\n\n    render() {\n        let isLoading = this.state.isLoading;\n        let isContactsRetrieved = this.state.isContactsRetrieved;\n        return (\n            <div className=\"twitter-messages-search-people-conversation-modal\">\n                <div className=\"twitter-messages-search-people-conversation-header\">\n                    <div className=\"twitter-messages-search-people-header-left\">\n                        <i \n                            className=\"fa fa-times twitter-messages-search-people-modal-close\"\n                            onClick={this.onClose}\n                        ></i>\n                        <span style={{ color: 'black', fontWeight: 700, display: 'block', paddingLeft: '10%', width: '100%' }}>New message</span>\n                    </div>\n                    <div className=\"twitter-messages-search-people-header-right\">\n                        <button className=\"twitter-messages-search-people-modal-btn-next\">Next</button>\n                    </div>\n                </div>\n                <input \n                    className=\"twitter-messages-search-people-input\" \n                    type=\"text\" \n                    placeholder=\"Search people\"\n                    value={this.state.searchInput}\n                    onChange={this.onChange}\n                    onBlur={this.onBlur}\n                />\n                <div className=\"twitter-messages-selected-contacts\">\n                    { this.renderSelectedContacts() }\n                </div>\n                <div className=\"twitter-messages-search-people-info-icon-title\">\n                    <i className=\"fas fa-user twitter-messages-search-people-icon-user\"></i> You follow each other\n                </div>\n                <div className=\"twitter-messages-search-people-modal-list-contacts\">\n                    { isLoading && \n                        <div \n                            className='spinner-border text-primary' \n                            role='status'\n                        >\n                            <span class='sr-only'>\n                                Loading...\n                            </span>\n                        </div>\n                    }\n                    {\n                        isContactsRetrieved &&\n\n                        <ul className=\"list-group\">\n                            { this.renderContacts() }\n                        </ul>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default SearchPeopleConversationModal;"]},"metadata":{},"sourceType":"module"}